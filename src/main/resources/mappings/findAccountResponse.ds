/** DataSonnet
version=2.0
output application/json
input payload application/json
*/
                          
local selector(obj,key,dValue = null) = ds.or(ds.select(obj,key), dValue);
local accountStatus = if selector(payload, "accountState") != null
  && selector(payload, "accountState") == 'PENDING_APPROVAL' then 'Pending'
  else if selector(payload, "accountState") != null
  && selector(payload, "accountState") == 'CLOSED' then 'Deleted'
  else if selector(payload, "accountState") != null
  && selector(payload, "accountState") == 'LOCKED' then 'Disable'
  else selector(payload, "accountState");

std.prune(
  {
    "accountType": selector(payload, "accountType"),
    "ownershipType": "Owner",
    "accountNumber": payload.id,
    "accountBranchId": selector(payload, "assignedBranchKey"),
    "productId": payload.productTypeKey,
    "name": payload.name,
    "currency": selector(payload, "currencyCode"),
    "parties": [
      {
        "partyId": payload.accountHolderKey,
        "partyType": if payload.accountHolderType=="GROUP" then "Organization" else "Person",
        "partyAccountRole": "Owner"
      }
    ],
    "status": accountStatus,
    "statusDateAndTime": selector(payload, "lastModifiedDate"),
    "openDate": if ds.select(payload, "creationDate") != null then ds.datetime.toLocalDate(payload.creationDate) else null,
    "closeDate": if ds.select(payload, "closeDate") != null then ds.datetime.toLocalDate(payload.closeDate) else null,
    "maturityDate": if ds.select(payload, "maturityDate") != null then ds.datetime.toLocalDate(payload.maturityDate) else null,
    "balances": [
        {
            "balanceName": "Available",
            "amount": ds.toString(payload.balances.availableBalance),
            "currency": payload.currencyCode,
            "calculationDate": payload.lastModifiedDate
        },
        {
            "balanceName": "Blocked",
            "amount": ds.toString(payload.balances.blockedBalance),
            "currency": payload.currencyCode,
            "calculationDate": payload.lastModifiedDate
        },
        {
            "balanceName": "Pending",
            "amount": ds.toString(payload.balances.holdBalance),
            "currency": payload.currencyCode,
            "calculationDate": payload.lastModifiedDate
        },
        {
            "balanceName": "Current",
            "amount": ds.toString(payload.balances.totalBalance),
            "currency": payload.currencyCode,
            "calculationDate": payload.lastModifiedDate
        },
    ],
    "accountId": payload.encodedKey
  }
)
