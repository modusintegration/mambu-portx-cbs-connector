/** DataSonnet
version=2.0
output application/json
input payload application/json
*/
local selector(obj,key,dValue = null) = ds.or(ds.select(obj,key), dValue);
local address = selector(payload, "addresses");
local first = selector(payload, "firstName");
local middle = selector(payload, "middleName");
local last = selector(payload, "lastName");
local fullname = (if first!=null then first else "") +
                 (if first!=null && middle!=null then " " else "") +
                 (if middle!=null then middle else "") +
                 (if (first!=null || middle!=null) && last!=null then " " else "") +
                 if last!=null then last;
local shortName = (if first!=null then first else "") +
                  (if first!=null && last!=null then " " else "") +
                  if last!=null then last;
local documents = if selector(payload, "idDocuments") != null then (ds.filter(selector(payload, "idDocuments"), function(value, index) value.documentType != "SocialSecurityNumber"));
local SSN = if selector(payload, "idDocuments") != null then (ds.filter(selector(payload, "idDocuments"), function(value, index) value.documentType == "SocialSecurityNumber")) else [];

local idDocuments = selector(payload, "idDocuments");
local mambuIdentifier = {
  number: selector(payload, "id"),
  schemeName: "clientId",
  issuer: "Mambu"
};
local otherDocuments =
  if (documents != null && std.length(documents) > 0) then
  [
    {
      number: selector(idDocument, "documentId"),
      schemeName: selector(idDocument, "documentType"),
    } for idDocument in documents
  ]
  else
  [];
local genericIdentifiers = [mambuIdentifier] + otherDocuments;
local taxInformation = if (SSN != null && std.length(SSN) > 0) then{
    tIN: selector(SSN[0], "documentId"),
    taxIdType: selector(SSN[0], "documentType")
};
std.prune({
  "personId": selector(payload, "encodedKey"),
  "genericIdentifiers": genericIdentifiers,
  "name": fullname,
  "shortName": shortName,
  "relatedParties": [
    {
      "partyId": selector(payload, "encodedKey"),
      "partyType": "Person",
      "partyRelationType": "Owner"
    }
  ],
  "postalAddress": {
    "postCode": if ds.isArray(address) then selector(address[0], "postcode") else "",
    "townName": if ds.isArray(address) then selector(address[0], "city") else "",
    "country": if ds.isArray(address) then selector(address[0], "country") else "",
    "addressLine": [
      if ds.isArray(address) then selector(address[0], "line1"),
      if ds.isArray(address) then selector(address[0], "line2")
    ]
  },
  "status": selector(payload, "state"),
  "placeAndDateOfBirth": {
    "birthDate": selector(payload, "birthDate"),
  },
  "contact": {
    "mobileNumber": selector(payload, "mobilePhone"),
    "emailAddress": selector(payload, "emailAddress"),
  },
    "structuredName": {
    "firstName": selector(payload, "firstName"),
    "middleName": selector(payload, "middleName"),
    "lastName": selector(payload, "lastName"),
  },
  "taxInformation": taxInformation
})

