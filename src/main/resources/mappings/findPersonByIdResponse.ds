/** DataSonnet
version=2.0
output application/json
input payload application/json
*/
local selector(obj,key,dValue = null) = ds.or(ds.select(obj,key), dValue);
local addresses = selector(payload, "addresses");
local first = selector(payload, "firstName");
local middle = selector(payload, "middleName");
local last = selector(payload, "lastName");
local fullname = (if first!=null then first else "") +
                 (if first!=null && middle!=null then " " else "") +
                 (if middle!=null then middle else "") +
                 (if (first!=null || middle!=null) && last!=null then " " else "") +
                 if last!=null then last;
local shortName = (if first!=null then first else "") +
                  (if first!=null && last!=null then " " else "") +
                  if last!=null then last;
local documents = selector(payload, "idDocuments");

local postalAddresses =
  if (addresses != null && std.length(addresses) > 0) then
    [
      {
        postCode: selector(address, "postcode"),
        townName: selector(address, "city"),
        districtName: selector(address, "region"),
        country: selector(address, "country"),
        addressLine: [
          selector(address, "line1"),
          selector(address, "line2"),
        ]
      } for address in addresses
    ]
  else
    [];

local mambuIdentifier = {
  number: selector(payload, "id"),
  schemeName: "clientId",
  issuer: "Mambu"
};
local identifiers =
  if (documents != null && std.length(documents) > 0) then
  [
    {
      number: selector(idDocument, "documentId"),
      schemeName: selector(idDocument, "documentType"),
    } for idDocument in documents
  ]
  else
  [];
local internalClientNumber = {
  number: selector(payload, "id"),
  schemeName: "InternalCustomerNumber",
  issuer: "Mambu"
};
std.prune({
  "personId": selector(payload, "encodedKey"),
  "identifiers": [internalClientNumber] + identifiers,
  "name": fullname,
  "shortName": shortName,
  "relatedParties": [
    {
      "partyId": selector(payload, "encodedKey"),
      "partyType": "Person",
      "partyRelationType": "Owner"
    }
  ],
  "postalAddresses": postalAddresses,
  "status": selector(payload, "state"),
  "placeAndDateOfBirth": {
    "birthDate": selector(payload, "birthDate"),
  },
  "contact": {
    "structuredName": {
      "firstName": selector(payload, "firstName"),
      "middleName": selector(payload, "middleName"),
      "lastName": selector(payload, "lastName"),
    },
    "phones": [
      {
        "number": selector(payload, "homePhone")
      },
      {
        "number": selector(payload, "mobilePhone")
      },
      {
        "number": selector(payload, "mobilePhone2")
      },
    ],
    "emails" : [
      {
        "emailAddress": selector(payload, "emailAddress"),
      }
    ],
    "preferredLanguage": selector(payload, "preferredLanguage")
  },
  "gender" : selector(payload, "gender"),
  "structuredName": {
    "firstName": selector(payload, "firstName"),
    "middleName": selector(payload, "middleName"),
    "lastName": selector(payload, "lastName"),
  },
  "audit" : {
    "status": selector(payload, "state"),
    "creationDate": if ds.select(payload, "creationDate") != null then ds.datetime.toLocalDate(payload.creationDate),
    "lastModificationDate": if ds.select(payload, "lastModifiedDate") != null then ds.datetime.toLocalDate(payload.lastModifiedDate)
  }
})

