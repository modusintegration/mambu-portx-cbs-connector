/** DataSonnet
version=2.0
output application/json
input payload application/json
*/
local selector(obj,key,dValue = null) = ds.or(ds.select(obj,key), dValue);

local identifiers = selector(payload, "identifiers");

local einNumber = if identifiers != null then (ds.filter(identifiers, function(value, index) value.schemeName ==  "EmployerIdentificationNumber"))[0].number else null;
local einFormatted = if einNumber != null then ds.replace(einNumber, '-', '') else null;

local postalAddresses = selector(payload, "postalAddresses");
local mailingAddress = if ds.isArray(postalAddresses) && std.length(postalAddresses) > 0 then postalAddresses[0].addressType;
local physicalAddress = if ds.isArray(postalAddresses) && std.length(postalAddresses) > 1 then postalAddresses[0].addressType;
local addressLines =  if ds.isArray(postalAddresses) && std.length(postalAddresses) > 1 then postalAddresses[1].addressLine;
local country = if ds.isArray(postalAddresses) && std.length(postalAddresses) > 1 then selector(postalAddresses[1], "country") else null;
local addressLine1 = if addressLines != null then addressLines[0] else null;

local taxInformation = selector(payload, "taxInformation");
local tIN = if taxInformation != null then selector(taxInformation, "tIN") else null;
local taxIdType = if taxInformation != null then selector(taxInformation, "taxIdType") else null;

local organizationProfile = selector(payload, "organizationProfile");
local previousFinancialInstitution = selector(organizationProfile, "previousFinancialInstitution");
local referredByWhom = selector(organizationProfile, "referredByWhom");
local timeAtCurrentAddress = selector(organizationProfile, "timeAtCurrentAddress");
local timeAtCurrentAddressUnit = selector(timeAtCurrentAddress, "unit");
local timeAtCurrentAddressValue = selector(timeAtCurrentAddress, "value");
local politicalAffiliation = selector(organizationProfile, "politicalAffiliation");

local relatedParties = selector(payload, "relatedParties");
local contact = selector(payload, "contact");
local phones = selector(contact, "phones");
local phone1 = if phones != null && std.length(phones) > 0 then selector(phones[0], "number") else null;
local phone2 = if phones != null && std.length(phones) > 1 then selector(phones[1], "number") else null;

local emails = selector(contact, "emails");
local firstEmails = if emails != null && std.length(emails) > 0 then selector(emails[0], "emailAddress") else null;

local communicationChannels = selector(contact, "communicationChannels");
local useForEnterpriseAlertsInternet = if ds.isArray(communicationChannels) && std.length(communicationChannels) > 0 then selector(communicationChannels[0], "channel") else null;
local internetAccessCode = if ds.isArray(communicationChannels) && std.length(communicationChannels) > 0 then selector(communicationChannels[0], "codeWord") else null;
local internetAccessCode2 = if ds.isArray(communicationChannels) && std.length(communicationChannels) > 1 then selector(communicationChannels[1], "channel") else null;
local restrictions = selector(payload, "restrictions");
local cashManagementAccess1 = if ds.isArray(restrictions) && std.length(restrictions) > 0 then selector(restrictions[0], "name") else null;
local cashManagementAccess2 = if ds.isArray(restrictions) && std.length(restrictions) > 1 then selector(restrictions[1], "name") else null;
local internetAccessAllowed = if ds.isArray(restrictions) && std.length(restrictions) > 2 then selector(restrictions[2], "name") else null;
local IVRAccessCode = if ds.isArray(restrictions) && std.length(restrictions) > 3 then selector(restrictions[3], "name") else null;
std.prune({
  "_organizationDetails_Groups": {
    "eIN_Groups" : einFormatted,
    "dateOfOrganization_Groups" : selector(payload, "registrationDate"),
    "mailingAddress_Groups" : mailingAddress,
    "physicalAddress_Groups" : physicalAddress,
    "previousFinancialInstitution_Gro": previousFinancialInstitution,
    "referredByWhom_Groups": referredByWhom,
    "politicalAfiliation_Groups": politicalAffiliation
  },
  "groupName": selector(payload, "name"),
  "notes": selector(payload, "organizationPurpose"),
  "groupMembers": cml.exchangeProperty('groupMembers'),
  "addresses": [
    {
    "line1": addressLine1,
    "country": country,
    }
  ],
  "_taxInformation_Groups": {
    "taxType_Groups" : taxIdType,
    "tIN_Groups": tIN

  },
  "homePhone": phone1,
  "mobilePhone": phone2,
  "emailAddress": firstEmails,
  "_communicationChannel_Groups": {
    "useForEnterpriseAlertsInternet_G" : useForEnterpriseAlertsInternet,
    "internetAccessCode1_Groups" : internetAccessCode,
    "internetAccessCode2_Groups" : internetAccessCode2,
  },
  "_timeAtCurrentAddress_Groups" : {
    "unit_Groups" : timeAtCurrentAddressUnit,
    "value_Groups" : timeAtCurrentAddressValue
  },
  "_restrictions_Groups": {
    "cashManagementAccess1_Groups" : cashManagementAccess1,
    "cashManagementAccess2_Groups" : cashManagementAccess2,
    "internetAccessAllowed_Groups" : internetAccessAllowed,
    "ivrAccessCode_Groups": IVRAccessCode
  }
})
