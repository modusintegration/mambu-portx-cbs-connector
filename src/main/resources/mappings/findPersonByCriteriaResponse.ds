/** DataSonnet
version=2.0
output application/json
input payload application/json
*/

local selector(obj,key,dValue = null) = ds.or(ds.select(obj,key), dValue);

local response = if (std.length(payload) > 0) then
  [
    local address = selector(x, "addresses");
    local first = selector(x, "firstName");
    local middle = selector(x, "middleName");
    local last = selector(x, "lastName");
    local fullname = (if first!=null then first else "") +
    (if first!=null && middle!=null then " " else "") +
    (if middle!=null then middle else "") +
    (if (first!=null || middle!=null) && last!=null then " " else "") +
    if last!=null then last;
    local shortName = (if first!=null then first else "") +
    (if first!=null && last!=null then " " else "") +
    if last!=null then last;
    local documents = if selector(x, "idDocuments") != null then (ds.filter(selector(x, "idDocuments"), function(value, index) value.documentType != "SSN"));
    local SSN = if selector(x, "idDocuments") != null then (ds.filter(selector(x, "idDocuments"), function(value, index) value.documentType == "SSN")) else [];

    local idDocuments = selector(payload, "idDocuments");
    local mambuIdentifier = {
      number: selector(x, "id"),
      schemeName: "clientId",
      issuer: "Mambu"
    };
    local otherDocuments =
    if (documents != null && std.length(documents) > 0) then
    [
      {
        number: selector(idDocument, "documentId"),
        schemeName: selector(idDocument, "documentType"),
      } for idDocument in documents
    ]
    else
    [];
    local genericIdentifiers = [mambuIdentifier] + otherDocuments;
    local taxInformation = if (SSN != null && std.length(SSN) > 0) then{
      tIN: selector(SSN[0], "documentId"),
      taxIdType: selector(SSN[0], "documentType")
    };
    {
      "personId": selector(x, "encodedKey"),
      "genericIdentifiers": genericIdentifiers,
      "name": fullname,
      "shortName": shortName,
      "relatedParties": [
        {
          "partyId": selector(x, "encodedKey"),
          "partyType": "Person",
          "partyRelationType": "Owner"
        }
      ],
      "postalAddress": {
        "postCode": if ds.isArray(address) then selector(address[0], "postcode") else "",
        "townName": if ds.isArray(address) then selector(address[0], "city") else "",
        "country": if ds.isArray(address) then selector(address[0], "country") else "",
        "addressLine": [
            if ds.isArray(address) then selector(address[0], "line1"),
            if ds.isArray(address) then selector(address[0], "line2")
        ]
      },
      "status": selector(x, "state"),
      "placeAndDateOfBirth": {
        "birthDate": selector(x, "birthDate"),
      },
      "contact": {
        "mobileNumber": selector(x, "mobilePhone"),
        "emailAddress": selector(x, "emailAddress"),
      },
      "structuredName": {
        "firstName": selector(x, "firstName"),
        "middleName": selector(x, "middleName"),
        "lastName": selector(x, "lastName"),
      },
      "taxInformation": taxInformation
    } for x in payload
  ]
else
[];

std.prune(response)