/** DataSonnet
version=2.0
output application/json
input payload application/json
*/
                          
local clientName = cml.exchangeProperty('clientName');
local selector(obj,key,dValue = null) = ds.or(ds.select(obj,key), dValue);
local closeDate = selector(x, "closeDate");

if (std.length(payload) > 0) then                          
  std.prune({
    "personId": cml.header('personId'),
    "personName": clientName,
    "accounts": [
      {
        "accountId": selector(x, "encodedKey"),
        "accountNumber": selector(x, "id"),
        "accountBranchCode": selector(x, "assignedBranchKey"),
        "identifiers": [
          {
            "identification": selector(x, "id"),
            "schemeName": "IssuerIdentificationNumber",
            "issuer": "Mambu"
          }
        ],
        "accountType": selector(x, "accountType"),
        "ownershipType": "Owner",
//        "productId": selector(x, "productTypeKey"),
//        "name": selector(x, "name"),
        "currency": selector(x, "currencyCode"),
        "parties": [
          {
            "partyId": selector(x, "accountHolderKey"),
            "partyType": "Person",
            "partyAccountRole": "AccountOwner"
          }
        ],
        "status": selector(x, "accountState"),
//        "statusDateAndTime": selector(x, "lastModifiedDate"),
//        "openDate": ds.datetime.toLocalDate(selector(x, "creationDate")),
//        "closeDate": selector(x, "closeDate"),
//        "maturityDate": selector(x, "maturityDate"),
        "balances": [
          {
          "balanceName": "Available",
          "amount": x.balances.availableBalance,
          "currency": selector(x, "currencyCode"),
          "calculationDate": x.lastModifiedDate
          },
          {
            "balanceName": "Blocked",
            "amount": x.balances.blockedBalance,
            "currency": selector(x, "currencyCode"),
            "calculationDate": x.lastModifiedDate
          },
          {
            "balanceName": "Pending",
            "amount": x.balances.holdBalance,
            "currency": selector(x, "currencyCode"),
            "calculationDate": x.lastModifiedDate
          },
          {
            "balanceName": "Current",
            "amount": x.balances.totalBalance,
            "currency": selector(x, "currencyCode"),
            "calculationDate": x.lastModifiedDate
          }
        ]
      } for x in payload
    ]
  })
else
  []