/** DataSonnet
version=2.0
output application/json
input payload application/json
*/
local selector(obj,key,dValue = null) = ds.or(ds.select(obj,key), dValue);

local addresses = selector(payload, "addresses");
local line1 = if addresses != null then selector(addresses[0], "line1") else null;
local line2 = if addresses != null then selector(addresses[0], "line2") else null;
local country = if addresses != null then selector(addresses[0], "country") else null;
local city = if addresses != null then selector(addresses[0], "city") else null;
local postCode = if addresses != null then selector(addresses[0], "postCode") else null;
local region = if addresses != null then selector(addresses[0], "region") else null;
local emails = selector(payload, "emails");
local groupMembers = selector(payload, "groupMembers");
local partyId = if groupMembers != null then selector(groupMembers[0], "clientKey") else null;
local roles = if groupMembers != null then selector(groupMembers[0], "roles") else null;
local partyRelationType = if roles != null then selector(roles[0], "roleName") else null;

std.prune({
  "name": selector(payload, "groupName"),
  "postalAddresses": [
    {
      "country": country,
      "townName": city,
      "addressLine": [
        line1,
        line2
      ],
      "postCode": postCode,
      "countrySubDivision": region
    }
  ],
  "emailAddress": selector(payload, "emailAddress"),
  "relatedParties": [
    {
      "partyId": partyId,
      "partyRelationType": partyRelationType
    }
  ],
  "phones": [
    {
      "number": selector(payload, "homePhone"),
    },
    {
      "number": selector(payload, "mobilePhone"),
    }
  ],
})