/** DataSonnet
version=2.0
output application/json
input payload application/json
*/
local selector(obj,key,dValue = null) = ds.or(ds.select(obj,key), dValue);
local id = cml.exchangeProperty("id");
local encodedKey = cml.exchangeProperty("encodedKey");
local accountType = cml.exchangeProperty("accountType");
local currencyCode = cml.exchangeProperty("currencyCode");
local currentBal = cml.exchangeProperty("currentBal");
local availableBal = cml.exchangeProperty("availableBal");

local queryTransactionId = cml.exchangeProperty("queryTransactionId");
local queryAmountlte = cml.exchangeProperty("queryAmountlte");
local queryAmountgte = cml.exchangeProperty("queryAmountgte");
local queryCreationDatelte = cml.exchangeProperty("queryCreationDatelte");
local queryCreationDategte = cml.exchangeProperty("queryCreationDategte");


local filterByTransactionId(data) = std.objectHas(data, "encodedKey") &&
                          data.encodedKey == queryTransactionId;

local filterByAmountLTE(data) = std.objectHas(data, "amount") &&
                          data.amount <= ds.parseDouble(queryAmountlte);
local filterByAmountGTE(data) = std.objectHas(data, "amount") &&
                          data.amount >= ds.parseDouble(queryAmountgte);



local filterByCreationDateLTE(data) = std.objectHas(data, "creationDate") &&
                           data.creationDate <= queryCreationDatelte;

local filterByCreationDateGTE(data) = std.objectHas(data, "creationDate") &&
                          data.creationDate >= queryCreationDategte;

local filteredData1 = if queryTransactionId != null then std.filter(function(data) filterByTransactionId(data), payload) else payload;
local filteredData2 = if queryAmountlte != null then std.filter(function(data) filterByAmountLTE(data), filteredData1) else filteredData1;
local filteredData3 = if queryAmountgte != null then std.filter(function(data) filterByAmountGTE(data), filteredData2) else filteredData2;
local filteredData4 = if queryCreationDatelte != null then std.filter(function(data) filterByCreationDateLTE(data), filteredData3) else filteredData3;
local filteredData = if queryCreationDategte != null then std.filter(function(data) filterByCreationDateGTE(data), filteredData4) else filteredData4;

std.prune(
    {
        "accountId": encodedKey,
        "accountNumber": id,
        "accountType": accountType,
        "ownershipType": "SingleOwnerAccount",
        "currency": currencyCode,
        "currentBalance": currentBal,
        "availableBalance": availableBal,
        "transactions": if (std.length(filteredData) > 0) then
        [
            { 
                "transactionId": selector(txn, "encodedKey"),
                "amount": txn.amount,
                "creditDebitIndicator": if txn.amount > 0 then "Credit" else "Debit",
                "domain": "AccountManagement",
                "family": txn.type,
                "subfamily": "CreditCardPayment",
                "description": selector(txn, "notes"),
                "status": "Booked",
                "reversalIndicator": if ds.select(txn, "adjustmentTransactionKey") == null then false else true,
                "creationDate": txn.creationDate,
                "bookingDate": selector(txn, "bookingDate"),
                "valueDate": selector(txn, "dateValue"),
                "availabilityDate": selector(txn, "dateValue"),
                "charges": [
                    {
                        "name": "cardLatePayment",
                        "amount": selector(txn, "affectedAmounts.feesAmount"),
                    }
                ],
                "codes": [
                    {
                        "codeType": "DetailBAI",
                        "codeName": selector(txn, "notes"),
                        "code": selector(txn, "paymentDetails.paymentTypeInformation.serviceLevel.code")
                    }
                ],
                "interests": [
                    {
                        "name": "LatePayment",
                        "amount": selector(txn, "affectedAmounts.interestAmount"),
                    }
                ],
                "currentBalance": txn.accountBalances.totalBalance,
                "payment": selector(txn, "externalId"),
                "remittanceInformation": {
                    "remittanceNumber": selector(txn, "paymentDetails.remittanceInformation.structured.creditorReferenceInformation.reference"),
                    "documentType": selector(txn, "paymentDetails.remittanceInformation.structured.creditorReferenceInformation.referenceType")
                }
/*                "details": if ds.isObject(txn.transferDetails) then {
                    "counterpartAccount": selector(txn, "tranferDetails.linkedDepositTransactionKey")
                } else null*/
            } for txn in filteredData
        ]
        else []
    }
)
