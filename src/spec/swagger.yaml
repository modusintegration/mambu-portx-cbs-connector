openapi: 3.0.1
info:
  title: PortX Open Banking Account Management
  description: >
    PortX Bank Account Management (BAM) semantic and interaction is based on ISO
    20022 and restricted to the US banking domain. The scope covers the
    following communication flows: bank account opening, maintenance, closing
    and reporting.

    In many cases, the financial institution will require additional
    documentation that is available as PDF or Word document. The recommended
    solution is to group one BAM message (for example the account opening
    request) with these accompanying documents in one file archive. The archive
    establishes the link between the different documents.

    Every BAM request message has an attribute to support the ISO 20022 digital
    signature.
  contact:
    email: betiana.darderes@modusbox.com
  version: 0.3.0
servers:
  - url: /mambu-portx-cbs-connector/1.0
    description: SwaggerHub API
security:
  - jwt: []
  - openIdConnect: []
tags:
  - name: Accounts
    description: Bank Account Management
  - name: Parties
    description: Person and Organization Management
  - name: Transactions
    description: Account Transactions Management
  - name: Products
    description: Financial Product Management
  - name: Cards
    description: Card Management
  - name: Loans
    description: Loan Management
paths:
  /accounts:
    get:
      tags:
        - Accounts
      summary: Retrieves a list of accounts matching the parameters.
      operationId: findAccounts
      parameters:
        - name: accountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountOwnershipType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountBranchCode.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: |
            Accounts for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDescriptor'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Accounts
      summary: Opens an Account
      operationId: openBankingAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        required: true
      responses:
        '202':
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: >-
            Bad Request. The account could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/deposits:
    post:
      tags:
        - Transactions
      summary: Creates a Credit Transaction
      operationId: createDeposit
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
        required: true
      responses:
        '202':
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: >-
            Bad Request. The account could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/withdrawals:
    post:
      tags:
        - Transactions
      summary: Creates a Debit Transaction
      operationId: createWithdrawal
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalRequest'
        required: true
      responses:
        '202':
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: >-
            Bad Request. The account could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Retrieves an Account
      operationId: findAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Accounts
      summary: Updates an Account
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        '200':
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/balances:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Balances
      operationId: findAccountBalances
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/transactions:
    get:
      tags:
        - Transactions
      summary: Retrieves Account Transactions
      operationId: findAccountTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionStatus'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: creationDate.lte
          in: query
          description: Input cycle date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Input cycle date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: >
            Specifies an opaque string value ( "no  meaning" string value) at
            which start retrieving transactions. For instance,
            limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >
            Specifies the number of resources to return in one request,
            specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: true
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTransactionsResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/identifiers:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Identifiers
      operationId: findAccountIdentifiers
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountIdentifiersResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/parties:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Parties
      operationId: findAccountRelatedParties
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPartyResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/owners:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Owners
      operationId: findAccountOwners
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOwnerResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/cards:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Cards
      operationId: findAccountCards
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPaymentCardResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/standing-orders:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Standing Orders
      operationId: findStandingOrder
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStandingOrderResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Accounts
      summary: Request Standing Order Cancellation
      operationId: createStandingOrder
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandingOrderRequest'
        required: true
      responses:
        '202':
          description: Cancellation request was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandingOrder'
        '400':
          description: >-
            Bad Request. The account could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/standing-orders/{standingOrderId}/cancellation:
    post:
      tags:
        - Accounts
      summary: Request Standing Order Cancellation
      operationId: cancelStandingOrder
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: standingOrderId
          in: path
          description: Standing Order Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandingOrderCancellationRequest'
        required: true
      responses:
        '202':
          description: Cancellation request was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandingOrder'
        '400':
          description: >-
            Bad Request. The account could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons:
    get:
      tags:
        - Parties
      summary: Retrieves a list of persons matching the parameters.
      operationId: findPersons
      parameters:
        - name: name.inc
          in: query
          description: The person name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: birthDate.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: phoneNumber.eq
          in: query
          description: Any phone number equals to.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: ssn.eq
          in: query
          description: Social Security Number
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: ssn.last4
          in: query
          description: Social Security Number last four digits.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: country.eq
          in: query
          description: Any postal address with Country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: personId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: audit.lastModificationDate.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: audit.lastModificationDate.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: |
            Resources for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDescriptor'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Parties
      summary: Creates a Person
      operationId: createPerson
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequest'
        required: true
      responses:
        '202':
          description: Person information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: >-
            Bad Request. The person information could not be processed due to
            format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}:
    get:
      tags:
        - Parties
      summary: Retrieves a Person
      operationId: findPersonById
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Parties
      summary: Updates a Person
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updatePerson
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Updated person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/accounts:
    get:
      tags:
        - Parties
      summary: Retrieves Person Accounts
      operationId: findPersonAccounts
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonAccountResponse'
        '400':
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/cards:
    get:
      tags:
        - Parties
      summary: Retrieves Person Cards
      operationId: findPersonCards
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonCardResponse'
        '400':
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Parties
      summary: Creates a Card
      description: >-
        Creates a personal payment card related to one or multiple accounts. 
        The person may be not an account owner (an additional). For debit cards,
        the fund account should be provided in the request.
      operationId: createPersonalPaymentCard
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCardRequest'
        required: true
      responses:
        '202':
          description: Payment card information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '400':
          description: >-
            Bad Request. The card information could not be processed due to
            format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations:
    get:
      tags:
        - Parties
      summary: Retrieves a list of organizations matching the parameters.
      operationId: findOrganizations
      parameters:
        - name: name.inc
          in: query
          description: The organization name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountNumber.eq
          in: query
          description: The organization owns an account with the number.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: country.eq
          in: query
          description: Any postal address with country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: organizationId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: audit.lastModificationDate.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: audit.lastModificationDate.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: |
            Resources for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationDescriptor'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Parties
      summary: Creates an Organization
      operationId: createOrganization
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
        required: true
      responses:
        '202':
          description: Organization information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: >-
            Bad Request. The organization information could not be processed due
            to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{organizationId}:
    get:
      tags:
        - Parties
      summary: Retrieves an Organization
      operationId: findOrganizationById
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching organization was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: >-
            Bad Request. Organization Id could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Parties
      summary: Updates an Organization
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: Updated organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching organizations have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{organizationId}/accounts:
    get:
      tags:
        - Parties
      summary: Retrieves Organization Accounts
      operationId: findOrganizationAccounts
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching organization was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationAccountResponse'
        '400':
          description: >-
            Bad Request. Organization Id could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products:
    get:
      tags:
        - Products
      summary: Retrieves Financial Products
      operationId: findAccountFinancialProducts
      parameters:
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching product was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: No matching product have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /relationships:
    get:
      tags:
        - Relationships
      summary: Retrieves a list of relationships matching the parameters.
      operationId: findRelationships
      parameters:
        - name: customer.name.inc
          in: query
          description: The primary customer name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: customer.firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: customer.birthDate.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: customer.phoneNumber.eq
          in: query
          description: Any phone number equals to.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - name: customer.accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: customer.tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.ssn.eq
          in: query
          description: Social Security Number
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.ssn.last4
          in: query
          description: Social Security Number last four digits.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.country.eq
          in: query
          description: Any postal address with Country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.personId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: customer.audit.lastModificationDate.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: customer.audit.lastModificationDate.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: |
            Resources for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerRelationship'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Relationships
      summary: Creates a Relationship
      operationId: createRelationship
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRelationshipRequest'
        required: true
      responses:
        '202':
          description: Relationship information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRelationship'
        '400':
          description: >-
            Bad Request. The relationship information could not be processed due
            to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /relationships/{relationshipId}:
    get:
      tags:
        - Relationships
      summary: Retrieves a Relationship
      operationId: findRelationshipById
      parameters:
        - name: relationshipId
          in: path
          description: Relationship Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching relationship was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRelationship'
        '400':
          description: >-
            Bad Request. Relationship Id could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching relationships have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Relationships
      summary: Updates a Relationship
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateRelationship
      parameters:
        - name: relationshipId
          in: path
          description: Relationship Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Updated relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: >-
            Bad Request. Relationship Id could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching relationships have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards:
    get:
      tags:
        - Cards
      summary: Retrieves Cards
      operationId: findCards
      parameters:
        - name: number.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PrimaryAccountNumber'
        - name: sourceType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardFundingSourceType'
        - name: productName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardProductName'
        - name: brand.inc
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: name.inc
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: |
            Resources for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentCardDescriptor'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Retrieves a Card
      operationId: findCardById
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching card was found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentCard'
        '400':
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching card have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Cards
      summary: Updates a Card
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateCard
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/PaymentCard'
        required: true
      responses:
        '200':
          description: Updated card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '400':
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching cards have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/accounts:
    get:
      tags:
        - Cards
      summary: Retrieves Card Accounts
      operationId: findCardRelatedAccounts
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching card was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardRelatedAccountResponse'
        '400':
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/owner:
    get:
      tags:
        - Cards
      summary: Retrieves Card Holder
      operationId: findCardHolder
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching card was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/transactions:
    get:
      tags:
        - Cards
      summary: Retrieves Card Holder Transactions
      operationId: findCardAccountTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: creationDate.lte
          in: query
          description: Input cycle date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Input cycle date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: |
            Resources for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans:
    post:
      tags:
        - Loans
      summary: Opens a Loan
      operationId: openLoanAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanRequest'
        required: true
      responses:
        '202':
          description: Loan information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          description: Bad Request. The loan could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}:
    get:
      tags:
        - Loans
      summary: Retrieves a Loan
      operationId: findLoan
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching Loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Loans
      summary: Updates a Loan
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateLoan
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Loan'
        required: true
      responses:
        '200':
          description: Updated loan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/balances:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Balances
      operationId: findLoanBalances
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanBalanceResponse'
        '400':
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/transactions:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Transactions
      operationId: findLoanTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: creationDate.lte
          in: query
          description: Creation date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Creation date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: >
            Specifies an opaque string value ( "no  meaning" string value) at
            which start retrieving transactions. For instance,
            limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >
            Specifies the number of resources to return in one request,
            specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: true
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanTransactionsResponse'
        '400':
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/identifiers:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Identifiers
      operationId: findLoanIdentifiers
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanIdentifiersResponse'
        '400':
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/parties:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Parties
      operationId: findLoanRelatedParties
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanPartyResponse'
        '400':
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/owners:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Owners
      operationId: findLoanBorrowers
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOwnerResponse'
        '400':
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/cards:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Cards
      operationId: findLoanCards
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanPaymentCardResponse'
        '400':
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ledger-accounts:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves a list of accounts matching the parameters.
      operationId: findLedgerAccounts
      parameters:
        - name: accountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountBranchCode.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/LedgerAccountNumber'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: |
            Accounts for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LedgerAccountDescriptor'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Ledger Accounts
      summary: Creates a ledger account or any internal working account of the bank.
      description: >
        Creates a ledger account, detailed or general, of the Chart of Accounts.
        Also can represent holding accounts, mirror accounts or working accounts
        that are required for the booking of a part of a transaction in the bank
        world. This is typically the case when amounts cannot immediately be
        booked on a final account for duty seggregation or processing reasons or
        in order to mirror bookings on external accounts, like nostro accounts,
        mirrow or holding account.
      operationId: createLedgerAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerAccountRequest'
        required: true
      responses:
        '202':
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccount'
        '400':
          description: >-
            Bad Request. The account could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ledger-accounts/{accountId}:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves a Ledger Account
      operationId: findLedgerAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccount'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Ledger Accounts
      summary: Updates an Account
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateLedgerAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/LedgerAccount'
        required: true
      responses:
        '200':
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccount'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ledger-accounts/{accountId}/balances:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves Account Balances
      operationId: findLedgerAccountBalances
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccountBalanceResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ledger-accounts/{accountId}/transactions:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves Ledger Account Transactions
      operationId: findLedgerAccountTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionStatus'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: creationDate.lte
          in: query
          description: Input cycle date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Input cycle date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: >
            Specifies an opaque string value ( "no  meaning" string value) at
            which start retrieving transactions. For instance,
            limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >
            Specifies the number of resources to return in one request,
            specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: true
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccountTransactionsResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /internal-transfers:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves a list of internal transfers matching the parameters.
      operationId: findInternalTransfers
      parameters:
        - name: transferId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: sourceAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: sourceAccountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: destinationAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: destinationAccountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: >
            Credit Transfers for which the expression evaluates to true were
            return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InternalTransfer'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Ledger Accounts
      summary: Internal Transfer Request
      description: >-
        Instruction to transfer funds between ledger accounts, or between a
        holding account and a final account.
      operationId: requestInternalTransfer
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalTransferRequest'
        required: true
      responses:
        '202':
          description: Transfer was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalTransfer'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /internal-transfers/{transferId}:
    get:
      tags:
        - Ledger Accounts
      summary: Internal Transfer Status
      description: Returns the status of an internal transfer.
      operationId: findInternalTransfer
      parameters:
        - name: transferId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching Transfer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalTransfer'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /internal-transfers/{transferId}/cancellation:
    post:
      tags:
        - Ledger Accounts
      summary: Credit Transfer Cancellation
      description: Request a transfer cancellation.
      operationId: requestInternalTransferCancellation
      parameters:
        - name: transferId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or operation level.
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalTransferCancellationRequest'
        required: true
      responses:
        '202':
          description: Transfer was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalTransferCancellation'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Id:
      maxLength: 36
      minLength: 1
      type: string
      example: 5fb9d4d6-1a3c-11ed-861d-0242ac120002
    Date:
      type: string
      description: >-
        A particular point in the progression of time in a calendar year
        expressed in the YYYY-MM-DD format.
      format: date
      example: '2022-04-17'
    AccountNumber:
      maxLength: 30
      type: string
      description: >
        The account number or Basic Bank Account Number (BBAN). A Basic Bank
        Account Number (BBAN) is a bank account number that includes the
        domestic bank code, branch identifier, and account number. It is a
        unique identifier for a bank account within a specific country.
      example: '012345678'
    AccountDescriptor:
      required:
        - accountId
        - accountType
        - currency
        - identifiers
        - name
        - ownershipType
        - parties
        - status
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountBranchCode:
          $ref: '#/components/schemas/ServicerBranchId'
        compositeId:
          $ref: '#/components/schemas/CompositeAccountIdentifier'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        status:
          $ref: '#/components/schemas/AccountStatus'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        audit:
          $ref: '#/components/schemas/Audit'
    AccountId:
      maxLength: 36
      minLength: 1
      type: string
      description: Identification assigned by the account service institution (Servicer).
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    ServicerBranchId:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Identification of the account servicer institution at branch level or
        operation level.
      example: SEA_1
    CompositeAccountIdentifier:
      required:
        - number
      type: object
      properties:
        branch:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            Account branch
          example: '1'
        type:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            Account type.
          example: DD
        subtype:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            Account subtype
          example: HA
        number:
          maxLength: 20
          minLength: 1
          type: string
          description: |
            Account number
          example: '12345'
      description: >
        The composite account identifier provides unique account identification
        when overlaying its parts. <branch-type-subtype-number>
    AccountIdentification:
      type: object
      properties:
        identification:
          maxLength: 34
          minLength: 1
          type: string
          description: Identification assigned by an institution.
        schemeName:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Name of the identification scheme, in PascalCase. Possible ISO 20022
            compliant values names are:

            IssuerIdentificationNumber, BBANIdentifier,
            CHIPSUniversalIdentifier, UPICIdentifier, IBANIdentifier
          example: BBANIdentifier
        issuer:
          maxLength: 35
          minLength: 1
          type: string
          description: Entity that assigns the identification.
    AccountType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of the account. Some possible ISO 20022 compliant values are: 
         Checking,
         CardAccount,
         CashPayment, 
         Charges, 
         CashIncome, 
         Commission, 
         ClearingParticipantSettlementAccount,
         LimitedLiquiditySavingsAccount,
         MarginalLending, 
         MoneyMarket, 
         NonResidentExternal, 
         Overdraft, 
         OverNightDeposit, 
         Settlement, 
         Salary, 
         Savings, 
         Tax, 
         TransactingAccount,
         CashTrading,
         VirtualAccount,
         CreditCard,
         DebitCard,
         Universal, 
         Investment, 
         EpurseCard,
         CertificateOfDeposit,
         MoneyMarketChecking, 
         RetirementAccount, 
         StockOrBond,
         PrePaid, 
         FleetCard, 
         Cash, 
         DebitAccount, 
         CreditAccount, 
         Benefit,
         HealthSavingsAccount,
         FlexibleSpendingAccount,
         ForBenefitOf,
         Estate,
         ClientTrustAccount, 
         LawyersTrustAccount,
         KeoghPlanAccount,
         UniformTransfersToMinorsAct,
         UniformGiftsToMinorsAct,
         ReserveFund,
         SelfDirectedBrokerage.
      example: Checking
    AccountOwnershipType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the type of account ownership. Possible ISO 20022 compliant
        values names are:
         JointAccountWithSurvivorshipRights, JointAccountInCommon, CustodialAccount, SingleOwnerAccount, JointAccount, Corporation, Business, FormalPartnership, FormalTrust, Nominee, NonProfitOrganization, NotForProfitOrganization, ForProfit, EUResidualEntity, GovernmentOrganization, LimitedLiabilityCompany, RegisteredInvestmentCompany, Entrepreneurial, Unincorporated, LimitedPartnership, LimitedLiabilityPartnership, BareOwner, Usufructuary, Fiduciary, ServicerEmployeeAccount, BusinessTrust, FamilyTrust, Estate.
      example: SingleOwnerAccount
    AccountName:
      maxLength: 70
      minLength: 1
      type: string
      description: >-
        Name of the account. It provides an additional means of identification,
        and is designated by the account servicer in agreement with the account
        owner.
      example: Hermes PD_CA 0002
    Description:
      maxLength: 1025
      minLength: 1
      type: string
      example: This is a description.
    CurrencyCode:
      maxLength: 3
      minLength: 3
      pattern: ^([A-Z]{3})?$
      type: string
      description: >
        Three contiguous letters for the representation of currencies and funds.
        Valid currency codes are registered with the ISO 4217 Maintenance
        Agency.
      example: USD
    AccountStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the current state of an account. Possible ISO 20022 compliant
        values names are:
         Enable,        
         Disable,
         Deleted,
         Pending, 
         Form.
      example: Pending
    AccountParty:
      required:
        - partyAccountRole
        - partyId
        - partyType
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyAccountRole:
          $ref: '#/components/schemas/AccountPartyRole'
        partyName:
          $ref: '#/components/schemas/PartyName'
    PartyType:
      type: string
      description: |
        Possible values are:
         Person,
         Organization. Also other types of servicer internal entities: ServicerOfficer
      example: Person
    AccountPartyRole:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Type of the account party role. Some possible ISO 20022 compliant values
        are: AccountOwner, LiquidityManager, LimitManager, PaymentManager,
        Reader, BackupManager, SettlementManager, FundManagementCompany,
        TransferAgent, FundAccountant, Registrar, InvestmentManager, Custodian,
        Auditor, PayingAgent, CashCorrespondent, DataProvider, FinalAgent,
        Investor, FirstAgent, Intermediary, Distributor, Concentrator,
        UnderlyingClient1, UnderlyingClient2, TransmittingAgent, FundBroker,
        FinancialAdvisor, ContactPersonAtInstructingPartyInstitution,
        ContactPersonAtExecutingPartyInstitution, NameOfAgentToOrder,
        PrimeBroker, Internal, LegalGuardian, DecisionMaker, Guarantor,
        LoanLender, LoanBorrower, LoanCoBorrower, PrimaryOwner, Trustee,
        CustodianForMinor, Nominee, SecondaryOwner, Executor, Beneficiary,
        PrimaryServicerOfficer, SecondaryServicerOfficer.
      example: AccountOwner
    PartyName:
      maxLength: 350
      minLength: 1
      type: string
      description: >-
        Name by which a party is known and which is usually used to identify
        that party.
      example: Jane Birkin
    RelatedAccount:
      required:
        - accountId
        - accountRelationType
        - accountType
      type: object
      properties:
        accountRelationType:
          $ref: '#/components/schemas/AccountRelationType'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
    AccountRelationType:
      type: string
      description: |
        Account relation role. Possible values are:
           Parent,
           Child, Group.
      example: Child
    Balance:
      required:
        - amount
        - balanceName
      type: object
      properties:
        balanceName:
          $ref: '#/components/schemas/BalanceName'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        calculationDate:
          description: Specifies the date and time at which the balance is calculated.
          type: string
          format: date-time
          example: '2022-04-17T08:00:00Z'
      description: >
        Numerical representation of the net increases and decreases in an
        account at a specific point in time.
    BalanceName:
      maxLength: 17
      minLength: 1
      type: string
      description: >
        Specifies the nature of the balance. Possible ISO 20022 compliant value
        names are:
         Current, 
         Available, 
         Pending, 
         Blocked.
      example: Available
    AmountInCents:
      maxLength: 23
      pattern: ^-?([0]|([1-9][0-9]{0,12}))([.][0-9]{0,8})?$
      type: string
      description: >
        Number of monetary units where the size of the decimal part is defined
        by the currency.

        Note: 

        total number of digits: 21

        number of digits in fractional part: 8

        maxInclusive: 9999999999999.99999999

        minInclusive: -9999999999999.99999999
      example: '100'
    DateAndTime:
      type: string
      format: date-time
      example: '2022-04-17T08:00:00Z'
    Audit:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/AuditStatus'
        creationDate:
          $ref: '#/components/schemas/Date'
        lastModificacionChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        lastModificationDate:
          $ref: '#/components/schemas/Date'
      description: >
        Resource Audit Information. Captures the creation, modification and
        maintenance details.
    AuditStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Maintenance status of a resource. Possible values: Requested, Created,
        Changed, Deleted
    CommunicationChannelName:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Channel used to communicate with a party. Possible Values: Email, Fax,
        File, Online, PostalService, LiveSupport, ATM, IVR, Kiosk, Mobile,
        OnlineBanking, Phone, SMS, Card, InPerson.
      example: Email
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: >
            A broad categorization of the error. A short string indicating the
            error code reported. Safe for programmatic use.
          example: InvalidRequest
        message:
          type: string
          description: >
            A human-readable representation of the error. This may change over
            time and is not safe for programmatic use.
          example: Invalid Request
        details:
          type: array
          description: >
            An array of details about specific errors that led to this reported
            error.
          items:
            $ref: '#/components/schemas/ErrorDetail'
        innerError:
          $ref: '#/components/schemas/InnerError'
        debugMessage:
          type: object
          description: >
            Message used to debug the root cause of the error. Contents should
            not be used in consumer's business logic. Can change at any time and
            should only be used for consumer to communicate with the data
            provider about an issue.
        documentationUrl:
          type: string
          description: >
            URI reference that identifies the

            problem type.  This specification encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type.
          example: /errors/invalid-credentials
    ErrorDetail:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: >
            A short string indicating the error code reported. Safe for
            programmatic use.
          example: InvalidRequest
        message:
          type: string
          description: >
            A human-readable representation of the error. This may change over
            time and is not safe for programmatic use.
          example: Invalid Request
        target:
          type: string
          description: |
            The target of the error.
          example: Invalid Request
    InnerError:
      type: object
      properties:
        code:
          type: string
          description: >
            A short string indicating the error code reported. Safe for
            programmatic use.
        message:
          type: string
          description: |
            The description of the error code
        innerError:
          $ref: '#/components/schemas/InnerError'
      description: >
        An object containing more specific information than the current object
        about the error.
    AccountRequest:
      required:
        - accountType
        - ownershipType
        - parties
      type: object
      properties:
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        initialAmount:
          $ref: '#/components/schemas/AmountInCents'
        contract:
          $ref: '#/components/schemas/AccountContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        maturityDate:
          $ref: '#/components/schemas/Date'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        referenceAccount:
          $ref: '#/components/schemas/Id'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        servicerAlerts:
          type: array
          description: Account alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        compositeId:
          $ref: '#/components/schemas/CompositeAccountIdentifier'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    AccountIdentifiers:
      type: object
      properties:
        compositeId:
          $ref: '#/components/schemas/CompositeAccountIdentifier'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    RoutingNumber:
      type: object
      properties:
        number:
          $ref: '#/components/schemas/ABANumber'
        routingNumberType:
          $ref: '#/components/schemas/RoutingNumberType'
    ABANumber:
      maxLength: 9
      minLength: 9
      type: string
      description: >
        The routing number (sometimes referred to as an ABA routing number,
        regarding the American Bankers Association) is a sequence of nine digits
        used by banks to identify specific financial institutions within the
        United States.
      example: '012345678'
    RoutingNumberType:
      maxLength: 9
      minLength: 9
      type: string
      description: >
        Different types of payments may require different bank routing numbers.
        Some possible values: ACH, WIRE, ElectronicCheck, PaperCheck
      example: ACH
    ProductId:
      maxLength: 36
      minLength: 1
      type: string
      example: PD_CA_0002
    AccountContract:
      description: Account contractual details between the owners and the account servicer.
      type: object
      properties:
        targetClosingDate:
          $ref: '#/components/schemas/Date'
        targetGoLiveDate:
          $ref: '#/components/schemas/Date'
        masterAgreement:
          $ref: '#/components/schemas/Document'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
        fromDateTime:
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          $ref: '#/components/schemas/DateAndTime'
    Agreement:
      description: Contractual details related to an agreement between parties
      type: object
      properties:
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
        fromDateTime:
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          $ref: '#/components/schemas/DateAndTime'
    Document:
      type: object
      properties:
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
      description: >
        General information that unambiguously identifies a document, such as
        identification number and issue date time.
    Period:
      properties:
        fromDateTime:
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          $ref: '#/components/schemas/DateAndTime'
    Jurisdiction:
      $ref: '#/components/schemas/Place'
    Place:
      type: object
      properties:
        countrySubdivision:
          $ref: '#/components/schemas/CountrySubdivision'
        townName:
          $ref: '#/components/schemas/TownName'
        country:
          $ref: '#/components/schemas/CountryCode'
      description: Town, CountrySubdivision and Country .
    CountrySubdivision:
      maxLength: 35
      minLength: 1
      type: string
      description: Name of a country subdivision such as state, region, county.
      example: Oregon
    TownName:
      maxLength: 35
      minLength: 1
      type: string
      description: >-
        Name of a built-up area, with defined boundaries, and a local
        government.
      example: Tualatin
    CountryCode:
      pattern: ^([A-Z]{2,2})?$
      type: string
      description: Country name obtained from the United Nations (ISO 3166, Alpha-2 code).
      example: US
    InterestCalculation:
      description: |
        Set of parameters used to calculate an interest.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/InterestName'
        dayCountBasis:
          $ref: '#/components/schemas/InterestComputationMethod'
        rate:
          $ref: '#/components/schemas/Percentage'
        interestRateType:
          $ref: '#/components/schemas/InterestRateType'
        calculationFrequency:
          $ref: '#/components/schemas/Frequency'
        applicationFrequency:
          $ref: '#/components/schemas/Frequency'
        variableInterest:
          $ref: '#/components/schemas/VariableInterestCalculation'
        fromDateTime:
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          $ref: '#/components/schemas/DateAndTime'
    InterestName:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Name of the interest that applies to the account. For instance,
        Overdraft, LatePayment.
      example: LatePayment
    InterestComputationMethod:
      maxLength: 50
      minLength: 1
      type: string
      description: >
        Specifies the method used to compute accruing interest of a financial
        instrument. Some ISO 20022 compliant values are: 30360AmericanBasicRule,
        IC30365, IC30Actual, Actual360, Actual365Fixed, ActualActualICMA,
        IC30E360orEuroBondBasismodel1, ActualActualISDA,
        Actual365LorActuActubasisRule, ActualActualAFB,
        IC30360ICMAor30360basicrule, IC30E2360orEurobondbasismodel2,
        IC30E3360orEurobondbasismodel3, Actual365NL, Narrative,
        ActualActualUltimo, IC30EPlus360, Actual364, Business252, Actual360NL,
        OneOne.
      example: 30360AmericanBasicRule
    Percentage:
      maxLength: 23
      pattern: ^100|(([1-9][0-9]{0,1})([.][0-9]{0,8}){0,1})$
      type: string
      description: >
        Value expressed as a percentage, rate expressed as a percentage, that
        is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.
            total number of digits: 11
            number of digits in fractional part: 10
            Max Value: 100
      example: '25'
    InterestRateType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the type of interest rate. Some ISO 20022 compliant values
        are: Fixed, Forfeit, Variable, Scheduled, Unscheduled, Discount,
        FixedRateUnderlyingExposureForLife,
        FixedRateUnderlyingExposureWithCompulsoryFutureSwitchToFloating,
        FixedWithFuturePeriodicResets, FloatingLinkedToIndex,
        FloatingRateUnderlyingExposureForLife,
        FloatingRateUnderlyingExposureWithCap,
        FloatingRateUnderlyingExposureWithFloor,
        FloatingRateUnderlyingExposureWithFloorAndCap, Modular, ObligorSwapped,
        SwicthOptionality
      example: Fixed
    Frequency:
      type: object
      properties:
        cycle:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Specifies a frequency. Possible values: Annual, Monthly, Quarterly,
            SemiAnnual, Weekly, Daily, IntraDay, Overnight, TenDays,
            Fortnightly, TriggeredByMovement, Never, Rate, OnCreditEvent,
            Upfront, OnExpiry, Hourly, TriAnnual, Bimonthly, OnDemand, Shift,
            TwiceAWeek, XDays, XMonths, XYears.
          example: Monthly
        every:
          maximum: 999
          type: integer
          description: |
            Custom cycle definition. Number of XDays, XMonths, XYears.
          example: 15
        weekDay:
          maximum: 3
          type: string
          description: >
            Day of the week. Possible Values: Monday, Tuesday, Wednesday,
            Thursday, Friday.
          example: Tuesday
        weekNumber:
          maximum: 3
          type: string
          description: >
            Number to select one week day of a Month. Possible Values: 1st, 2nd,
            3th, 4th, 5th
          example: 1st
        day:
          $ref: '#/components/schemas/Day'
        startDay:
          $ref: '#/components/schemas/MonthDay'
      description: Specifies an event frequency
    Day:
      maximum: 31
      type: integer
      description: Specifies the date in a month.
      example: 30
    MonthDay:
      pattern: ([0-9]{2})-([0-9]{2})
      type: string
      description: A particular point in the year expressed in the MM-DD format.
      example: 04-17
    VariableInterestCalculation:
      type: object
      properties:
        referenceRateName:
          $ref: '#/components/schemas/BenchmarkCurve'
        term:
          $ref: '#/components/schemas/TemporalDuration'
        spreadRate:
          $ref: '#/components/schemas/Percentage'
        basisPointSpread:
          type: integer
          description: >
            Provides the number of basis points added to (if positive) or
            deducted from (if negative) the underlying reference rate to
            calculate the actual interest rate applicable for a given period at
            issuance of the floating rate instrument. Used to express
            differences in interest rates, for example, a difference of 0.10% is
            equivalen
      description: |
        Specifies the parameters to be used for variable interest.
    BenchmarkCurve:
      type: string
      description: >
        Specifies a benchmark curve name. Possible ISO 20022 compliant values
        are: WIBOR, Treasury, TIBOR, TELBOR, SWAP, STIBOR, PRIBOR, Pfandbriefe,
        NIBOR, MuniAAA, MOSPRIM, LIBOR, LIBID, JIBAR, ISDAFIX, GCFRepo,
        FutureSWAP, EuroSwiss, EURODOLLAR, Euribor, EONIASwaps, EONIA, CIBOR,
        CDOR, BUBOR, BBSW
    

    TemporalDuration:
      required:
        - unit
        - value
      type: object
      properties:
        unit:
          $ref: '#/components/schemas/TemporalUnit'
        value:
          maximum: 999
          type: integer
          description: Value of the duration in number of units.
      description: |
        Describes a temporal duration.
    TemporalUnit:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Specifies a temporal unit. Possible values are: Days, Months, Weeks,
        Years.
      example: Months
    ChargeCalculation:
      description: Calculation of a service charge or fee.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ChargeName'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        rate:
          $ref: '#/components/schemas/Percentage'
        chargeType:
          $ref: '#/components/schemas/ChargeType'
        calculationBasis:
          $ref: '#/components/schemas/CalculationBasis'
        bearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        maximumAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        relatedInterest:
          $ref: '#/components/schemas/InterestCalculation'
        chargeIndicator:
          type: boolean
          description: >
            Indicates whether the charge is automatically debited from the
            defined account.
        accountToCharge:
          $ref: '#/components/schemas/AccountId'
        periodicity:
          $ref: '#/components/schemas/Frequency'
        fromDateTime:
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          $ref: '#/components/schemas/DateAndTime'
    ChargeName:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Name of the charge calculation in PascalCase. Possible values:
        cardLatePayment, cashAdvance
      example: cardLatePayment
    PositiveAmountInCents:
      maxLength: 23
      pattern: ^([0]|([1-9][0-9]{0,12}))([.][0-9]{0,8})?$
      type: string
      description: >
        Number of monetary units where the size of the decimal part is defined
        by the currency.

        Note: 

        total number of digits: 21

        number of digits in fractional part: 8

        maxInclusive: 9999999999999.99999999

        minInclusive: 0
      example: '100'
    ChargeType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Type of service for which a charge is asked or paid. Some possible ISO
        20022 compliant values are:
            BrokerageFee, Commission, BackEndLoad, FrontEndLoad, Switch, DilutionLevy, Discount, ManagementFee, TransferFee, MatchingFees, PostageCharge, RegulatoryFee, ShippingCharge, ServiceProvisionFee, SpecialConcessions, PartAcquis, Penalty, ContingencyDeferredSalesCharge, Equalisation, CorrespondentBankCharge, Premium, Initial, AdvisoryFee, CustodyFee, PublicationFee, AccountingFee, SignatureService, StorageAtDestination, StorageAtOrigin, Packaging, PickUp, DangerousGoodsFee, SecurityCharge, InsurancePremium, CollectFreight, ClearanceAndHandlingAtOrigin, ClearanceAndHandlingAtDestination, AirWayBillFee, TransportCharges, UCITSCommission, SpeciallyAgreedFrontEndLoad, ADRFee, IssuanceCancellationFee, MiscellaneousFee, IssuanceFee.

      example: ManagementFee
    CalculationBasis:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the calculation basis of a charge or fee. Some possible ISO
        20022 compliant values are:
            Average, Daily, Monthly, Annual
      
      
      

      example: Monthly
    ChargeBearerType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies which party(ies) will pay charges due for processing of the
        instruction.

        BorneByDebtor, BorneByCreditor,  Shared, FollowingServiceLevel
      example: Shared
    Restriction:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: >
            Name of the restriction in PascalCase. Possible values:
            WireTransferIn, WireTransferOut,  ForeignIncomingWires,
            ForeignOutgoingWires, ACHTransfers, InternetBankingTransfer,
            InternetView, InternetInquiry, ForeignOutgoingIran, Withdrawals,
            Renew
          example: WireTransferIn
        restrictionPurpose:
          $ref: '#/components/schemas/Description'
        enableIndicator:
          type: boolean
          description: Indicates whether the capability is allowed or not.
          example: true
        validFrom:
          $ref: '#/components/schemas/Date'
        validUntil:
          $ref: '#/components/schemas/Date'
      description: Restriction on capabilities allowed.
    Limit:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: >
            Name of the limit in PascalCase. Possible values: Overdraft,
            CreditLimit, CreditCard, Withdraw, CreditCardWithdraw,
            ForeignFeesWaived, CreditTransactions, DebitTransactions
          example: creditLimit
        limitTypeCode:
          $ref: '#/components/schemas/LimitType'
        channelType:
          maxLength: 30
          minLength: 1
          type: string
          description: >
            Channel type for which this limit applies. Possible values:
            OnlineATM, OfflineATM, ATM, SaleTerminal
        amount:
          $ref: '#/components/schemas/AmountInCents'
        number:
          type: integer
          description: Number limit.
        percentage:
          $ref: '#/components/schemas/Percentage'
        validityPeriod:
          $ref: '#/components/schemas/Period'
        renewalFrequency:
          $ref: '#/components/schemas/Frequency'
        usedAmount:
          $ref: '#/components/schemas/AmountInCents'
        usedNumber:
          type: integer
          description: Number limit used.
        usedPercentage:
          $ref: '#/components/schemas/Percentage'
        status:
          $ref: '#/components/schemas/LimitStatus'
        periodicity:
          $ref: '#/components/schemas/Frequency'
      description: |
        Value used for risk containment.
    LimitType:
      maxLength: 35
      type: string
      description: |
        Specifies the type of risk management limit. 
               Possible ISO 20020 compliant values are: Bilateral, NetBilateral, IndirectBilateral, Global, MandatoryBilateral, DiscretionaryBilateral, DirectDebit, SingleCustomerDirectDebit, SingleFinancialInstitutionDirectDebit, TotalDailyCustomerDirectDebit, TotalDailyFinancialInstitutionDirectDebit, AutoCollateralisation, UnsecuredCredit, ExternalGuarantee
      example: DirectDebit
    LimitStatus:
      maxLength: 35
      type: string
      description: |
        Specifies the current status of a limit. 
               Possible ISO 20020 compliant values are: Enabled, Disabled, Deleted, Requested
      example: Requested
    FinancialStatement:
      description: |
        Specifies financial statement details.
      type: object
      properties:
        category:
          $ref: '#/components/schemas/StatementCategory'
        subcategory:
          $ref: '#/components/schemas/StatementSubcategory'
        profitabilityModelId:
          $ref: '#/components/schemas/StatementModelId'
        frequency:
          $ref: '#/components/schemas/Frequency'
        communicationMethod:
          $ref: '#/components/schemas/CommunicationChannelName'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        templateCode:
          $ref: '#/components/schemas/StatementTemplateId'
        lastStatementPeriod:
          $ref: '#/components/schemas/Period'
        lastStatementDate:
          $ref: '#/components/schemas/Date'
        accountNameIndicator:
          type: boolean
          description: Indicates whether the account name is printed on the statement.
    Statement:
      type: object
      properties:
        frequency:
          $ref: '#/components/schemas/Frequency'
        communicationMethod:
          $ref: '#/components/schemas/CommunicationChannelName'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        templateCode:
          $ref: '#/components/schemas/StatementTemplateId'
        lastStatementPeriod:
          $ref: '#/components/schemas/Period'
        lastStatementDate:
          $ref: '#/components/schemas/Date'
        accountNameIndicator:
          type: boolean
          description: Indicates whether the account name is printed on the statement.
      description: >
        Specifies statement details. How often statements will be sent, in which
        format.
    DocumentFormat:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies a choice of format for a document. Possible Values: PDF, HTML
      example: PDF
    StatementTemplateId:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Template used to create the statement document. This is an external code
        provided by the account servicer.
      example: '1'
    StatementCategory:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Used to categorize the statement. Possible Values: BalanceSheet,
        ProfitAndLoss
      example: BalanceSheet
    StatementSubcategory:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Used to subcategorize the statement. Possible Values: Cash,
        AccountReceivable, Inventory, CurrentAssets
      example: Cash
    StatementModelId:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Model used to calculate customer profitability. This is an external id
        provided by the account servicer.
      example: '1'
    ServicerAlert:
      type: object
      properties:
        alertName:
          $ref: '#/components/schemas/AlertName'
        message:
          $ref: '#/components/schemas/Description'
        lastAlertDate:
          $ref: '#/components/schemas/Date'
      description: |
        Customer alert to be received by the account servicer.
    AlertName:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        An alert notification received by the bank. Possible values:
        CreditBureauAlert, CustomerAlert, PaymentCard
      example: CreditBureauAlert
    SupplementaryData:
      type: object
      description: >
        Additional information that cannot be captured in the structured
        elements and/or any other specific block. If this information need to be
        converted in ISO Messages, must be ISO 20022 compliant: it requires
        development of a compliant message extension model and its components
        must be registered in the ISO 20022 Data Dictionary.
        https://www.iso20022.org/catalogue-messages/additional-content-messages/supplementary-data
    Account:
      required:
        - accountId
        - accountType
        - ownershipType
        - parties
        - status
      description: >
        Record of transactions in specific types of assets, maintained by a
        servicing party on behalf of one or more owning parties. Business
        relationship between an account servicer and one or more account owners.
      type: object
      properties:
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        initialAmount:
          $ref: '#/components/schemas/AmountInCents'
        contract:
          $ref: '#/components/schemas/AccountContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        maturityDate:
          $ref: '#/components/schemas/Date'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        referenceAccount:
          $ref: '#/components/schemas/Id'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        servicerAlerts:
          type: array
          description: Account alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        compositeId:
          $ref: '#/components/schemas/CompositeAccountIdentifier'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        status:
          $ref: '#/components/schemas/AccountStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the account servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        closeDate:
          $ref: '#/components/schemas/Date'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        transactionGroups:
          type: array
          items:
            $ref: '#/components/schemas/TransactionGroup'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        cards:
          type: array
          description: >
            Payment cards related to the account. Debit cards, for loans or
            current accounts. Credit cards, for credit card accounts.
          items:
            $ref: '#/components/schemas/RelatedCard'
        standingOrders:
          type: array
          description: >
            Instructions given by an account holder to an account servicer
            to make regular transfers on given dates to the same
            beneficiary.
          items:
            $ref: '#/components/schemas/StandingOrder'
    AccountDetailedStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/AccountStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the account servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        closeDate:
          $ref: '#/components/schemas/Date'
      description: Specifies the current state of an account.
    AccountBalance:
      type: object
      properties:
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        transactionGroups:
          type: array
          items:
            $ref: '#/components/schemas/TransactionGroup'
    TransactionGroup:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        number:
          type: integer
          description: Number of individual transactions.
        amount:
          $ref: '#/components/schemas/AmountInCents'
        temporalUnit:
          $ref: '#/components/schemas/TemporalDuration'
        domain:
          $ref: '#/components/schemas/BankTransactionDomain'
        family:
          $ref: '#/components/schemas/BankTransactionFamily'
        subFamily:
          $ref: '#/components/schemas/BankTransactionSubfamily'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
    TransactionCodes:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/BankTransactionDomain'
        family:
          $ref: '#/components/schemas/BankTransactionFamily'
        subFamily:
          $ref: '#/components/schemas/BankTransactionSubfamily'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
      description: Generic transaction code definition.
    BankTransactionDomain:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the bank transaction code domain. Some possible ISO 20022
        compliant values are: 
         Payments,
         AccountManagement.
      example: Payments
    BankTransactionFamily:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Specifies the bank transaction family. Some possible ISO 20022 compliant
        values are: 
         For Payments domain: CustomerCardTransactions, MerchantCardTransactions.
      example: CustomerCardTransactions
    BankTransactionSubfamily:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Specifies the bank transaction subfamily. Some possible ISO 20022
        compliant values are: 
         For CustomerCardTransactions family: CashDeposit, CashWithdrawal, SmartCardPayment, PointOfSalePaymentDebitCard, CreditCardPayment, CrossBorderCreditCardPayment, CrossBorderCashWithdrawal
      example: CreditCardPayment
    GenericTransactionCode:
      required:
        - code
        - codeName
        - codeType
      type: object
      properties:
        codeType:
          maxLength: 50
          minLength: 1
          type: string
          description: >
            Name of the code in PascalCase form. Possible values are: DetailBAI,
            SummaryBAI, MT940
          example: DetailBAI
        codeName:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Code value description
          example: Incoming Wire
        code:
          maxLength: 35
          minLength: 1
          type: string
          description: Code value to identify the type of transaction.
          example: '195'
      description: Generic transaction code definition.
    TransactionStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the status of an entry on the books of the account servicer.
        Some possible ISO 20022 compliant values are: 
         Booked, Future, Information, Pending.
      example: Booked
    RelatedCard:
      required:
        - cardHolderName
        - cardHolderType
        - cardId
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/Id'
        cardHolderName:
          $ref: '#/components/schemas/PartyName'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
    CardHolderType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the card holder type of payment card. Possible Values:
        Primary, Additional
      example: Primary
    StandingOrder:
      description: >
        Instruction given by an account holder to an account servicer to make
        regular transfers on given dates to the same beneficiary.
      type: object
      properties:
        standingOrderId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/StandingOrderStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        cancellationReason:
          $ref: '#/components/schemas/Description'
        period:
          $ref: '#/components/schemas/Period'
        orderSequence:
          type: integer
          description: >
            Specifies the sequence in which the system will execute the
            liquidity transfers standing order within the set.
          example: 1
        frequency:
          $ref: '#/components/schemas/Frequency'
        eventDescription:
          $ref: '#/components/schemas/Description'
        day:
          $ref: '#/components/schemas/Day'
        timeOfDay:
          $ref: '#/components/schemas/HourOfTheDay'
        paymentInstruction:
          $ref: '#/components/schemas/CreditTransferDetail'
    StandingOrderRequest:
      required:
        - orderSequence
        - paymentInstruction
      type: object
      properties:
        period:
          $ref: '#/components/schemas/Period'
        orderSequence:
          type: integer
          description: >
            Specifies the sequence in which the system will execute the
            liquidity transfers standing order within the set.
          example: 1
        frequency:
          $ref: '#/components/schemas/Frequency'
        eventDescription:
          $ref: '#/components/schemas/Description'
        day:
          $ref: '#/components/schemas/Day'
        timeOfDay:
          $ref: '#/components/schemas/HourOfTheDay'
        paymentInstruction:
          $ref: '#/components/schemas/CreditTransferDetail'
      description: >
        Instruction given by an account holder to an account servicer to make
        regular transfers on given dates to the same beneficiary.
    HourOfTheDay:
      type: object
      properties:
        hour:
          type: string
          format: time-hour
          example: '12'
        timeZone:
          $ref: '#/components/schemas/TimeZone'
    TimeZone:
      maxLength: 30
      minLength: 1
      type: string
      description: >
        A time zone is an area which observes a uniform standard time for legal,
        commercial and social purposes. Some possible values: Pacific, Mountain,
        Central, Eastern, GreenwichMean
      example: Pacific
    CreditTransferDetail:
      required:
        - paymentMethod
        - paymentType
      type: object
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        identifiers:
          $ref: '#/components/schemas/PaymentIdentifiers'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        creditor:
          $ref: '#/components/schemas/PartyIdentification'
      description: Further details on the credit transfer instruction
    PaymentMethod:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the means of payment that will be used to move the amount of
        money. Possible ISO 20022 compliant values are:  Check, CreditTransfer
      example: CreditTransfer
    PaymentType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the type of Payment. Possible values: LiquidityTransfer,
        On-Us, ACH, Wire
      example: On-Us
    PaymentIdentifiers:
      type: object
      properties:
        endToEndIdentification:
          $ref: '#/components/schemas/EndToEndIdentification'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
      description: Set of elements used to reference a payment instruction.
    EndToEndIdentification:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Unique identification assigned by the initiating party to unambiguously
        identify the transaction. This identification is passed on, unchanged,
        throughout the entire end-to-end chain.


        Usage: The end-to-end identification can be used for reconciliation or
        to link tasks relating to the transaction. It can be included in several
        messages related to the transaction.
      example: '12345678912345'
    PaymentIdentification:
      required:
        - identifierName
        - number
      type: object
      properties:
        number:
          maxLength: 35
          minLength: 1
          type: string
          description: Unique and unambiguous identification of a payment.
        identifierName:
          maxLength: 36
          minLength: 1
          type: string
          description: |
            Name of other payment identificaction. For instance,
            ISOInitiationMessageIdentifier, InstructionIdentification
              (Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain Usage: The transaction identification can be used for reconciliation, tracking or to link tasks relating to the transaction on the interbank level. The instructing agent has to make sure that the transaction identification is unique for a pre-agreed period), UETR (Universally unique identifier to provide an end-to-end reference of a payment transaction),  ExecutionIdentification, EndToEndIdentification, InstructionIdentification, TransactionIdentification, ClearingSystemReference, CreditorReference, CounterpartyReference, UniqueTradeIdentifier, ClearingBrokerIdentification, UniqueTradeIdentifier, ClearingBrokerIdentification, CommonIdentification.
          example: UETR
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: Banc of California
    PaymentProcessingDetail:
      type: object
      properties:
        instructionPriority:
          $ref: '#/components/schemas/InstructionPriority'
        serviceLevel:
          $ref: '#/components/schemas/ServiceLevel'
        clearingChannel:
          $ref: '#/components/schemas/ClearingSystem'
        localInstrument:
          $ref: '#/components/schemas/LocalInstrument'
        categoryPurpose:
          $ref: '#/components/schemas/CategoryPurpose'
      description: Provides further details of the type of payment.
    InstructionPriority:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Indicator of the urgency or order of importance that the instructing
        party would like the instructed party to apply to the processing of the
        instruction. Possible ISO Complaiant values are: High, Normal.
      example: '123456789'
    ServiceLevel:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies a pre-agreed service between the parties. Some ISO complaiant
        values from ExternalServiceLevel1Code are:

        BookTransaction, TrackedCustomerCreditTransfer, TrackedStopAndRecall,
        TrackedOutboundCorporateTransfer, TrackedFinancialInstitutionTransfe,
        NonurgentPriorityPayment, NonurgentPayment, EBAPriorityService,
        SameDayValue, DomesticChequeClearingAndSettlement, UrgentPayment,
        UrgentPaymentNetSettlement, InstantCreditTransferOrInstantDirectDebit,
        ServiceRequestToPay, ScheckVerarbeitungAustria, TrackedCaseManagement,
        TrackedInboundCustomerCreditTransfer,
        TrackedInstantCustomerCreditTransfer,
        TrackedLowValueCrossBorderCustomerCreditTransfer.
      example: BookTransaction
    ClearingSystem:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the clearing system identification. Some ISO complaiant values
        from ExternalCashClearingSystem1Code are:
         USFedACH, USFedNow, USFedwireFunds, ACH, EBAEuro1Step1, CanadaACSS, Albania, Austrian, NewZealand, Azerbaijan, BosniaHerzegovina, SwedenBGC, Ecuador, Barbados, Belgium, Bulgaria, Bahamas, Botswana, Finland, BankOfJapanNet, Italy, Philippines, CanadaCAD, SpainCAM, CentralBankOfArubaCSM, CentraleBankVanCuraçaoEnSintMaartenCSM, Ireland, Peru, USTCHChips,UnitedKingdom, China, CentralInteroperabilityService, ColumbiaCEDEC, ColumbiaCENIT, ColumbiaCUD, DenmarkDDK,Denmark, EBAEuro1, GermanyELS, Germany, ECB, USTCHEPN, EBAStep1, ForeignExchangeYenClearing, FasterPaymentsServices, Ghana, HongKongCHAT, HongKongFPS, Croatia, Greece, Hungary, SpainIberpayInstantPayments, DEandNLEquens, IndiaImmediatePaymentService, Jordan, Kenya, Luxemburg, SriLanka, Latvia, CanadaLVTS, LynxCanada, Singapore, SouthAfrica, MacaoRTGS, Malta, Mauritius, Namibia, Norway, NorwayNICSReal, AustraliaNPP, USNSS, NewZealandRTGS, Switzerland, AustraliaPDS, Egypt, FrancePNS, AustrianCSM, Angola, Venezuela, RomaniaEPO, RomaniaGSRS, RTGS, GermanyRTGSPlus, RTRCanada, RPSAndSEPAClearer, Chili, SwedenSEC, euroSIC, SIC, SICIP, Slovania, SpainES, Portugal, SwedenSSK, EBAClearingSTEP2, UnitedKingdomGBP, FranceFR, USTCHRealTime, Target, Thailand, Thailand-NITMX, Tanzania, Netherlands, TrinidadAndTobago, CanadaUSBE, Uganda, IndiaUnifiedPaymentsInterface, VocaLink, EBASTEP2XCT, Zengin, Zimbabwe, Zambia, Iceland, NorwayRTGS, NGInterswitch, P27RealTime, P27, UnitedKingdomUKD, SingaporeSCRIPS, RIXRTGSSverigesRiksbank
      example: ACH
    LocalInstrument:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        This element is used to specify a local clearing option and/or qualify
        the service or service level. CreditTransfers, ReturnedCreditTransfers,
        TruncatedCreditTransfers, TruncatedChecks, RevokedCreditTransfers,
        RevokedReturnedCreditTransfers, RevokedTruncatedChecks,
        RevokedTruncatedCreditTransfers, CardClearing, FedNowAccount,
        CorporateCreditDebit,CorporateTradeExchange, PrearrangedPaymentDeposit.
      example: CorporateCreditDebit
    CategoryPurpose:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the high level purpose of the instruction based on a set of
        pre-defined categories.
         Usage: This is used by the initiating party to provide information concerning the processing of the payment. It is likely to trigger special processing by any of the agents involved in the payment chain. Some ISO complaiant values are from ExternalCategoryPurpose1Code: 
          BonusPayment, CashManagementTransfer, CardBulkClearing, CreditCardPayment, TradeSettlementPayment, DebitCardPayment, Dividend, DeliverAgainstPayment, Epayment,FeeCollectionAndInterest, FeeCollection,PersontoPersonPayment, GovernmentPayment, Hedging, IrrevocableCreditCardPayment, IrrevocableDebitCardPayment, IntraCompanyPayment, Interest, LockboxTransactions, Loan, Commercial, Consumer, PensionPayment, Represented, ReimbursementReceivedCreditTransfer, ReceiveAgainstPayment, SalaryPayment, Securities, SocialSecurityBenefit, SupplierPayment, TaxPayment, Trade, TreasuryPayment, ValueAddedTaxPayment, WithHolding, CashManagementSweepAccount, CashManagementTopAccount, CashManagementZeroBalanceAccount
      example: SalaryPayment
    PartyIdentification:
      required:
        - account
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PartyName'
        account:
          $ref: '#/components/schemas/PaymentAccount'
        postalAddress:
          $ref: '#/components/schemas/PostalAddress'
        agent:
          $ref: '#/components/schemas/FinancialInstitution'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        contact:
          $ref: '#/components/schemas/PaymentPartyContactDetails'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PartyGenericIdentification'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
    PaymentAccount:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AccountName'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        accountType:
          $ref: '#/components/schemas/AccountType'
    PostalAddress:
      type: object
      properties:
        addressType:
          type: string
          description: >
            Specifies the type of address, in PascalCase form. Possible ISO
            Compliant values are:  Postal, POBox, Residential, Permanent,
            Temporary, Business.
          example: Postal
        addressPurpose:
          type: string
          description: >
            Specifies the purpose of an address, in PascalCase form. Possible
            ISO Compliant values are: 

            MailTo, 

            DeliveryTo,

            Billing,

            PlaceOfOperation,

            PlaceOfRegistration.
          example: Billing
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        department:
          maxLength: 70
          minLength: 1
          type: string
          description: Identification of a division of a large Organization or building.
          example: A
        subDepartment:
          maxLength: 70
          minLength: 1
          type: string
          description: >-
            Identification of a sub-division of a large Organization or
            building.
          example: B
        streetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a street or thoroughfare.
          example: First Street
        firstCrossStreetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a the first cross street.
        secondCrossStreetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a the second cross street.
          example: Second Street
        buildingNumber:
          maxLength: 16
          minLength: 1
          type: string
          description: >-
            Number that identifies the position of a building or house on a
            street.
          example: '11407'
        buildingName:
          maxLength: 35
          minLength: 1
          type: string
          description: Name of the building or house.
          example: Tall Tower
        floor:
          maxLength: 70
          minLength: 1
          type: string
          description: Floor or storey within a building.
          example: '20'
        postBox:
          maxLength: 16
          minLength: 1
          type: string
          description: >-
            Numbered box in a post office, assigned to a person or Organization,
            where letters are kept until called for.
          example: MY779
        room:
          maxLength: 70
          minLength: 1
          type: string
          description: Building room number.
          example: '22'
        postCode:
          $ref: '#/components/schemas/PostCode'
        censusTrack:
          $ref: '#/components/schemas/CensusTrack'
        cBSACode:
          $ref: '#/components/schemas/CBSACode'
        cBSAType:
          $ref: '#/components/schemas/CBSAType'
        foreignIndicator:
          type: boolean
          description: Indicates whether the postal address is from a foreing country.
        townName:
          $ref: '#/components/schemas/TownName'
        townLocationName:
          maxLength: 35
          minLength: 1
          type: string
          description: Specific location name within the town.
          example: Clackamas
        districtName:
          maxLength: 35
          minLength: 1
          type: string
          description: Identifies a subdivision within a country sub-division.
          example: Washington
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubdivision'
        countrySubDivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        country:
          $ref: '#/components/schemas/CountryCode'
        addressLine:
          type: array
          description: >-
            Information that locates and identifies a specific address, as
            defined by postal services, presented in free format text.
          items:
            maxLength: 70
            minLength: 1
            type: string
            example: 11407 Sw Amu st, Suite MY777
        period:
          $ref: '#/components/schemas/Period'
      description: >
        Information that locates and identifies a specific address, as defined
        by postal services.
    PrimaryContactIndicator:
      type: boolean
      description: |
        Indicates whether the contact informacion is primary.
    PostCode:
      maxLength: 16
      minLength: 1
      type: string
      description: >-
        Identifier consisting of a group of letters and/or numbers that is added
        to a postal address to assist the sorting of mail.
      example: 97062-68
    CensusTrack:
      maxLength: 5
      minLength: 5
      type: string
      description: >
        A census tract, census area, census district or meshblock is a
        geographic region defined for the purpose of taking a census
      example: '04013216813'
    CBSACode:
      maxLength: 5
      minLength: 5
      type: string
      description: >
        Core-based statistical area. Metropolitan statistical area (MSA) is the
        formal definition of a region that consists of a city and surrounding
        communities that are linked by social and economic factors. Micropolitan
        Statistical Areas (MISA) are CBSAs associated with at least one urban
        cluster that has a population of at least 10,000, but less than 50,000. 
        The micropolitan statistical area comprises the central county or
        counties or equivalent entities containing the core, plus adjacent
        outlying counties having a high degree of social and economic
        integration with the central county as measured through commuting.
      example: '49780'
    CBSAType:
      maxLength: 10
      minLength: 1
      type: string
      description: |
        Type of Core-based statistical area. Possible values: MSA, MISA
      example: MSA
    CountrySubdivisionCode:
      pattern: ^[A-Z]{2,2}\-[0-9A-Z]{1,3}
      type: string
      description: >
        Code to identify a name of a unit resulting from the division of a
        country, dependency, or other area of special geopolitical interest
        contained in ISO 3166-1, on the basis of country names obtained from the
        United Nations (ISO 3166-2: Country subdivision code).
      example: AR-B
    FinancialInstitution:
      type: object
      properties:
        clearingSystemMemberIdentification:
          $ref: '#/components/schemas/ClearingSystemIdentification'
        memberIdentification:
          maxLength: 35
          minLength: 1
          type: string
        name:
          maxLength: 35
          minLength: 1
          type: string
        postalAddress:
          $ref: '#/components/schemas/PostalAddress'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
    OrganizationIdentifiers:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
    OrganizationIdentification:
      required:
        - number
        - schemeName
      type: object
      properties:
        number:
          maxLength: 35
          minLength: 1
          type: string
          description: Unique and unambiguous identification of an organization.
          example: 123-45-6789
        schemeName:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Name of the identification scheme, in PascalCase form. Possible ISO
            compliant values are: 

            BankPartyIdentification

            CentralBankIdentificationNumber

            ClearingIdentificationNumber

            CertificateOfIncorporationNumber

            CountryIdentificationCode

            CustomerNumber

            DataUniversalNumberingSystem

            EmployerIdentificationNumber

            GS1GLNIdentifier

            SIREN

            SIRET

            TaxIdentificationNumber

            BusinessDomainIdentifier

            BusinessOtherIdentification

            EmployerIdentificationNumber

            BICIdentifier

            LEIIdentifier
          example: TaxIdentificationNumber
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: UnitedStates
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: Unique and unambiguous way to identify an Organization.
    ClearingSystemIdentification:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Specifies the clearing system member identification. Some ISO complaiant
        values from ExternalCashClearingSystem1Code are:
         UnitedStatesRoutingNumberFedwireNACHA, 
         AustrianBankleitzahl, AustralianBankStateBranchCodeBSB,CanadianPaymentsAssociationPaymentRoutingNumber,SwissFinancialInstitutionIdentificationShort,SwissFinancialInstitutionIdentificationLong,CNAPSIdentifier, GermanBankleitzahl, SpanishDomesticInterbankingCode, UKDomesticSortCode, HelenicBankIdentificationCode, HongKongBankCode, IrishNationalClearingCode, IndianFinancialSystemCode, ItalianDomesticIdentificationCode, JapanZenginClearingCode, NewZealandNationalClearingCode, PolishNationalClearingCode, PortugueseNationalClearingCode, RussianCentralBankIdentificationCode, SwedenBankgiroClearingCode, IBGSortCode, ThaiCentralBankIdentificationCode, FinancialInstitutionCode, CHIPSParticipantIdentifier, SouthAfricanNationalClearingCode, NewZealandRTGSClearingCode
      example: UnitedStatesRoutingNumberFedwireNACHA
    PlaceAndDateOfBirth:
      description: Date and place of birth of a person.
      type: object
      properties:
        birthDate:
          $ref: '#/components/schemas/Date'
        countrySubdivision:
          $ref: '#/components/schemas/CountrySubdivision'
        townName:
          $ref: '#/components/schemas/TownName'
        country:
          $ref: '#/components/schemas/CountryCode'
    PaymentPartyContactDetails:
      type: object
      properties:
        contactMethods:
          type: array
          items:
            $ref: '#/components/schemas/GenericContact'
        preferredMethod:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Preferred method used to reach the contact, in PascalCase form.
            Possible ISO compliant values are:  

            Letter, Email, Phone, Fax, MobileOrCellPhone.
          example: Email
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
      description: Specifies the contact details of a person.
    GenericContact:
      type: object
      properties:
        channelType:
          $ref: '#/components/schemas/CommunicationChannelName'
        identification:
          $ref: '#/components/schemas/CommunicationChannelIdentification'
      description: >-
        Communication device number or electronic address used for
        communication.
    CommunicationChannelIdentification:
      maxLength: 128
      minLength: 1
      type: string
      description: Communication value such as phone number or email address.
      example: 011-02010020202
    PreferredLanguage:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Language of the contact person. Names according to the language list
        provided in the ISO 639-1 codes. Some possible values: Chinese, Spanish,
        French, English, Japanese, Italian, German.
      example: English
    PartyGenericIdentification:
      required:
        - number
        - schemeName
      type: object
      properties:
        number:
          maxLength: 35
          minLength: 1
          type: string
          description: Unique and unambiguous identification of an organization.
          example: 123-45-6789
        schemeName:
          $ref: '#/components/schemas/PartySchemeName'
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: UnitedStates
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: Unique and unambiguous way to identify a party.
    PartySchemeName:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Name of the identification scheme, in PascalCase form. Possible values
        are: 

        BankPartyIdentification

        CentralBankIdentificationNumber

        ClearingIdentificationNumber

        CertificateOfIncorporationNumber

        CountryIdentificationCode

        CustomerNumber

        DataUniversalNumberingSystem

        EmployerIdentificationNumber

        GS1GLNIdentifier

        SIREN

        SIRET

        TaxIdentificationNumber

        BusinessDomainIdentifier

        BusinessOtherIdentification

        AlienRegistrationNumber

        PassportNumber

        CustomerIdentificationNumber

        DriversLicenseNumber

        EmployeeIdentificationNumber

        NationalIdentityNumber

        SocialSecurityNumber

        TelephoneNumber

        TaxIdentificationNumber

        PersonCommercialIdentification

        LEIIdentifier

        BICIdentifier
      example: TaxIdentificationNumber
    StandingOrderStatus:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Specifies the status of a standing order request. Possible values:
        Cancelled, Pending, Sent.
      example: Months
    DepositRequest:
      required:
        - amount
        - transactionType
      type: object
      properties:
        transactionType:
          $ref: '#/components/schemas/DepositTransactionType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        exchange:
          $ref: '#/components/schemas/Exchange'
        check:
          $ref: '#/components/schemas/Check'
      description: >
        Deposit transaction request to an account for cash, check deposits, or
        merchandise payments.
    DepositTransactionType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of Credit Transaction: Cash, Check, Merchandise
      example: Cash
    Exchange:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        exchangeFactor:
          $ref: '#/components/schemas/BaseOneRate'
    BaseOneRate:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.
               total number of digits: 11
               number of digits in fractional part: 10
               base value: 1
      example: '0.7'
    Check:
      type: object
      properties:
        checkType:
          type: string
          description: >
            Specifies the type of the check. Possible ISO compliant values are: 

            CustomerCheque, CertifiedCustomerCheque, BankCheque, Draft,
            ElectronicDraft.
        checkNumber:
          maxLength: 35
          type: string
          description: >
            The number on the face of the check indicating the id of that check
            in a series.
        availabilityDate:
          $ref: '#/components/schemas/DateAndTime'
      description: Characteristics of a check
    Transaction:
      required:
        - creationDate
        - domain
        - family
        - status
        - subfamily
        - transactionId
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        domain:
          $ref: '#/components/schemas/BankTransactionDomain'
        family:
          $ref: '#/components/schemas/BankTransactionFamily'
        subfamily:
          $ref: '#/components/schemas/BankTransactionSubfamily'
        description:
          $ref: '#/components/schemas/Description'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        creationDate:
          $ref: '#/components/schemas/DateAndTime'
        valueDate:
          $ref: '#/components/schemas/DateAndTime'
        bookingDate:
          $ref: '#/components/schemas/DateAndTime'
        charges:
          type: array
          description: All charges and taxes applied to the transaction.
          items:
            $ref: '#/components/schemas/TransactionCharge'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        interests:
          type: array
          description: All interests included in the transaction amount.
          items:
            $ref: '#/components/schemas/TransactionInterest'
        currentBalance:
          $ref: '#/components/schemas/AmountInCents'
        payment:
          $ref: '#/components/schemas/PaymentId'
        check:
          $ref: '#/components/schemas/Check'
        card:
          $ref: '#/components/schemas/PaymentCardTransaction'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
      description: >-
        Posting to an account that results in an increase or decrease to a
        balance.
    TransactionId:
      maxLength: 36
      minLength: 1
      type: string
      description: >-
        Unique reference as assigned by the account servicing institution to
        unambiguously identify the transaction.
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    CreditDebitIndicator:
      maxLength: 17
      minLength: 1
      type: string
      description: >
        Specifies if an operation is an increase or a decrease. Possible ISO
        20022 compliant values names are:

        Credit,

        Debit.
      example: Credit
    ReversalIndicator:
      type: boolean
      description: >
        Indicates whether or not the transaction is the result of a reversal.

        Usage: This element should only be present if the entry is the result of
        a reversal.

        If the CreditDebitIndicator is Credit and ReversalIndicator is Yes, the
        original operation was a debit entry.

        If the CreditDebitIndicator is Debit and ReversalIndicator is Yes, the
        original operation was a credit entry.
    TransactionCharge:
      required:
        - amount
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ChargeName'
        amount:
          $ref: '#/components/schemas/AmountInCents'
      description: |
        Provides information on a charge included in the entry amount.
    TransactionInterest:
      required:
        - amount
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/InterestName'
        amount:
          $ref: '#/components/schemas/AmountInCents'
      description: |
        Provides information on an interest included in the entry amount.
    PaymentId:
      maxLength: 36
      minLength: 1
      type: string
      description: Identification of the Payment.
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    PaymentCardTransaction:
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        merchantCategoryCode:
          $ref: '#/components/schemas/MerchantCategoryCode'
        merchantName:
          $ref: '#/components/schemas/PartyShortName'
        merchantAddress:
          $ref: '#/components/schemas/PostalAddress'
        offerId:
          $ref: '#/components/schemas/OfferId'
        offerTitle:
          $ref: '#/components/schemas/OfferTitle'
      description: >
        Information that locates and identifies a specific address, as defined
        by postal services.
    PaymentCardId:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Identification assigned by the card provider. A cardId is a unique
        identifier associated with a specific cardholder. Establishing the card
        ID is the first step. The card ID is used as the card reference. When a
        card is replaced, a new card ID must be requested for the new PAN.  

      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    MerchantCategoryCode:
      pattern: ^[0-9]{4,4}
      type: string
      description: >
        Category code conform to ISO 18245, related to the type of services or
        goods the merchant provides for the transaction.
      example: '482'
    PartyShortName:
      maxLength: 35
      minLength: 1
      type: string
      description: >-
        Short name or nickname by which a party is known and which is usually
        used to identify that party.
      example: Jane
    OfferId:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Card provider unique reference to the card payment offer.
      example: '101854'
    OfferTitle:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Short description of the offer
      example: Save 20%
    RemittanceInformation:
      required:
        - documentType
        - remittanceNumber
      type: object
      properties:
        remittanceNumber:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Unique and unambiguous identification of the remittance document
        documentType:
          maxLength: 60
          minLength: 1
          type: string
          description: >
            Specifies a type of financial or commercial document. Possible
            values are: MeteredServiceInvoice,
            CreditNoteRelatedToFinancialAdjustment,
            DebitNoteRelatedToFinancialAdjustment, CommercialInvoice,
            CreditNote, DebitNote, HireInvoice, SelfBilledInvoice,
            CommercialContract, StatementOfAccount, DispatchAdvice,
            BillOfLading, Voucher, AccountReceivableOpenItem,
            TradeServicesUtilityTransaction, PurchaseOrded
      description: >
        Information supplied to enable the matching/reconciliation of an entry
        with the items that the payment is intended to settle, such as
        commercial invoices in an accounts' receivable system.
    WithdrawalRequest:
      required:
        - amount
      type: object
      properties:
        transactionType:
          $ref: '#/components/schemas/WithdrawalTransactionType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        check:
          $ref: '#/components/schemas/Check'
      description: >
        Debit transaction request to an account for cash, check deposits, or
        merchandise payments.
    WithdrawalTransactionType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of Debit Transaction: Cash
      example: Cash
    AccountBalanceResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - balances
        - ownershipType
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    AccountTransactionsResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - ownershipType
        - transactions
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        currentBalance:
          $ref: '#/components/schemas/AmountInCents'
        availableBalance:
          $ref: '#/components/schemas/AmountInCents'
        transactions:
          type: array
          description: Account Transactions
          items:
            $ref: '#/components/schemas/Transaction'
    AccountIdentifiersResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - identifiers
        - ownershipType
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        compositeId:
          $ref: '#/components/schemas/CompositeAccountIdentifier'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    AccountPartyResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - ownershipType
        - parties
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
    AccountOwnerResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - owners
        - ownershipType
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
    AccountPaymentCardResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - cards
        - ownershipType
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
    PaymentCardDescriptor:
      required:
        - cardHolderId
        - cardHolderType
        - cardId
        - expiryDate
        - number
        - productId
        - relatedAccounts
        - startDate
        - status
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        cardHolderId:
          $ref: '#/components/schemas/Id'
        productId:
          $ref: '#/components/schemas/Id'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        nameOnCard:
          $ref: '#/components/schemas/PartyName'
        relatedAccounts:
          type: array
          description: >
            Account that provides the payment card transactions. The account is
            the funding source for the card. Could be a cash or loan account
            linked to the debit card or a credit card account. A card can have
            one or many accounts.
          items:
            $ref: '#/components/schemas/CardRelatedAccount'
        expiryDate:
          $ref: '#/components/schemas/YearMonth'
        status:
          $ref: '#/components/schemas/CardStatus'
    PrimaryAccountNumber:
      maxLength: 19
      minLength: 1
      type: string
      description: |
        Primary Account Number (PAN) of the card.
      example: '1234567890123456789'
    CardRelatedAccount:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
    YearMonth:
      maxLength: 7
      pattern: ^\d{4}-([0]\d|1[0-2])$
      type: string
      description: >
        Month within a particular calendar year represented by YYYY-MM (ISO
        8601).
      example: 2022-12
    CardStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Specifies the status of payment card. Some possible values are:

        AssignPIN, Active, Blocked, Closed, Expedite, Expired, HotCarded,
        Renewed, Inactive, Issued, Lost, Restricted, Stolen, Suspended.
      example: Active
    AccountStandingOrderResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - ownershipType
        - standingOrders
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        standingOrders:
          type: array
          items:
            $ref: '#/components/schemas/StandingOrder'
    StandingOrderCancellationRequest:
      type: object
      properties:
        cancellationReason:
          $ref: '#/components/schemas/Description'
      description: |
        Request the cancellation of an existing standing order.
    PhoneNumber:
      pattern: ^\+[0-9]{1,3}-[0-9()+\-]{1,30}$
      type: string
      description: >-
        The collection of information which identifies a specific phone or FAX
        number as defined by telecom services.
      example: +1-415-731359
    PersonDescriptor:
      required:
        - identifiers
        - name
        - personId
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        gender:
          $ref: '#/components/schemas/Gender'
        audit:
          $ref: '#/components/schemas/Audit'
    PersonIdentification:
      required:
        - number
        - schemeName
      type: object
      properties:
        number:
          maxLength: 35
          minLength: 1
          type: string
          description: Unique and unambiguous identification of a person.
          example: 123-45-6789
        schemeName:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Name of the identification scheme in PascalCase form. Possible
            values are: 

            AlienRegistrationNumber, PassportNumber, 
            CustomerIdentificationNumber, DriversLicenseNumber,
            EmployeeIdentificationNumber, NationalIdentityNumber,
            SocialSecurityNumber, TelephoneNumber,  TaxIdentificationNumber,
            PersonCommercialIdentification, StateIdentificationNumber,
            MilitaryIdCard, BirthMarriageCertificateNumber,
            MarriageCertificateNumber, BirthCertificateNumber,
            CountryTerritoriIdCard, DriverLicenseNumber, 
            WageTaxStatementFormNumber, GovernmentDocumentNumber,
            HealthInsuranceCard, CertificateOfIncorporationNumber,
            CertificateOfOrganizationNumber, CertificateOfPartnershipNumber,
            ForwardHealthMedicaIdCard, MexicanConsularIdCard,
            DLNTaxExemptNumber, PhotoIdCard, PermantResidentCard, TribalIdCard,
            UtilityBillInvoiceNumber, VoterUniqueIdentifier,
            WisconsinCRISSearch, PropertyTaxBillNumber, MedicareCardId,
            OrganizationalDocumentNumber, CertificationOfTrustNumber,
            EstateDomiciliaryLetterNumber, TaxReturnFormNumber, MinorIdCard,
            EmploymentAuthorizationCard, StateDocumentNumber,
            TravelDocumentNumber, StateIssuedPermitNumber
          example: SocialSecurityNumber
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: Baltimore
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
        foreingIDIndicator:
          type: boolean
          description: Indicates whether the identifications is from a foreing country.
    Gender:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Specifies the gender of the person. Possible Values: Female, Male,
        NonBinary
      example: Female
    PersonRequest:
      type: object
      properties:
        uSDocumentedIndicator:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        comment:
          $ref: '#/components/schemas/Description'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: >
            The relationship lead is often the primary account owner or the
            party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Specifies the type of residence where the party has its permanent
            home or principal establishment.  Possible ISO Complaian values are:

            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: |
            Access and operation restrictions at Party level.
          items:
            $ref: '#/components/schemas/Restriction'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        signature:
          $ref: '#/components/schemas/DigitalSignature'
        signatureVerificationId:
          $ref: '#/components/schemas/SignatureVerificationId'
        contact:
          $ref: '#/components/schemas/PersonContactDetails'
        headOfHousehold:
          type: boolean
          description: >-
            Indicates whether the person pay the costs of supporting a
            house.
          example: true
        civilStatus:
          $ref: '#/components/schemas/CivilStatus'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        gender:
          $ref: '#/components/schemas/Gender'
        race:
          $ref: '#/components/schemas/Race'
        profession:
          $ref: '#/components/schemas/Profession'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        residentialStatus:
          $ref: '#/components/schemas/ResidentialStatus'
        minorIndicator:
          $ref: '#/components/schemas/MinorIndicator'
        citizenships:
          type: array
          items:
            $ref: '#/components/schemas/Citizenship'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
        profile:
          $ref: '#/components/schemas/PersonProfile'
    PersonIdentifiers:
      type: object
      properties:
        uSDocumentedIndicator:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
    Party:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        comment:
          $ref: '#/components/schemas/Description'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: >
            The relationship lead is often the primary account owner or the
            party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Specifies the type of residence where the party has its permanent
            home or principal establishment.  Possible ISO Complaian values are:

            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: |
            Access and operation restrictions at Party level.
          items:
            $ref: '#/components/schemas/Restriction'
    NameTemplateId:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Template used to display the party name. This is an external id provided
        by the account servicer.
      example: '1'
    SoundExId:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Identification of a SoundEx method develop for search attribute. SoundEx
        is a method used to find strings when the sound is known but the precise
        spelling is not. It searches out words with similar sounds based on
        phonetic assumptions about how certain letters are pronounced. It can be
        used to search names in a database, for example, where spellings and
        pronunciations for similar names may vary.
      example: '1'
    RelatedParty:
      required:
        - partyId
        - partyRelationType
        - partyType
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          $ref: '#/components/schemas/PartyName'
        partyRelationType:
          $ref: '#/components/schemas/PartyRelationType'
        partyRelationDescription:
          $ref: '#/components/schemas/Description'
        ownershipPercentage:
          $ref: '#/components/schemas/Percentage'
    PartyRelationType:
      maxLength: 40
      minLength: 1
      type: string
      description: >
        Type of relation between parties.  Possible values Between Organizations
        and persons are: ResponsibleParty, OrganizationOwner, ControlPerson,
        BeneficialOwner, PrimaryContact, SecondaryContact. For Trusts: Trustor,
        Trustee.  Between organizations: ParentOrganization, Branch. Between
        parties and external entities: CustomerServiceOfficer,
        PrimaryServicerOfficer,  SecondaryServicerOfficer, SalesPerson,
        ReferralOfficer. Between financial institutions:
        AffiliateFinancialInstitution, HoldingCompany. Between persons: Spouse.
      example: PrimaryServicerOfficer
    TaxPartyInformation:
      required:
        - tINStatus
      type: object
      properties:
        tIN:
          type: string
          description: |
            A Taxpayer Identification Number
          example: 778-62-8144
        taxIdType:
          maxLength: 50
          minLength: 1
          type: string
          description: >
            Identifies what type of tax ID is in the TIN field. Possible Values:
            SocialSecurityNumber,  EmployerIdentificationNumber,
            IndividualTaxpayerIdentificationNumber,
            AdoptionTaxpayerIdentificationNumber,
            PreparerTaxpayerIdentificationNumber, ForeignTaxID
          example: SocialSecurityNumber
        financialReportingIndicator:
          type: boolean
          description: >-
            Whether the financial income for this party should be reported to
            the U.S. government (IRS) when related to an account in a way which
            requires reporting (for example, primary, joint ownership). Defaults
            to true if not specified.
        tINStatus:
          type: string
          description: >
            'The tax ID has been verified by the IRS as valid. Possible values:
            Valid, NotValid, NotVerified, IRSWarning, TINApplied.
          example: Valid
        taxStatus:
          type: string
          description: >
            Exempt, Retain, ExemptExpired, VoluntaryWithholding, Chapter3,
            Chapter4, C-Corp, S-Corp.
          example: Valid
        verificationAttemps:
          maximum: 10
          type: integer
          description: >
            The Tax Identification Verification Attempts is the number of times
            attempts have been made to verify the tax ID number.
          example: 1
        forms:
          type: array
          description: Forms applied by the party
          items:
            $ref: '#/components/schemas/TaxForm'
        regulations:
          type: array
          items:
            $ref: '#/components/schemas/TaxRegulation'
        withholdings:
          type: array
          items:
            $ref: '#/components/schemas/WithholdingTax'
        foreignIndicator:
          type: boolean
          description: >
            Indicates whether the party is a non-residen alien or a foreign
            entity.
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubdivision'
        countrySubDivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        country:
          $ref: '#/components/schemas/CountryCode'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
      description: >
        Taxation parameters which apply to an individual person or to an
        organization.
    TaxForm:
      required:
        - formName
      type: object
      properties:
        formName:
          maxLength: 10
          minLength: 1
          type: string
          description: >
            Form name requested. Possible Values: W-8BEN, W-8BEN-E, W-8ECI,
            W-8EXP, W-8IMY, W-9, W-8, 1042-S.
          example: W-8
        taxRate:
          $ref: '#/components/schemas/PositiveAmountInCents'
        codes:
          type: array
          description: Codes provided by the IRS on the form.
          items:
            $ref: '#/components/schemas/TaxFormCode'
        recipientGIIN:
          $ref: '#/components/schemas/GIIN'
        recipientPostCode:
          $ref: '#/components/schemas/PostCode'
        recipientTownName:
          $ref: '#/components/schemas/TownName'
        certificationDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: |
        Information of the form requested by the tax payer.
    TaxFormCode:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TaxFormName'
        code:
          maximum: 3
          type: string
          description: Indicates the code number provided by the IRS on the form.
      description: Indicates a code provided by the IRS on the form.
    TaxFormName:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Indicates a code name provided by the IRS on the form. Possible Values:

        Chapter3, Chapter4, Income, Exempt, Province, CountryResidence,
        CountryTax
    GIIN:
      maxLength: 34
      minLength: 1
      pattern: ^([A-N,P-Z,0-9]){6}\.([A-N,P-Z,0-9]){5}\.(LE|SL|ME|BR|SP)\.[0-9]{3}$
      type: string
      description: |
        Global intermediary identification number (GIIN).
      example: ADN123.FG4FE3.LE.999
    TaxRegulation:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 35
          minLength: 1
          type: string
          example: Chapter4
        section:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            String that represent the section number.
          example: '1471'
      description: >
        Tax regulations that are deemed to comply by the tax payer. Possible
        values: Chapter3, Chapter4
    WithholdingTax:
      required:
        - withholdingTaxType
      type: object
      properties:
        withholdingTaxType:
          $ref: '#/components/schemas/WithholdingTaxType'
        withholdingRate:
          $ref: '#/components/schemas/Percentage'
        withholdingAmount:
          $ref: '#/components/schemas/AmountInCents'
      description: >
        Withholding is a tax that is levied on income, at an established tax
        rate
    WithholdingTaxType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Type of Withholding. Possible Values:

        ForeignAccountTaxComplianceAct, NonResidentAlienTax, BackUpWithholding,
        VoluntaryWithholding, Federal, State, Local, W-4.
      example: NonResidentAlienTax
    PowerOfAttorney:
      description: |
        Document that transfers specific rights from a party to a person.
      type: object
      properties:
        authorizedPerson:
          $ref: '#/components/schemas/Id'
        authorizedAccount:
          $ref: '#/components/schemas/AccountId'
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
        fromDateTime:
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          $ref: '#/components/schemas/DateAndTime'
    DigitalSignature:
      maxLength: 13654
      minLength: 1
      type: string
      description: |
        Binary data of 10K maximum, base64 encoded.
      format: byte
      example: binary U21GdVpTQkNhWEpyYVc0PQ==
    SignatureVerificationId:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        This field contains the key of the CISA validation record.
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    PersonContactDetails:
      type: object
      properties:
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        name:
          $ref: '#/components/schemas/PartyName'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        department:
          maxLength: 35
          minLength: 1
          type: string
          description: Identification of a division of a large Organization or building.
          example: Sales
        communicationChannels:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationChannel'
        preferredMethod:
          $ref: '#/components/schemas/CommunicationChannelName'
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
      description: Specifies the contact details of a person.
    StructuredName:
      required:
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person given first name.
          example: Mary
        middleName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person given middle name.
          example: Joe
        lastName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person surname.
          example: Smith
        suffix:
          maxLength: 20
          minLength: 1
          type: string
          description: >
            A name suffix in the Western English-Language naming tradition,
            follows a person's full name and provides additional information
            about the person. Possible Values:  PhD, Snr, Jnr.
          example: PhD
        prefix:
          maxLength: 20
          minLength: 1
          type: string
          description: |
            Name prefixes are typically Dr., Mr., Mrs., Ms.
          example: Dr.
      description: >
        The structured name is used to initialize the person name with the
        format <firstName middleName lastName>
    Phone:
      required:
        - number
      type: object
      properties:
        number:
          $ref: '#/components/schemas/PhoneNumber'
        extension:
          maxLength: 5
          type: string
          description: Phone Number Extension.
        phoneType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Type of phone address. Possible values are:  
            Mobile, Landline, Fax, Pager, Modem
        phonePurpose:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Purpose of the phone address. Possible values are:   Business,
            Personal, International.
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        preferredHourOfDay:
          $ref: '#/components/schemas/HourOfTheDay'
        comment:
          $ref: '#/components/schemas/Description'
        period:
          $ref: '#/components/schemas/Period'
      description: Collection of information that identifies a phone address.
    Email:
      type: object
      properties:
        emailAddress:
          maxLength: 2048
          minLength: 1
          type: string
          description: Address for electronic mail (e-mail).
        emailPurpose:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Purpose of the e-mail address. Possible values:   Marketing,
            Statements, Business, Administrative
          example: Statements
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
      description: Collection of information that identifies an electronic mail address.
    JobTitle:
      maxLength: 35
      minLength: 1
      type: string
      description: Title of the function in an organization.
      example: Head of Documentation
    CommunicationChannel:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannelName'
        channelIdentification:
          $ref: '#/components/schemas/CommunicationChannelIdentification'
        channelPurpose:
          $ref: '#/components/schemas/CommunicationChannelPurpose'
        codeWord:
          type: string
          description: >
            A party is asked for a codeword to verify their identity trought a
            communication channel
        alertIndicator:
          description: |
            Indicates whether the channel is used for enterprise alerts
        lastContactDate:
          $ref: '#/components/schemas/Date'
        firstContactDate:
          $ref: '#/components/schemas/Date'
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
      description: |
        Channel used to communicate with a party
    CommunicationChannelPurpose:
      maxLength: 40
      minLength: 1
      type: string
      description: >
        Communication purpose of the channel. Possible values: Alerts,
        PrivacyNotices
      example: Alert
    CivilStatus:
      maxLength: 17
      minLength: 1
      type: string
      description: >
        Specifies the civil status of a person. Possible ISO 20022 compliant
        values names are:

        Single,

        Married,

        LegallyDivorced,

        Divorced,

        Widowed,

        StableUnion
      example: Single
    Race:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Categorization of humans based on shared physical qualities.
        Possible Values:  NativeAmerican, African, Hispanic, White, Asian

      example: Director
    Profession:
      maxLength: 35
      type: string
      description: |
        Professional Designation or name of the occupation of a person.
      example: Artist
    ResidentialStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Residential status of an individual. Possible values: Permanent,
        Resident, NonResident, Rents, Owns
      example: Permanent
    MinorIndicator:
      type: boolean
      description: |
        Indicates whether the person is a legal minor.
    Citizenship:
      type: object
      properties:
        country:
          $ref: '#/components/schemas/CountryCode'
        fromDateTime:
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          $ref: '#/components/schemas/DateAndTime'
    PersonProfile:
      description: Information to support Know Your Customer (KYC) processes.
      type: object
      properties:
        customerIdentificationProgram:
          $ref: '#/components/schemas/CustomerIdentificationProgram'
        customerConductClassification:
          $ref: '#/components/schemas/CustomerConductClassification'
        familyMedicalInsuranceIndicator:
          type: boolean
          description: >-
            Indicates if the person has family medical insurance coverage
            available.
          example: true
        salaryRange:
          $ref: '#/components/schemas/AmountRange'
        residenceValue:
          $ref: '#/components/schemas/PositiveAmountInCents'
        residenceMortage:
          $ref: '#/components/schemas/PartyName'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        employmentStatus:
          $ref: '#/components/schemas/EmploymentStatus'
        vIPStatus:
          $ref: '#/components/schemas/VIPStatus'
        employments:
          type: array
          items:
            $ref: '#/components/schemas/Employment'
        servicerMember:
          $ref: '#/components/schemas/ServicerMember'
        anualIncome:
          $ref: '#/components/schemas/PositiveAmountInCents'
        yearsOfEducation:
          type: integer
        politicallyExposedPerson:
          type: boolean
          description: >-
            Indicates if the person is a politically exposed person (PEP).
            Is one who has been entrusted with a prominent public function.
            A PEP generally presents a higher risk for potential involvement
            in bribery and corruption.
          example: true
        privacyNoticedIndicator:
          type: boolean
          description: >-
            Indicates whether the person allow distributing  personal
            information to third parties.
          example: true
        identityTheftServiceIndicator:
          type: boolean
          description: >-
            Indicates whether the person has subscribed to an Identity Theft
            service.
          example: true
        identityQuestions:
          type: array
          items:
            $ref: '#/components/schemas/IdentityQuestion'
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        bSARiskCode:
          $ref: '#/components/schemas/BSARiskCode'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: >
            Code used for reporting to the credit bureaus. This code is used to
            report the trade line of a credit account to the credit bureau
            agencies.
        oFACReportingIndicator:
          type: boolean
          description: |
            Indicates whether the party is to be excluded from OFAC Reporting.
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        dateAtCurrentAddress:
          $ref: '#/components/schemas/Date'
        sourceOfWealth:
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: >
            Indicates the political affiliation of the Party. Possible values
            could be: Democrat, Independent, Republican.
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
        servicerAlerts:
          type: array
          description: Customer alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
    PartyProfile:
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        bSARiskCode:
          $ref: '#/components/schemas/BSARiskCode'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: >
            Code used for reporting to the credit bureaus. This code is used to
            report the trade line of a credit account to the credit bureau
            agencies.
        oFACReportingIndicator:
          type: boolean
          description: |
            Indicates whether the party is to be excluded from OFAC Reporting.
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        dateAtCurrentAddress:
          $ref: '#/components/schemas/Date'
        sourceOfWealth:
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: >
            Indicates the political affiliation of the Party. Possible values
            could be: Democrat, Independent, Republican.
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
        servicerAlerts:
          type: array
          description: Customer alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
    RiskLevel:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the customer’s money laundering risk. Possible values: High,
        Medium, Low, None.
      example: Permanent
    BSARiskCode:
      maximum: 10
      type: integer
      description: >
        Used to identify customers that present a risk to the bank as defined by
        the Bank Secrecy Act. For example, use this code to identify and monitor
        accounts suspected of fraud, kiting or money laundering.
      example: 0
    CreditReview:
      type: object
      properties:
        frequency:
          $ref: '#/components/schemas/Frequency'
        lastReviewDate:
          $ref: '#/components/schemas/DateAndTime'
        nextReviewDate:
          $ref: '#/components/schemas/DateAndTime'
        creditQuality:
          $ref: '#/components/schemas/CreditQuality'
        creditScore:
          type: integer
      description: >
        A credit review is a periodic assessment of an individual’s or
        businesses' credit profile.
    CreditQuality:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Credit quality rating of an issuer or financial obligation. Possible
        Values: DefaultImminent, ExtremelySpeculative, HighGrade,
        HighlySpeculative, InDefault, LowerMediumGrade,
        NonInvestmentGradeSpeculative, Prime, SubstantialRisk, UpperMediumGrade
      example: UpperMediumGrade
    MoneyLaunderingCheck:
      type: string
      description: >
        Specifies the status of money laundering identification procedures.
        Possible Values: PassedNotChecked, ExemptBelowLimit,
        ClientMoneyTypeExempt, AuthorizedCredit, PostalOrElectronicPaymentExempt
      example: AuthorizedCredit
    KnowYourCustomerCheckType:
      maxLength: 36
      minLength: 1
      type: string
      description: >
        Specifies the type of Know Your Customer (KYC) or anti-money laundering
        due diligence to which the investor has been subjected. Possible Values:
        Ordinary, Simple, Enhanced.
      example: Ordinary
    LostCustomerReason:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Used for regulatory purposes by the bank to track how long closed
        account history has been maintained for a customer. Possible values
        are: 
         Competition, Deceased, Dissatisfied, Moved, MergedEntity, CeasedOperation
      example: Deceased
    CustomerIdentificationProgram:
      type: object
      properties:
        certificateDocument:
          type: array
          description: Documents used to certify the customer identity
          items:
            $ref: '#/components/schemas/CertificateDocumentName'
        certificationStatus:
          $ref: '#/components/schemas/CertificationStatus'
        certificationDate:
          $ref: '#/components/schemas/DateAndTime'
        certificationFrequency:
          $ref: '#/components/schemas/Frequency'
      description: >
        CIP requires that financial firms must obtain four pieces of identifying
        information about a client.
    CertificateDocumentName:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Specifies the type of certificate. Possible values: AntiMoneyLaundering,
        DrivingLicense, DueFormationAndOrganisation, GoodStanding, IdentityCard,
        Incumbency, LetterOfReference, Passport, ProofOfAddress,
        PublicKeyInfrastructureCertificate
      example: IdentityCard
    CertificationStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Customer Identification Program (CIP) status. Designates the type of
        verification used for Customer Identification. This status could be
        obtained from a specific software the bank is using. Possible Values:
        NotCertified, CertifiedLevel1, CertifiedLevel2, CertifiedLevel3,
        FraudCheckOnly, Level1Check, Level2FraudCheck.
      example: CertifiedLevel1
    CustomerConductClassification:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Assessment of the customer’s behaviour at the time of the account
        opening application. Possible Values: Standard, NonStandard, Reluctant.
    AmountRange:
      type: object
      properties:
        minAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        maxAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
      description: |
        Range an amount
    EmploymentStatus:
      type: string
      description: >
        Represents available individual employment status. Possible Values:
        Contract, Employed, Homemaker, Retired, SelfEmployed, Student,
        Temporary, Unemployed.
    VIPStatus:
      type: string
      description: >
        Very Important People Program Status. Possible Values: Novice, Pro,
        Elite
      example: Elite
    Employment:
      type: object
      properties:
        employingPartyName:
          $ref: '#/components/schemas/PartyName'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        employeeTerminationIndicator:
          type: boolean
          example: false
        lengthOfEmployment:
          $ref: '#/components/schemas/TemporalDuration'
        endDate:
          $ref: '#/components/schemas/Date'
        place:
          $ref: '#/components/schemas/Place'
    ServicerMember:
      type: object
      properties:
        insider:
          $ref: '#/components/schemas/InsiderType'
        familyRelationship:
          $ref: '#/components/schemas/PartyRelationType'
        institutionRelationship:
          $ref: '#/components/schemas/PartyRelationType'
      description: >
        The servicer member information is used to provide info to Regulation
        0.  The Regulation 0 is a Federal Reserve regulation that places limits
        and stipulations on the credit extensions a member bank can offer to its
        executive officers, principal shareholders, and directors.
    InsiderType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Director, Employee, Officer, PrincipalShareholder, Shareholder,
        Executive.
      example: Director
    IdentityQuestion:
      type: object
      properties:
        question:
          $ref: '#/components/schemas/Description'
        answer:
          $ref: '#/components/schemas/Description'
      description: >-
        Additional ways to verify the identity of the customer. This is
        especially helpful when a customer does not have proper identification
        with them at the time or when there is a need to request additional
        identification from a customer.
    Person:
      required:
        - personId
      description: |
        Human entity, as distinguished from a corporate entity.
      type: object
      properties:
        uSDocumentedIndicator:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        comment:
          $ref: '#/components/schemas/Description'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: >
            The relationship lead is often the primary account owner or the
            party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Specifies the type of residence where the party has its permanent
            home or principal establishment.  Possible ISO Complaian values are:

            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: |
            Access and operation restrictions at Party level.
          items:
            $ref: '#/components/schemas/Restriction'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        signature:
          $ref: '#/components/schemas/DigitalSignature'
        signatureVerificationId:
          $ref: '#/components/schemas/SignatureVerificationId'
        contact:
          $ref: '#/components/schemas/PersonContactDetails'
        headOfHousehold:
          type: boolean
          description: >-
            Indicates whether the person pay the costs of supporting a
            house.
          example: true
        civilStatus:
          $ref: '#/components/schemas/CivilStatus'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        gender:
          $ref: '#/components/schemas/Gender'
        race:
          $ref: '#/components/schemas/Race'
        profession:
          $ref: '#/components/schemas/Profession'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        residentialStatus:
          $ref: '#/components/schemas/ResidentialStatus'
        minorIndicator:
          $ref: '#/components/schemas/MinorIndicator'
        citizenships:
          type: array
          items:
            $ref: '#/components/schemas/Citizenship'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
        profile:
          $ref: '#/components/schemas/PersonProfile'
        personId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/InstructionStatus'
    InstructionStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Details about the processing of a request on party reference data
        (create or update). Possible ISO compliant values are: Rejected,
        Completed, Queued.
      example: Queued
    PersonAccountResponse:
      required:
        - accounts
        - personId
        - personName
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountDescriptor'
    PersonCardResponse:
      required:
        - cards
        - personId
        - personName
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
    PaymentCardRequest:
      required:
        - cardHolderType
        - productId
        - relatedAccounts
      type: object
      properties:
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productId:
          $ref: '#/components/schemas/Id'
        styleId:
          $ref: '#/components/schemas/Id'
        businessIndicator:
          type: boolean
          description: Indicates whether the payment card is business or not.
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        cardBranchId:
          $ref: '#/components/schemas/Id'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        nameOnCard:
          $ref: '#/components/schemas/PartyName'
        referenceAccountId:
          $ref: '#/components/schemas/AccountId'
        relatedAccounts:
          type: array
          description: >
            Account that provides the payment card transactions. The account is
            the funding source for the card. Could be a cash or loan account
            linked to the debit card or a credit card account. A card can have
            one or many accounts.
          items:
            $ref: '#/components/schemas/CardRelatedAccount'
        startDate:
          $ref: '#/components/schemas/YearMonth'
        expiryDate:
          $ref: '#/components/schemas/YearMonth'
        orderedDate:
          $ref: '#/components/schemas/Date'
        securityCode:
          maxLength: 35
          type: string
          description: >
            Security code written on the card, sometimes called card security
            code (CSC).
          example: '103'
        pIN:
          maxLength: 35
          type: string
          description: >
            PIN is the 4 digit security code that is used to authenticate the
            user and allow them access to the associated accounts of the card.
          example: '1031'
        pINRetries:
          maximum: 99
          type: number
          description: |
            Pin Retries Allowed
          example: 3
        sequenceNumber:
          maxLength: 20
          type: string
          description: >
            Identifies a card inside a set of cards with the same number (or
            PAN).
          example: '1'
        brand:
          maxLength: 35
          type: string
          description: |
            Brand name of the card.
          example: Visa
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        algorithms:
          type: array
          items:
            $ref: '#/components/schemas/Algorithm'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    CardFundingSourceType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Specifies the funding source type of payment card. Possible Values:
        Credit, Debit, Prepaid, Charge, DeferredDebit
      example: Credit
    DigitalCardIndicator:
      type: boolean
      description: |
        Indicates whether the payment card is digital or physical.
    Algorithm:
      type: object
      properties:
        name:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Name to describe the algorithm provided. Possible Values: ICSF
        target:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Attribute name of the algorithm. Possible Values: pIN
        enableIndicator:
          type: boolean
          description: Indicates whether the offset has been calculated.
        offset:
          maxLength: 60
          minLength: 1
          type: string
          description: >
            An attribute offset is a value that is the difference between two
            attributes. For example, a PIN offset may be the difference between
            a PIN that is chosen by the customer and one that is assigned by an
            institution.
      description: >
        Algorithm calculus parameters to verify and protect personal
        identification, numbers or PINs of the card holder or the account
        holder.
    PaymentCard:
      required:
        - cardHolderId
        - expiryDate
        - number
        - startDate
        - cardHolderType
        - productId
        - relatedAccounts
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        cardHolderId:
          $ref: '#/components/schemas/Id'
        statement:
          $ref: '#/components/schemas/CreditCardStatement'
        offers:
          type: array
          description: |
            Card provider offers assigned to the PAN.
          items:
            $ref: '#/components/schemas/CardProviderOffer'
        status:
          $ref: '#/components/schemas/CardStatus'
        statusDate:
          $ref: '#/components/schemas/DateAndTime'
        statusReason:
          $ref: '#/components/schemas/Description'
        history:
          $ref: '#/components/schemas/PaymentCardHistory'
        servicerAlerts:
          type: array
          description: Customer alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productId:
          $ref: '#/components/schemas/Id'
        styleId:
          $ref: '#/components/schemas/Id'
        businessIndicator:
          type: boolean
          description: Indicates whether the payment card is business or not.
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        cardBranchId:
          $ref: '#/components/schemas/Id'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        nameOnCard:
          $ref: '#/components/schemas/PartyName'
        referenceAccountId:
          $ref: '#/components/schemas/AccountId'
        relatedAccounts:
          type: array
          description: >
            Account that provides the payment card transactions. The account is
            the funding source for the card. Could be a cash or loan account
            linked to the debit card or a credit card account. A card can have
            one or many accounts.
          items:
            $ref: '#/components/schemas/CardRelatedAccount'
        startDate:
          $ref: '#/components/schemas/YearMonth'
        expiryDate:
          $ref: '#/components/schemas/YearMonth'
        orderedDate:
          $ref: '#/components/schemas/Date'
        securityCode:
          maxLength: 35
          type: string
          description: >
            Security code written on the card, sometimes called card security
            code (CSC).
          example: '103'
        pIN:
          maxLength: 35
          type: string
          description: >
            PIN is the 4 digit security code that is used to authenticate the
            user and allow them access to the associated accounts of the card.
          example: '1031'
        pINRetries:
          maximum: 99
          type: number
          description: |
            Pin Retries Allowed
          example: 3
        sequenceNumber:
          maxLength: 20
          type: string
          description: >
            Identifies a card inside a set of cards with the same number (or
            PAN).
          example: '1'
        brand:
          maxLength: 35
          type: string
          description: |
            Brand name of the card.
          example: Visa
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        algorithms:
          type: array
          items:
            $ref: '#/components/schemas/Algorithm'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    CreditCardStatement:
      description: Credit Card statement details.
      type: object
      properties:
        statementBalance:
          $ref: '#/components/schemas/AmountInCents'
        paymentClosingDate:
          $ref: '#/components/schemas/Date'
        paymentDueDate:
          $ref: '#/components/schemas/Date'
        minimumPayment:
          $ref: '#/components/schemas/AmountInCents'
        lastPaymentDate:
          $ref: '#/components/schemas/Date'
        lastPaymentAmount:
          $ref: '#/components/schemas/AmountInCents'
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
        frequency:
          $ref: '#/components/schemas/Frequency'
        communicationMethod:
          $ref: '#/components/schemas/CommunicationChannelName'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        templateCode:
          $ref: '#/components/schemas/StatementTemplateId'
        lastStatementPeriod:
          $ref: '#/components/schemas/Period'
        lastStatementDate:
          $ref: '#/components/schemas/Date'
        accountNameIndicator:
          type: boolean
          description: Indicates whether the account name is printed on the statement.
    CardProviderOffer:
      required:
        - offerId
        - offerTitle
      type: object
      properties:
        offerId:
          $ref: '#/components/schemas/OfferId'
        offerTitle:
          $ref: '#/components/schemas/OfferTitle'
      description: Card Payment Offer.
    PaymentCardHistory:
      type: object
      properties:
        lastCardId:
          $ref: '#/components/schemas/PaymentCardId'
        lastActivityDate:
          $ref: '#/components/schemas/Date'
        lastForeingTransferMonth:
          $ref: '#/components/schemas/Month'
        totals:
          type: array
          description: Total amounts
          items:
            $ref: '#/components/schemas/TotalAmount'
    Month:
      maximum: 12
      type: string
      description: Specifies a month number.
      example: '12'
    TotalAmount:
      type: object
      properties:
        totalName:
          $ref: '#/components/schemas/TransactionStatus'
        period:
          $ref: '#/components/schemas/Period'
        amount:
          $ref: '#/components/schemas/AmountInCents'
      description: Total amount of transactions labeled by a name.
    OrganizationDescriptor:
      required:
        - identifiers
        - name
        - organizationId
        - organizationType
      type: object
      properties:
        organizationId:
          $ref: '#/components/schemas/Id'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        legalName:
          $ref: '#/components/schemas/PartyShortName'
        tradingName:
          $ref: '#/components/schemas/PartyShortName'
        audit:
          $ref: '#/components/schemas/Audit'
    OrganizationType:
      type: string
      description: >
        Specifies the legal standing of the organization. Possible values are:
        Government, FinancialInstitution SoleProprietorship,
        UnincorporatedAssociation, LimitedLiabilityPartnership,
        LimitedLiabilityCompany, LimitedPartnership, FormalPartnership,
        GeneralPartnership, Business, Corporation, NotForProfit, ForProfit,
        NonProfit, Club, Supranational, Sovereign, Municipal, Province, State,
        County, National, ExemptionTrust, LivingTrust, EmployeeTrust,
        RevocableTrust, IrrovocableTrust, NakedTrust, FamilyTrust,
        BussinesTrust, CliffordTrust, FormalTrust.
      example: Corporation
    OrganizationRequest:
      required:
        - organizationType
        - relatedParties
      type: object
      properties:
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        organizationPurpose:
          $ref: '#/components/schemas/Description'
        legalName:
          $ref: '#/components/schemas/PartyShortName'
        tradingName:
          $ref: '#/components/schemas/PartyShortName'
        registrationDate:
          $ref: '#/components/schemas/Date'
        establishmentDate:
          $ref: '#/components/schemas/Date'
        merchantCategory:
          $ref: '#/components/schemas/MerchantCategoryCode'
        nAICSCode:
          $ref: '#/components/schemas/NAICSCode'
        sector:
          $ref: '#/components/schemas/OrganizationSector'
        organizationProfile:
          $ref: '#/components/schemas/OrganizationProfile'
        contact:
          $ref: '#/components/schemas/PartyContactDetails'
        webPage:
          $ref: '#/components/schemas/URL'
        logo:
          $ref: '#/components/schemas/ComercialLogo'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        comment:
          $ref: '#/components/schemas/Description'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: >
            The relationship lead is often the primary account owner or the
            party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Specifies the type of residence where the party has its permanent
            home or principal establishment.  Possible ISO Complaian values are:

            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: |
            Access and operation restrictions at Party level.
          items:
            $ref: '#/components/schemas/Restriction'
    NAICSCode:
      pattern: ^[0-9]{2,2}
      type: string
      description: >
        The North American Industry Classification System (NAICS) is the
        standard used by Federal statistical agencies in classifying business
        establishments for the purpose of collecting, analyzing, and publishing
        statistical data related to the U.S. business economy.
      example: '54'
    OrganizationSector:
      type: string
      description: >
        A sector is an area of the economy in which businesses share the same or
        related business activity, product, or service. Energy, Materials,
        Industrials, ConsumerDiscretionary, ConsumerStaples, HealthCare,
        Financials, InformationTechnology, TelecommunicationServices, Utilities,
        RealEstate.
    OrganizationProfile:
      description: Information to support Know Your Customer (KYC) processes.
      type: object
      properties:
        legalEntityReportingIndicator:
          type: boolean
          description: >-
            Indicates whether the party is required to be reported as a
            legal entity.
        numberOfEmployees:
          type: integer
          description: Number of employees of the corporation.
          example: 100
        anualSales:
          $ref: '#/components/schemas/AmountInCents'
        services:
          $ref: '#/components/schemas/Description'
        goods:
          $ref: '#/components/schemas/Description'
        serviceOrGoodsLocations:
          type: array
          description: Places where the goods and services are sold.
          items:
            $ref: '#/components/schemas/Place'
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        bSARiskCode:
          $ref: '#/components/schemas/BSARiskCode'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: >
            Code used for reporting to the credit bureaus. This code is used to
            report the trade line of a credit account to the credit bureau
            agencies.
        oFACReportingIndicator:
          type: boolean
          description: |
            Indicates whether the party is to be excluded from OFAC Reporting.
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        dateAtCurrentAddress:
          $ref: '#/components/schemas/Date'
        sourceOfWealth:
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: >
            Indicates the political affiliation of the Party. Possible values
            could be: Democrat, Independent, Republican.
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
        servicerAlerts:
          type: array
          description: Customer alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
    PartyContactDetails:
      type: object
      properties:
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        communicationChannels:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationChannel'
      description: Specifies the contact details of a party.
    URL:
      pattern: >-
        ^[(http(s)?):\/\/(www\.)?a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)
      type: string
      description: The address of a web page.
      example: http://portx.io
    ComercialLogo:
      maxLength: 32768
      minLength: 1
      type: string
      description: |
        Commercial logo of the organization. Max length of 32K, base64 encoded.
      format: byte
      example: binary >-
        aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQVo0QUFBQm9DQU1BQUFEMkhtYU5BQUFBQkdkQlRVRUFBTEdQQy94aEJRQUFBQUZ6VWtkQ0FLN09IT2tBQUFEOFVFeFVSUUFBQUZEUDMxQy8zd0FRTUFBUUlBQVpLVkRINXdBWUtGREY2bERGNUFBVktnQVZKVkRINTFESDQwekQ1d0FZTEFBWUtGREc1VXpHNVFNV0xRQVdMUUFXS1FBWUsxREg1MURINUUzRjUwM0Y1QU1ZS2dBWUtsREk2QUlYTEZESTVsREc1azNHNWdJWkt3SVpLUUlYS3dBWEsxREo1d0lZTEFJWUtsREg1VTdGNTA3RjVRSVlMQUlZS2s3STZFN0c2QUlaS3dJWEswN0c1Z0laTEFJWktnSVhLay9INlUvSDV3SVlLd0lZS2s3RzV3SVlLd0lZS1UvSTZFL0c2QUVaTEFFWEtnRVhLay9INXdFWUswL0k1ay9HNWdJWkt3RVpLd0VYSzAvSDV3SVlLd0VZSzAvSTZFL0c2QUlaS3dJWExBSVhLd0VYTEUvSDV3SVlLNm9VSE1rQUFBQlNkRkpPVXdBUUVCQVFIeUFnTURBd01FQkFRRUJBVUZCUVVGQmZZR0JnWUdCZ2IyOXdjSEJ3Y0hCd2YzOS9nSUNBZ0lDUGo0K1BrSkNRa0orZm41K2dvS0N2cjYrdnNMKy96OC9QejgvZjM5L3Y3Ky92NysvTTFjV3RBQUFJMTBsRVFWUjQydTJkZjMvVE5oREdCUWsyVFFzMmpBSlpQRHBHRjhwb3VwSXV4UU5HSWFaTEdwUCt5dnQvTC9zQVhTUEZPdWxPUHFYOWdPN1B1blljUGRMcHErZGtSM1RQdFhGMFF6QkVOTlZlZlBwVWhNQ0Z2Z0hQejE5eVhQd0l1UGd3dERzeStrQUxmbzdxWDdzTlhQdjhjV2gzWk55Y2V1dmhONkRCODA5b2RuUnNRRjM4YnQwcmQ2RXJSNkhWOFRFRUd2R29MaGRBNnZSRG14TmlEV3JHbW55MUQ4a2VCZzhQSGRTQzYvdUJDenpUd1o4K29QcFRhUEJyUUFlL0JDNWdpME4ydUk2Z3dmTTZ0RFlmSGZ3Y3VPQTZ4SnR6WHVzdENseXdGRHB3dE40T1BhMmxmdFI0d1dxOXRRTVhNQWVydVJ5NFlHbDA0QURYM2NBRjdQR2ViUmtadU1CRFJGTXU2MjAvY01FeTZZQUkxNkRadGhMYXVBNWNIL0ZZYjRFTGxrd0hwRzdmRGx6Z0tZWU1jQTJhYlgrRTl2VkZCL2NERjF4bk9zQmJieUJVM3crdDY0OE8wTmJiTUhEQkZkQUIxbm9MWnR2VjBBRnlhOW8xNG9KbW5HWlp0cDdHM3hVZDFMTGV1anhja0ZhRDFzak56YnljL1I4bnhhdlVma3BjL2N4Vjg0ZXVwc2hvTEhRYktaclZUbVU0YUtDRFlSMXRpV2JiVEJlakR4MmtSbWxST1htUzI4N3Q2VDgwWDI5Q1p4UXpaS2lkbzFGS2g0NFhiMnRYT2hoVDZBQmh2ZTB6Y1FINFJYT0VRSjJKMDdrOTZETlBvQk1kNVJHSmZLeFlHTVBTb1o3MlV4ODVXMjkzdUxqQThGVnRBclVNamJibEpBOTRvcXM4WWs4KytFdzVKSFd0RVpFT3JOWWJHeGVZdnV2RXFNK1RtZXU1Sm5sbW81aFRIakdHMHR2eitkL1BvSHU5N1dpOXRkbjhBdWMyemkwTk5VbmQ1TkYrcUxzODhhayt2Y21wN1Rmd1R2dE9kQUNhYlk5NTVabE5HaEN2SVJyc29aczh1bFRqTG8vNFhaL2VwTlNXRzd5RHFRdGM3L005ekdQNXV0Q3RIMkRhNnFHYlBKcUp1b1k4eXExZXBqY3BNNWVtRkw3aFlMMUZqSDZCdy9kVkU3Y2hqbHR1OGh3M09PVlI2UG9pdmNVbjh6OWxUdDZCd1hwN3orZ1h6Ryt6YzNIbnlWdjUrdzYwUUsyMnlkbmd3WmNlMkd4bEJTbzM5cVI1NWxzazJZRngrQXdLSmFRR0g2dEhkQjBpcWFhM0hKWGEzS3kzTnVjMjA0bzhYeFFxVFQxWmlGaFo3cHpKM1M5V3RKM3QydVNaL3pFN0JWY29wdUYzQy9FZDl4YlRXd2VaMmt4MDhKb0sxVTZiYzNUeWlKWTVYU2pROW5aaHFTODNNNUFidGZLSUI5SnBEVlo1R21NMXZjbmRLN0ZXRm9oMDBHVjltRWNyai9nTFdzc3RNcWxtR28vTG1XVWM2T1dSSjVpVVZSNlZycC9KM1d0Z1AzbURCTmNSYngxQkw0K1VydjgyRGg2ZEc5STZ0UXdmUUo1Ti9iMHd5S1BROWZHV2xOcnFWQmFlVXFEYThTRmZmWk0wNW4vK2FCbzhwYlV4Qm5oNWZ2SW5ENFIrS09OM2pXQzlyVEJ2emdHYXhKQ2VaR3hyV1J0RGh4YUFQSWxIZVJTNnRqaWhsWGlEaDJ0V0xuQWFQWVdkc0JKemRyTW50M1Z1ZVZTNnBxUTJFeDFFL3N3MjdOeXptSjBrNWVCV25CaXpHeURQQjI5b1VQR3VDYW1OUWdlZzJSYnh5cFBENUNaM1EvQ3FFdm1Oc2ZLazNzQWFTRzg5ZkNzZDR1QjZoMzF6amxZZXVWYXd1bkRDSm1iMUtNM3l4MGg1V2hOdnkxSU5VQ0krQkVNSHFoTVE4Vy9hMWNuenhKU2ZlNWhGUTJ3Y0NWVjVtdW1XM0hLWkQzbFU3OXB1RjZCOHRKZVlmNnJ4TUk5a1BtWGY0dFdKc2FYZW1WYXNPcWYxRnRrU3RVN1pidktvZEoyUm1nbmExQ3ZETlRzWDJCM3Jha3U5UStIdnFXbWF0OG1UZVpJbmhpdmIxbmhobjFhT1BPdzdKTGVVZjNseTRVbWVYVVNwQkF6SXJMbjhoenMrWHRaSExZelJrOXNxVVo2eTZVbWVGRmtKSmptZDg5RUQ3cnU2NjBzZTNkei9Eb01HRGZlNVo0U1lzcDNraVJkM2ZlMHl6RDB5bEsxNWVQR1VxYVcwV3lSUVlHMWVISm5rR1RTRkozbHkvR1lJdk5QNUs0YmNudnFRcDlBYmFoMnpuMFpibGxiSzJBbnFwbDNrNldnK0RjM1dPQ2dEOFM3aWx1ZXNTQkQ0a3lKTW5ZK2swWlA2a2lmV2JXaEZyMHlSVUxiQi9yNWRTWkh5SXNZSGc2U0pnaktNSlpvWlhZT3ZPdzJrOVh6aFN4Nzl0andrWFhleFpzMlFtdzdRSnI0dWNVR2RmV3oySFN1dXdUYnhMdWp5U0ViSTJjeGVFY0ZWUUt0bXpScm5OaEEzZVJKcmRwRFQvQmhUam11Y0l1YXpPdkxJRzZmaUF5cGRFOHlhUHZPTC91bnlpTklDcDNKYmFCMkFxdWUyVGZPUnlmTDhLMSsvY1VxajZ6Wmh2WG1UbVE0YzVNbk1UeFFvazNBcFVQTEl3OGZEdXVlNWVrUHluaUJiNVk5YXhIbkU2eDA0eUtNTW40bytyWW5WUHRNVUZMWkpPRVdVSjE2Y0NnOG9kTDFEMi9RNVpIMWMza1dlQkg0VW9ibUY4SjQxOHNqRnNwUmJuc2xpNm15VWVMcU9pRDUweEVvSEx2SXNib0F2T3FzWFZSdTFHQUdWaTNYbE9DbGpUcGpsZVY3dExnbWVyc21iTzE1d3ZxbmNTWjVxWWZoa1ZJeEs3RTRZYmJXMEpLeEdTUExFdXU2eWg2WHJOcmsrRFZxaks4dVNwMUlZMXNkYlFaQW5tZUhobWlKUFU3c3RSZWxnQnJxR3VHQnFJTEUxUmpwd2t3ZWx6MGhRNUpGcm1idU04dXpxU3hVSnpydmVkM2tZWk1obmpUcktJMXFsZGV3MGFmSWtlT3VOSUkrOFJGWnN4RDBNWGE4NDFhY3hsVy9QOHFnNzNXazdNTzFiNEFzdWVXTHdJVVh6T3c4c1hHQ1pSdmpvd0ZrZTBkZ3psVHdUUVpZblFTOFc4ZkxrOE5hY3hPNWRkMTMzclIxeVdhUHU4aGdHME5sMlU5RGxrWWVQMlF0RHk5TXhyWkQzYkhTTktaSFM2T0RUTXVVUklpdm80c0R5dExCYk9MSHl4TWJucjlYbFFRdlBCWWg5YTMwbU9zZ3ZJeFV1RVEvR3FqWUhtYlVjdlg3NW1Rdkl0SmxEUjZBTDVNWlIxcG4vbis0Vkp5M3BjTjVETDNrdys5WnU4aGRPWFNOKzBNdS9QbmViRDdLVytINmkxcjQxL3NKcENCUVhJSjkvSDNyWVZoV0N6ZHE4elYwNERTRkg3ZjNzM0lYVEVMV3NVS3cxK2ptODY3VithbVBZejM3UDJ5K2svL0N4VTQ4THpIUVEzalB1aXd0b1Y1a0dPbGpxa29mWTcxa0xweUg0dU1BaWMvaDVKUTljUUgrRWR5M1FBWC9zMTEzeXpPTU4vek1sUDNxc3NIREJ4ZUtIcjNBYXdqeGhPQzBuTndJZDhFYVg5NVZmd1JybDVZSXBGeGVZNmVCVGFPb3I1b0p2MFE5MDRIL0o0MTVHdTBhRjA4QUZtcmdYQ3FlK3VhRFdUNG9GT3VEaUFpOC9OUnFzVWFidzhNb3ZZYkJHUStHVWhRdnEvdFJvS0p5eXBEYUhwMFhxTFg2Q05VcUlIY3lMYzNpelppaWNYakVYbU9rZ1dLUG9PUFQ1SzhvYmdRNXF4dFRyVDVBZmh0bW5YdHg3cllzK1UvcUordHJMQjNaRHhuL3p5bzRzSmdnWjVBQUFBQUJKUlU1RXJrSmdnZz09
    Organization:
      required:
        - organizationType
        - relatedParties
      type: object
      properties:
        organizationId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/InstructionStatus'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        organizationPurpose:
          $ref: '#/components/schemas/Description'
        legalName:
          $ref: '#/components/schemas/PartyShortName'
        tradingName:
          $ref: '#/components/schemas/PartyShortName'
        registrationDate:
          $ref: '#/components/schemas/Date'
        establishmentDate:
          $ref: '#/components/schemas/Date'
        merchantCategory:
          $ref: '#/components/schemas/MerchantCategoryCode'
        nAICSCode:
          $ref: '#/components/schemas/NAICSCode'
        sector:
          $ref: '#/components/schemas/OrganizationSector'
        organizationProfile:
          $ref: '#/components/schemas/OrganizationProfile'
        contact:
          $ref: '#/components/schemas/PartyContactDetails'
        webPage:
          $ref: '#/components/schemas/URL'
        logo:
          $ref: '#/components/schemas/ComercialLogo'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        comment:
          $ref: '#/components/schemas/Description'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: >
            The relationship lead is often the primary account owner or the
            party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Specifies the type of residence where the party has its permanent
            home or principal establishment.  Possible ISO Complaian values are:

            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: |
            Access and operation restrictions at Party level.
          items:
            $ref: '#/components/schemas/Restriction'
    OrganizationAccountResponse:
      type: object
      properties:
        organizationId:
          $ref: '#/components/schemas/Id'
        organizationName:
          $ref: '#/components/schemas/PartyName'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    Product:
      required:
        - name
        - productId
        - productType
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/Id'
        name:
          maxLength: 35
          minLength: 1
          type: string
          description: Comercial product name within a product type.
          example: Visa Business Card
        description:
          $ref: '#/components/schemas/Description'
        productType:
          maxLength: 35
          minLength: 1
          type: string
          description: >
            Type or nature of a product. Possible Values: Loan, PaymentCard,
            CheckingAccount
          example: PaymentCard
        productSubType:
          maxLength: 35
          minLength: 1
          type: string
          description: Comercial product subtype within a product type.
          example: BusinessCard
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    CustomerRelationship:
      description: >
        A grouping of related accounts tied to one or more parties that have an
        account relationship with the financial institution. Some financial
        institutions may call this a membership, parent account or other term.
      type: object
      properties:
        relationshipId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/CustomerRelationshipStatus'
        parties:
          $ref: '#/components/schemas/CustomerRelationshipParty'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountDescriptor'
        loans:
          type: array
          items:
            $ref: '#/components/schemas/AccountDescriptor'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCard'
        audit:
          $ref: '#/components/schemas/Audit'
    CustomerRelationshipRequest:
      type: object
      properties:
        parties:
          $ref: '#/components/schemas/CustomerRelationshipParty'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountDescriptor'
        loans:
          type: array
          items:
            $ref: '#/components/schemas/AccountDescriptor'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCard'
        audit:
          $ref: '#/components/schemas/Audit'
      description: >
        A grouping of related accounts tied to one or more parties that have an
        account relationship with the financial institution. Some financial
        institutions may call this a membership, parent account or other term.
    CustomerRelationshipParty:
      required:
        - partyId
        - partyRelationType
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyName:
          $ref: '#/components/schemas/PartyName'
        partyRelationType:
          $ref: '#/components/schemas/PersonRelationType'
        partyRelationDescription:
          $ref: '#/components/schemas/Description'
      description: |
        Person tied to the relationship.
    PersonRelationType:
      maxLength: 40
      minLength: 1
      type: string
      description: >
        Role of a person in a customer bank relationship.  Possible values:
        PrimaryCustomer, SecondaryOwner, Beneficiary, CustomerServiceOfficer,
        PrimaryServicerOfficer,  SecondaryServicerOfficer, SalesPerson,
        ReferralOfficer.
      example: PrimaryCustomer
    CustomerRelationshipStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Specifies the status al a customer relationship. Some possible values
        are:  Active, Closed, Inactive, Prospect, Restricted
      example: Active
    CardProductName:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the product name of payment card.
      example: Visa Classic
    CardRelatedAccountResponse:
      required:
        - accounts
        - cardId
        - number
        - productName
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/Id'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productName:
          $ref: '#/components/schemas/CardProductName'
        productId:
          $ref: '#/components/schemas/Id'
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        accounts:
          type: array
          description: Card Related Accounts
          items:
            $ref: '#/components/schemas/CardRelatedAccount'
    LoanRequest:
      required:
        - loanType
        - ownershipType
        - parties
      description: >
        Request of an amount of money in exchange for future repayment of the
        principal amount along with interest or other finance charges.
      type: object
      properties:
        loanBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        loanType:
          $ref: '#/components/schemas/LoanType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        contract:
          $ref: '#/components/schemas/LoanContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        compositeId:
          $ref: '#/components/schemas/CompositeAccountIdentifier'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    LoanType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of the account. Some possible BIAN compliant values are: 
         Personal,
         Consumer,  
         Corporate, 
         Lease, 
         Syndicated, 
         Mortgage,
         Conforming,
         Merchandising,
         LineOfCredit,
         RevolvingCredit,
         LoanAgainstSecurities.
      example: Personal
    LoanContract:
      description: >-
        Contract by which an amount of money in exchange for future repayment of
        the principal amount along with interest or other finance charges.
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        borrower:
          $ref: '#/components/schemas/Id'
        lender:
          $ref: '#/components/schemas/Id'
        maturityDate:
          $ref: '#/components/schemas/Date'
        masterAgreement:
          $ref: '#/components/schemas/Document'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        tranches:
          type: array
          description: |
            Provides details on the tranches defined for the loan contract.
          items:
            $ref: '#/components/schemas/LoanContractTranche'
        term:
          $ref: '#/components/schemas/TemporalDuration'
        paymentSchedule:
          type: array
          description: >
            Schedule of the principal payments and interests defined for the
            loan contract.
          items:
            $ref: '#/components/schemas/RepaymentSchedule'
        collaterals:
          type: array
          items:
            $ref: '#/components/schemas/Collateral'
        syndicate:
          type: array
          description: |
            Loan offered by a group of lenders (called a syndicate).
          items:
            $ref: '#/components/schemas/SyndicatedLoanLender'
        intraCompanyLoanIndicator:
          type: boolean
          description: Indicates whether the loan is an intra-company loan.
          example: false
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
        fromDateTime:
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          $ref: '#/components/schemas/DateAndTime'
    LoanContractTranche:
      type: object
      properties:
        sequenceNumber:
          maxLength: 20
          type: string
          description: |
            Unique sequence number of the tranche.
          example: '1'
        expectedDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        duration:
          $ref: '#/components/schemas/TemporalDuration'
      description: |
        Provides details of a tranche defined for the loan contract.
    RepaymentSchedule:
      type: object
      properties:
        repaymentScheduleId:
          $ref: '#/components/schemas/Id'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        expectedDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        repaymentType:
          $ref: '#/components/schemas/LoanPaymentType'
        paymentInstruction:
          $ref: '#/components/schemas/CreditTransferDetail'
      description: >
        An amount that must be paid no sooner than the expected payment date and
        no later than the due date.
    LoanPaymentType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Possible values are: 
         Interest,
         Principal.
      example: Principal
    Collateral:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        collateralType:
          $ref: '#/components/schemas/CollateralType'
        contract:
          $ref: '#/components/schemas/Agreement'
      description: >
        Assets pledged by a debtor to secure a loan or an exposure and subject
        to seizure in the event of default.
    CollateralType:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Specifies the type of collateral. Some possible values are: 
        LetterOfCredit, Cash, Securities, PhysicalEntities, Insurance,
        StockCertificate, Bond, BankGuarantee, Commodity, Automobile,
        IndustrialVehicle, CommercialTruck, RailVehicle,
        NauticalCommercialVehicle, NauticalLeisureVehicle, Aeroplane,
        MachineTool, IndustrialEquipment, OfficeEquipment, ITEquipment,
        MedicalEquipment, EnergyRelatedEquipment, CommercialBuilding,
        ResidentialBuilding. IndustrialBuilding, OtherVehicle, OtherEquipment,
        OtherRealEstate, OtherGoodsOrInventory, Guarantee, OtherFinancialAsset,
        MixedCategories.
    SyndicatedLoanLender:
      required:
        - lenderId
        - lenderType
      type: object
      properties:
        lenderId:
          $ref: '#/components/schemas/Id'
        lenderType:
          $ref: '#/components/schemas/PartyType'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        share:
          $ref: '#/components/schemas/Percentage'
      description: >
        Loan offered by a group of lenders (called a syndicate) who work
        together to lend an amount of money to a single borrower.
    Loan:
      required:
        - loanType
        - ownershipType
        - parties
      description: |
        An account through which a party is able to repay a bank loan.
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        relatedCards:
          type: array
          description: >
            Payment cards related to the account. Debit cards, for loans or
            current accounts. Credit cards, for credit card accounts.
          items:
            $ref: '#/components/schemas/RelatedCard'
        principalAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        accruedCapitalisationAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        nextPayment:
          $ref: '#/components/schemas/RepaymentSchedule'
        lastPayment:
          $ref: '#/components/schemas/Repayment'
        loanBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        loanType:
          $ref: '#/components/schemas/LoanType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        contract:
          $ref: '#/components/schemas/LoanContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        compositeId:
          $ref: '#/components/schemas/CompositeAccountIdentifier'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        status:
          $ref: '#/components/schemas/LoanStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the loan servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        fundedDate:
          $ref: '#/components/schemas/Date'
        disbursalDate:
          $ref: '#/components/schemas/Date'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        transactionGroups:
          type: array
          items:
            $ref: '#/components/schemas/TransactionGroup'
    LoanDetailedStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/LoanStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the loan servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        fundedDate:
          $ref: '#/components/schemas/Date'
        disbursalDate:
          $ref: '#/components/schemas/Date'
      description: Specifies the current state of a loan.
    LoanStatus:
      maxLength: 17
      minLength: 1
      type: string
      description: |
        Specifies the current state of an account. Possible  values names are:
         Pending, 
         Form,
         Denied, 
         Review,
         Approve,
         Withdrawn,
         Disable,
         Funded,
         Deleted
      example: Withdrawn
    Repayment:
      type: object
      properties:
        paymentDate:
          $ref: '#/components/schemas/Date'
        repaymentScheduleId:
          $ref: '#/components/schemas/Id'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        expectedDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        repaymentType:
          $ref: '#/components/schemas/LoanPaymentType'
        paymentInstruction:
          $ref: '#/components/schemas/CreditTransferDetail'
      description: |
        An amount that was paid.
    LoanBalanceResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    LoanTransactionsResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        loanType:
          $ref: '#/components/schemas/LoanType'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        currentBalance:
          $ref: '#/components/schemas/AmountInCents'
        availableBalance:
          $ref: '#/components/schemas/AmountInCents'
        transactions:
          type: array
          description: Loan Transactions
          items:
            $ref: '#/components/schemas/Transaction'
    LoanIdentifiersResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        loanType:
          $ref: '#/components/schemas/LoanType'
        compositeId:
          $ref: '#/components/schemas/CompositeAccountIdentifier'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    LoanPartyResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
    LoanPaymentCardResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCard'
    LedgerAccountNumber:
      maxLength: 30
      type: string
      description: >
        Ledger account number used to identify different accounts. Also used for
        grouping and categorizing accounts. To make it easy for readers to
        locate specific accounts or to know what they're looking at instantly,
        each account typically contains human readable codes.
      example: 1-001
    LedgerAccountDescriptor:
      required:
        - accountId
        - accountNumber
        - accountType
        - name
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        name:
          $ref: '#/components/schemas/AccountName'
        status:
          $ref: '#/components/schemas/AccountStatus'
    LedgerAccountType:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Type of the Ledger Account. Possible values: GeneralLedger,
        DetailedLedger, Holding, Mirrow.
      example: GeneralLedger
    LedgerAccountRequest:
      required:
        - accountType
        - name
      type: object
      properties:
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        accountSubtype:
          $ref: '#/components/schemas/LedgerAccountSubtype'
        accountCategory:
          $ref: '#/components/schemas/LedgerCategoryId'
        name:
          $ref: '#/components/schemas/AccountName'
        number:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedLedgerAccount'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    LedgerAccountSubtype:
      maxLength: 35
      minLength: 1
      type: string
      description: >
        Subtype of the Ledger Account. Possible values: Asset, Liability,
        Equity.
      example: Asset
    LedgerCategoryId:
      maxLength: 40
      minLength: 1
      type: string
      description: >
        Unique identifier for the ledger account category. Is a grouping of
        Ledger Accounts. Its balance is equal to the sum of the balances of all
        contained accounts.
      example: '1'
    RelatedLedgerAccount:
      required:
        - accountId
        - accountRelationType
        - accountType
      type: object
      properties:
        accountRelationType:
          $ref: '#/components/schemas/AccountRelationType'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/LedgerAccountNumber'
    LedgerAccount:
      required:
        - accountId
        - accountType
        - status
        - name
      description: >
        An account of the Chart of Accounts. Detailed or General Ledger. Also
        can represent holding accounts, mirror accounts or working accounts that
        are required for the booking of a part of a transaction in the bank
        world. This is typically the case when amounts cannot immediately be
        booked on a final account for duty seggregation or processing reasons or
        in order to mirror bookings on external accounts, like nostro accounts.
        mirrow or holding account.
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountBranchCode:
          $ref: '#/components/schemas/Id'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/LedgerAccountBalance'
        status:
          $ref: '#/components/schemas/AccountStatus'
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        accountSubtype:
          $ref: '#/components/schemas/LedgerAccountSubtype'
        accountCategory:
          $ref: '#/components/schemas/LedgerCategoryId'
        name:
          $ref: '#/components/schemas/AccountName'
        number:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedLedgerAccount'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    LedgerAccountBalance:
      required:
        - amount
        - balanceName
      type: object
      properties:
        balanceName:
          $ref: '#/components/schemas/LedgerBalanceName'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        calculationDate:
          $ref: '#/components/schemas/DateAndTime'
      description: >
        Numerical representation of the net increases and decreases in an
        account at a specific point in time.
    LedgerBalanceName:
      maxLength: 17
      minLength: 1
      type: string
      description: >
        Specifies the nature of the ledger balance. Possible Values are: 
        Closing, Pending, Posted, Available.
      example: Closing
    LedgerAccountBalanceResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - balances
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/LedgerAccountBalance'
    LedgerAccountTransactionsResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - transactions
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        currentBalance:
          $ref: '#/components/schemas/AmountInCents'
        transactions:
          type: array
          description: Ledger Account Transactions
          items:
            $ref: '#/components/schemas/LedgerTransaction'
    LedgerTransaction:
      required:
        - creationDate
        - status
        - transactionId
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        description:
          $ref: '#/components/schemas/Description'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        creationDate:
          $ref: '#/components/schemas/DateAndTime'
        valueDate:
          $ref: '#/components/schemas/DateAndTime'
        bookingDate:
          $ref: '#/components/schemas/DateAndTime'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        currentBalance:
          $ref: '#/components/schemas/AmountInCents'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
      description: >-
        Posting to an account that results in an increase or decrease to a
        balance.
    InternalTransfer:
      required:
        - amount
      description: >
        An internal transfer move funds between ledger accounts, or between a
        holding account and a final account. To create an internal transfer,
        there must be at least one credit  entry and one debit entry.
        Additionally, the sum of all credit entry amounts must equal the sum of
        all debit entry amounts.
      type: object
      properties:
        date:
          $ref: '#/components/schemas/DateAndTime'
        transferId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/InternalTransferStatus'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/InternalTransferEntry'
        purpose:
          $ref: '#/components/schemas/Description'
        reason:
          $ref: '#/components/schemas/PaymentPurpose'
    InternalTransferRequest:
      required:
        - amount
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/InternalTransferEntry'
        purpose:
          $ref: '#/components/schemas/Description'
        reason:
          $ref: '#/components/schemas/PaymentPurpose'
      description: >
        An internal transfer move funds between ledger accounts, or between a
        holding account and a final account. To create an internal transfer,
        there must be at least one credit  entry and one debit entry.
        Additionally, the sum of all credit entry amounts must equal the sum of
        all debit entry amounts.
    InternalTransferEntry:
      properties:
        amount:
          $ref: '#/components/schemas/AmountInCents'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        accountId:
          $ref: '#/components/schemas/AccountId'
      description: |
        Represents an accounting entry within a parent ledger transaction.
    PaymentPurpose:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Underlying reason for the payment transaction.

        Usage: Purpose is used to provide information concerning the nature of
        the payment. Possible Values: BillerSubscriberIdentification,
        BankLoanDelayedDrawFunding, BankLoanFees, BankLoanFundingMemo,
        BankLoanAccruedInterestPayment, BankLoanPrincipalPaydown,
        CardBulkClearing, CardPaymentWithCashBack,
        CashDisbursementCashSettlement, CashDisbursementWithSurcharging,
        CardDeferredPayment, OriginalCredit, QuasiCash, EPurseTopUp,
        FeeCollection, MobileTopUp, AccountManagement, CashManagementTransfer,
        CollectionPayment, CashDisbursementCashManagement, Deposit,
        IntraCompanyPayment, IntraPartyPayment, LiquidityManagement, Netting,
        BondForward, CrossCurrencyIRS, CCPClearedInitialMargin,
        CCPClearedVariationMargin, CCPClearedInitialMarginSegregatedCash,
        CreditDefaultSwap, CrossProduct, CreditSupport, CreditLine,
        EquityOption, EquitySwap, ExoticOption, ExchangeTradedDerivatives,
        FixedIncome, ForwardBrokerOwnedCashCollateral,
        ForwardClientOwnedCashCollateral,
        ForwardBrokerOwnedCashCollateralSegregated,
        ForwardClientOwnedSegregatedCashCollateral,
        DailyMarginOnListedDerivatives, MBSBrokerOwnedCashCollateral,
        MBSClientOwnedCashCollateral, FuturesInitialMargin,
        FuturesInitialMarginClientOwnedSegregatedCashCollateral,
        ClientOwnedOCCPledgedCollateral, OTCOptionBrokerOwnedCashCollateral,
        OTCOptionClientOwnedCashCollateral, 
        OTCOptionBrokerOwnedSegregatedCashCollateral,
        OTCOptionClientOwnedCashSegregatedCashCollateral, FXOption,
        OTCDerivatives, RepurchaseAgreement, BilateralRepoBrokerOwnedCollateral,
        RepoClientOwnedCollateral,
        BilateralRepoBrokerOwnedSegregatedCashCollateral,
        BilateralRepoClientOwnedSegregatedCashCollateral,
        ReverseRepurchaseAgreement, SecuritiesBuySellSellBuyBack,
        SingleCurrencyIRSExotic, SingleCurrencyIRS, SecuritiesCrossProducts,
        BrokerOwnedCollateralShortSale, ClientOwnedCollateralShortSale,
        ShortSell, SecuritiesLendingAndBorrowing, SecuredLoan,
        SwapBrokerOwnedCashCollateral, SwapClientOwnedCashCollateral, Swaption,
        SwapsBrokerOwnedSegregatedCashCollateral,
        SwapsClientOwnedSegregatedCashCollateral, ToBeAnnounced,
        TBABrokerOwnedCashCollateral, TBAClientOwnedCashCollateral,
        TreasuryCrossProduct, AgriculturalTransfer, AccountsReceivablesEntry,
        BusinessExpenses, BackOfficeConversionEntry, CommercialPayment,
        Copyright, PurchaseSaleOfGoods, PurchaseSaleOfGoodsAndServices,
        PurchaseSaleOfGoodsAndServicesWithCashBack, LicenseFee,
        MobileP2BPayment, PointOfPurchaseEntry, Royalties,
        PurchaseSaleOfServices, ServiceCharges, Subscription, SupplierPayment,
        Commercial, CharityPayment, ConsumerThirdPartyConsolidatedPayment,
        MobileP2PPayment, GuaranteedEPayment, EPaymentReturn,
        NonGuaranteedEPayment, Epayment, CarLoanPrincipalRepayment,
        CompensationPayment, DebitCollectionPayment, GovernmentInsurance,
        PropertyLoanRepayment, PropertyLoanSettlement, InsurancePremiumCar,
        InsurancePremiumRefund, PaymentOfInsuranceClaim, InsurancePremium,
        Interest, LaborInsurance, LifeInsurance, Loan, LoanRepayment,
        PaymentBasedOnEnforcementOrder, PropertyInsurance, RentalLeaseGeneral,
        RecurringInstallmentPayment, TrustFund, ForwardForeignExchange,
        ForeignExchangeRelatedNetting, AdministrativeManagement, AdvancePayment,
        BearerCheckDomestic, BearerCheckForeign, BuildingMaintenance,
        BondForwardNetting, CapitalBuilding, CapitalBuildingRetirement,
        CreditCardPayment, CreditCardBill, CancellationFee,
        CardGeneratedDirectDebit, TradeSettlementPayment, Costs, CarparkCharges,
        DebitCardPayment, PrintedOrderDisbursement, DeliverAgainstPayment,
        Education, FactorUpdateRelatedPayment,
        FinancialAidInCaseOfNaturalDisaster, LatePaymentOfFeesAndCharges,
        PaymentOfFees, Gift, GovernmentPayment, IrrevocableCreditCardPayment,
        IrrevocableDebitCardPayment, InstalmentHirePurchaseAgreement,
        Installment, InvoicePayment, MultiCurrenyCheckDomestic,
        MultiCurrenyCheckForeign, MultipleServiceTypes, NotOtherwiseSpecified,
        OrderChequeDomestic, OrderChequeForeign, OpeningFee, PreauthorizedDebit,
        PaymentTerms, RepresentedCheckEntry, ReceiptPayment, Rebate, Refund,
        Rent, AccountOverdraftRepayment,
        ReimbursementOfAPreviousErroneousTransaction,
        BilateralRepoInternetNetting, RoundRobin,
        ReimbursementReceivedCreditTransfer, RelatedRequestToPay,
        ReceiveAgainstPayment, PaymentSlipInstruction, SplitPayments, Study,
        TBAPairOffNetting, TelecommunicationsBill, TownCouncilServiceCharges,
        TelephoneInitiatedTransaction, TMPGClaimPayment, TriPartyRepoInterest,
        TriPartyRepoNetting, TruncatedPaymentSlip, TravellerCheque,
        InternetInitiatedTransaction, InstantPayments,
        InstantPaymentsCancellation, InstantPaymentsForDonations,
        InstantPaymentsInECommerceWithoutAddressData,
        InstantPaymentsInECommerceWithAddressData, InstantPaymentsInECommerce,
        InstantPaymentsAtPOS, InstantPaymentsReturn,
        InstantPaymentsUnattendedVendingMachineWith2FA,
        InstantPaymentsUnattendedVendingMachineWithout2FA, Annuity,
        CustodianManagementFeeInhouse, CapitalFallingDueInhouse,
        CommodityTransfer, Derivatives, Dividend, ForeignExchange, Hedging,
        InvestmentAndSecurities, PreciousMetal, Savings, Securities,
        SecuritiesPurchaseInhouse, TreasuryPayment, UnitTrustPurchase,
        FuturesNettingPayment, Futures, AnesthesiaServices,
        ConvalescentCareFacility, DurableMedicaleEquipment, DentalServices,
        HomeHealthCare, HealthInsurance, HospitalCare, IntermediateCareFacility,
        LongTermCareFacility, MedicalAidFundContribution, MedicalAidRefund,
        MedicalServices, VisionCare, CreditDefaultEventPayment,
        SwapContractFinalPayment, SwapContractPartialPayment,
        SwapContractResetPayment, SwapContractUpfrontPayment,
        AdvisoryDonationCopyrightServices, ActiveEmploymentPolicy, Allowance,
        AlimonyPayment, BabyBonusScheme, ChildBenefit,
        UnemploymentDisabilityBenefit, BonusPayment,
        CashCompensationHelplessnessDisability, Commission,
        CompanySocialLoanPaymentToBank, GuaranteeFundRightsPayment,
        GovermentWarLegislationTransfer, HousingRelatedContribution, Payroll,
        PensionFundContribution, PensionPayment, PricePayment,
        RehabilitationSupport, SalaryPayment, SalaryPensionSumPayment,
        SocialSecurityBenefit, LendingBuyInNetting,
        LendingCashCollateralFreeMovement, LendingFees,
        LendingEquityMarkedToMarketCashCollateral,
        LendingFixedIncomeMarkedToMarketCashCollateral,
        LendingUnspecifiedTypeOfMarkedToMarketCashCollateral,
        LendingRebatePayments, LendingRevenuePayments, LendingClaimPayment,
        EstateTax, ForeignWorkerLevy, GoodsServicesTax, HousingTax, IncomeTax,
        NetIncomeTax, PropertyTax, RoadTax, TaxPayment, ValueAddedTaxPayment,
        WithHolding, TaxRefund, TrailerFeePayment, TrailerFeeRebate,
        NonUSMutualFundTrailerFeePayment,
        NonUSMutualFundTrailerFeeRebatePayment, Air, Bus, Ferry, Railway,
        RoadPricing, CableTVBill, ElectricityBill, Energies, GasBill,
        NetworkCharge, NetworkCommunication, OtherTelecomRelatedBill,
        TelephoneBill, Utilities, WaterBill, Bonds, CorporateActions-Bonds,
        CorporateActions-Equities, CreditCard, DebitCard, Diners, Equities,
        FleetCard, LowValueCredit, LowValueDebit, MoneyMarket,
        RapidPaymentInstruction, GamblingOrWageringPayment, LotteryPayment,
        Amex, ATM, AuthenticatedCollections, PropertyCompletionPayment,
        PropertyDeposit, PropertyLoanDisbursement, PropertyLoanRefinancing,
        GovernmentFamilyAllowance, GovernmentHousingAllowance, CashPenalties.
      example: CashManagementTransfer
    InternalTransferStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Indicates the status of a payment. Possible values:
         Received, Rejected, Pending, Accepted
      example: Accepted
    InternalTransferCancellationRequest:
      type: object
      properties:
        cancellationReason:
          $ref: '#/components/schemas/Description'
      description: |
        Request the cancellation of an internal transfer.
    InternalTransferCancellation:
      type: object
      properties:
        cancellationId:
          $ref: '#/components/schemas/Id'
        cancellationReason:
          $ref: '#/components/schemas/Description'
  parameters:
    servicerId:
      name: servicerId
      in: header
      description: Account Servicer Identification (Bank)
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    servicerBranchId:
      name: servicerBranchId
      in: header
      description: >-
        Identification of the account servicer institution at branch level or
        operation level.
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    idempotencyId:
      name: idempotencyId
      in: header
      description: Idempotency identifier used by the client when making repeated calls
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    accountId:
      name: accountId
      in: path
      description: Account Identification
      required: true
      schema:
        $ref: '#/components/schemas/AccountId'
    pageCursor:
      name: cursor
      in: query
      description: >
        Specifies an opaque string value ( "no  meaning" string value) at which
        start retrieving transactions. For instance,
        limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
      required: false
      schema:
        type: string
    pageLimit:
      name: limit
      in: query
      description: >
        Specifies the number of resources to return in one request, specified as
        an integer from 1 to 100.
      required: false
      schema:
        type: string
    pageFirstCursor:
      name: Pagination-Cursor
      in: header
      description: Pagination Cursor
      required: true
      schema:
        type: string
    pageTotal:
      name: Pagination-Total
      in: header
      description: |
        Total number of resources.
      required: true
      schema:
        type: string
    standingOrderId:
      name: standingOrderId
      in: path
      description: Standing Order Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    personId:
      name: personId
      in: path
      description: Person Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    organizationId:
      name: organizationId
      in: path
      description: Organization Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    relationshipId:
      name: relationshipId
      in: path
      description: Relationship Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    cardId:
      name: cardId
      in: path
      description: Card Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    loanId:
      name: loanId
      in: path
      description: Loan Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: >-
        http://localhost:8083/auth/realms/openbanking/.well-known/openid-configuration