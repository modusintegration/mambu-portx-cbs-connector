---
openapi: 3.0.1
info:
  title: PortX Open Banking Account Management
  description: "PortX Bank Account Management (BAM) semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting.\nIn many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one BAM message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents.\nEvery BAM request message has an attribute to support the ISO 20022 digital signature. \n"
  contact:
    email: betiana.darderes@modusbox.com
  version: 0.1.0
servers:
  - url: /mambu-portx-cbs-connector/1.0
    description: SwaggerHub API
security:
  - jwt: []
  - openIdConnect: []
tags:
  - name: Accounts
    description: Bank Account Management
  - name: Parties
    description: Person and Organization Management
  - name: Transactions
    description: Account Transactions Management
  - name: Products
    description: Financial Product Management
  - name: Cards
    description: Card Management
  - name: Loans
    description: Loan Management
paths:
  /accounts:
    post:
      tags:
        - Accounts
      summary: Opens an Account
      operationId: openBankingAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        required: true
      responses:
        "202":
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/deposits:
    post:
      tags:
        - Transactions
      summary: Creates a Credit Transaction
      operationId: createDeposit
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
        required: true
      responses:
        "202":
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/withdrawals:
    post:
      tags:
        - Transactions
      summary: Creates a Debit Transaction
      operationId: createWithdrawal
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalRequest'
        required: true
      responses:
        "202":
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Retrieves an Account
      operationId: findAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Accounts
      summary: Updates an Account
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        "200":
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/balances:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Balances
      operationId: findAccountBalances
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/transactions:
    get:
      tags:
        - Transactions
      summary: Retrieves Account Transactions
      operationId: findAccountTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionStatus'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: creationDate.lte
          in: query
          description: Input cycle date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Input cycle date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: true
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTransactionsResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/identifiers:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Identifiers
      operationId: findAccountIdentifiers
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountIdentifiersResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/parties:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Parties
      operationId: findAccountRelatedParties
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPartyResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/owners:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Owners
      operationId: findAccountOwners
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOwnerResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/cards:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Cards
      operationId: findAccountCards
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPaymentCardResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/standing-orders:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Standing Orders
      operationId: findStandingOrder
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStandingOrderResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/standing-orders/{standingOrderId}/cancellation:
    post:
      tags:
        - Accounts
      summary: Request Standing Order Cancellation
      operationId: cancelStandingOrder
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: standingOrderId
          in: path
          description: Standing Order Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandingOrderCancellationRequest'
        required: true
      responses:
        "202":
          description: Cancellation request was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandingOrder'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons:
    get:
      tags:
        - Parties
      summary: Retrieves a Person
      operationId: findPerson
      parameters:
        - name: name.inc
          in: query
          description: The person name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: birthDate.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: phoneNumber.eq
          in: query
          description: Any phone number equals to.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: ssn.eq
          in: query
          description: Social Security Number
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: ssn.last4
          in: query
          description: Social Security Number last four digits.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: country.eq
          in: query
          description: Any postal address with Country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: personId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Parties
      summary: Creates a Person
      operationId: createPerson
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequest'
        required: true
      responses:
        "202":
          description: Person information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. The person information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}:
    get:
      tags:
        - Parties
      summary: Retrieves a Person
      operationId: findPersonById
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Parties
      summary: Updates a Person
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updatePerson
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        "200":
          description: Updated person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/accounts:
    get:
      tags:
        - Parties
      summary: Retrieves Person Accounts
      operationId: findPersonAccounts
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonAccountResponse'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/cards:
    get:
      tags:
        - Parties
      summary: Retrieves Person Cards
      operationId: findPersonCards
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonCardResponse'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Parties
      summary: Creates a Card
      description: "Creates a personal payment card related to one or multiple accounts.  The person may be not an account owner (an additional). For debit cards, the fund account should be provided in the request."
      operationId: createPersonalPaymentCard
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCardRequest'
        required: true
      responses:
        "202":
          description: Payment card information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        "400":
          description: Bad Request. The card information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations:
    get:
      tags:
        - Parties
      summary: Retrieves an Organization
      operationId: findOrganization
      parameters:
        - name: name.inc
          in: query
          description: The organization name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: country.eq
          in: query
          description: Any postal address with country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: organizationId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching organization was found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        "400":
          description: Bad Request. Organization Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching organizations have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Parties
      summary: Creates an Organization
      operationId: createOrganization
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
        required: true
      responses:
        "202":
          description: Organization information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Bad Request. The organization information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{organizationId}:
    get:
      tags:
        - Parties
      summary: Retrieves an Organization
      operationId: findOrganizationById
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching organization was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Bad Request. Organization Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Parties
      summary: Updates an Organization
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        "200":
          description: Updated organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching organizations have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{organizationId}/accounts:
    get:
      tags:
        - Parties
      summary: Retrieves Organization Accounts
      operationId: findOrganizationAccounts
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching organization was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationAccountResponse'
        "400":
          description: Bad Request. Organization Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products:
    get:
      tags:
        - Products
      summary: Retrieves Financial Products
      operationId: findAccountFinancialProducts
      parameters:
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching product was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: No matching product have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards:
    get:
      tags:
        - Cards
      summary: Retrieves Cards
      operationId: findCards
      parameters:
        - name: number.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PrimaryAccountNumber'
        - name: sourceType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardFundingSourceType'
        - name: productName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardProductName'
        - name: brand.inc
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: name.inc
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching card was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        "404":
          description: No matching card have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Retrieves a Card
      operationId: findCardById
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching card was found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentCard'
        "400":
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching card have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Cards
      summary: Updates a Card
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateCard
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/PaymentCard'
        required: true
      responses:
        "200":
          description: Updated card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        "400":
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching cards have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/accounts:
    get:
      tags:
        - Cards
      summary: Retrieves Card Accounts
      operationId: findCardRelatedAccounts
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching card was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardRelatedAccountResponse'
        "400":
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/owner:
    get:
      tags:
        - Cards
      summary: Retrieves Card Holder
      operationId: findCardHolder
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching card was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/transactions:
    get:
      tags:
        - Cards
      summary: Retrieves Card Holder Transactions
      operationId: findCardAccountTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: creationDate.lte
          in: query
          description: Input cycle date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Input cycle date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching transaction was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTransactionsResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching transactions have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans:
    post:
      tags:
        - Loans
      summary: Opens a Loan
      operationId: openLoanAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanRequest'
        required: true
      responses:
        "202":
          description: Loan information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        "400":
          description: Bad Request. The loan could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}:
    get:
      tags:
        - Loans
      summary: Retrieves a Loan
      operationId: findLoan
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching Loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Loans
      summary: Updates a Loan
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateLoan
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Loan'
        required: true
      responses:
        "200":
          description: Updated loan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/balances:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Balances
      operationId: findLoanBalances
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanBalanceResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/transactions:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Transactions
      operationId: findLoanTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AmountInCents'
        - name: creationDate.lte
          in: query
          description: Creation date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Creation date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: true
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanTransactionsResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/identifiers:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Identifiers
      operationId: findLoanIdentifiers
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanIdentifiersResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/parties:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Parties
      operationId: findLoanRelatedParties
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanPartyResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/owners:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Owners
      operationId: findLoanBorrowers
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOwnerResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/cards:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Cards
      operationId: findLoanCards
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanPaymentCardResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /credit-transfers:
    post:
      tags:
      - Credit Transfers
      summary: Credit Transfer Initiation
      description: "Instruction to pay an amount of money to an ultimate beneficiary, on behalf of an originator."
      operationId: initiateCreditTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditTransferInitiation'
        required: true
      responses:
        "202":
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransfer'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /credit-transfers/{paymentId}:
    get:
      tags:
      - Credit Transfers
      summary: Credit Transfer Status
      description: "Returns the status report of a credit transfer initiation, process and excecution."
      operationId: findCreditTransfer
      parameters:
      - name: paymentId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/PaymentId'
      responses:
        "200":
          description: Matching Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransfer'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /credit-transfers/{paymentId}/cancellation:
    post:
      tags:
      - Credit Transfers
      summary: Credit Transfer Cancellation
      description: Request a payment cancellation.
      operationId: initiateCreditTransferCancellation
      parameters:
      - name: paymentId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/PaymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditTransferCancellationRequest'
        required: true
      responses:
        "202":
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransferCancellation'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /direct-debits:
    post:
      tags:
      - Direct Debits
      summary: Direct Debit Initiation
      description: Instruction to collect funds from a debitor.
      operationId: initiateDirectDebit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectDebitInitiation'
        required: true
      responses:
        "202":
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebit'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /direct-debits/{paymentId}:
    get:
      tags:
      - Direct Debits
      summary: Direct Debit Status
      description: "Returns the status report of a direct debit initiation, process and excecution."
      operationId: findDirectDebit
      parameters:
      - name: paymentId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/PaymentId'
      responses:
        "200":
          description: Matching Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransfer'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /direct-debits/{paymentId}/cancellation:
    post:
      tags:
      - Direct Debits
      summary: Direct Debit Cancellation
      description: Requests direct debit cancellation.
      operationId: initiateDirectDebitCancellation
      parameters:
      - name: paymentId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/PaymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditTransferCancellationRequest'
        required: true
      responses:
        "202":
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransferCancellation'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Id:
      maxLength: 36
      minLength: 1
      type: string
      example: 5fb9d4d6-1a3c-11ed-861d-0242ac120002
    AccountRequest:
      type: object
      properties:
        servicerBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountType:
          $ref: '#/components/schemas/AccountType'
        accountOwnershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        initialAmount:
          $ref: '#/components/schemas/AmountInCents'
        contract:
          $ref: '#/components/schemas/AccountContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        maturityDate:
          $ref: '#/components/schemas/Date'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        referenceAccount:
          $ref: '#/components/schemas/Id'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statementSettings:
          $ref: '#/components/schemas/StatementSettings'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    ServicerBranchId:
      maxLength: 36
      minLength: 1
      type: string
      description: "Identification of the account servicer institution at branch level or operation level. \n"
      example: SEA_1
    AccountType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Type of the account. Some possible ISO 20022 compliant values are: \n Current,\n CardAccount,\n CashPayment, \n Charges, \n CashIncome, \n Commission, \n ClearingParticipantSettlementAccount,\n LimitedLiquiditySavingsAccount,\n MarginalLending, \n MoneyMarket, \n NonResidentExternal, \n Overdraft, \n OverNightDeposit, \n Settlement, \n Salary, \n Savings, \n Tax, \n TransactingAccount,\n CashTrading,\n VirtualAccount,\n Checking,\n CreditCard,\n DebitCard,\n Universal, \n Investment, \n EpurseCard,\n CertificateOfDeposit,\n MoneyMarketChecking, \n RetirementAccount, \n StockOrBond,\n PrePaid, \n FleetCard, \n Cash, \n DebitAccount, \n CreditAccount, \n Benefit,\n HealthSavingsAccount,\n FlexibleSpendingAccount,\n ForBenefitOf,\n Estate\n"
      example: Current
    AccountOwnershipType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the type of account ownership. Possible ISO 20022 compliant values names are:
         JointAccountWithSurvivorshipRights, JointAccountInCommon, CustodialAccount, SingleOwnerAccount, JointAccount, Corporation, FormalPartnership, FormalTrust, Nominee, NonProfitOrganisation, OtherNonIndividual, EUResidualEntity, GovernmentOrganization, LimitedLiabilityCompany, RegisteredInvestmentCompany, Entrepreneurial, Unincorporated, LimitedPartnership, BareOwner, Owner, Usufructuary, Fiduciary
      example: Owner
    ProductId:
      maxLength: 36
      minLength: 1
      type: string
      example: PD_CA_0002
    AccountName:
      maxLength: 70
      minLength: 1
      type: string
      description: "Name of the account. It provides an additional means of identification, and is designated by the account servicer in agreement with the account owner."
      example: Hermes PD_CA 0002
    Description:
      maxLength: 1025
      minLength: 1
      type: string
      example: This is a description.
    CurrencyCode:
      maxLength: 3
      minLength: 3
      pattern: "^([A-Z]{3})?$"
      type: string
      description: "Three contiguous letters for the representation of currencies and funds. Valid currency codes are registered with the ISO 4217 Maintenance Agency. \n"
      example: USD
    AmountInCents:
      maxLength: 23
      pattern: "^-?([0]|([1-9][0-9]{0,12}))([.][0-9]{0,8})?$"
      type: string
      description: "Number of monetary units where the size of the decimal part is defined by the currency.\nNote: \ntotal number of digits: 21\nnumber of digits in fractional part: 8\nmaxInclusive: 9999999999999.99999999\nminInclusive: -9999999999999.99999999\n"
      example: "100"
    AccountContract:
      description: Account contractual details between the owners and the account servicer.
      type: object
      properties:
        targetClosingDate:
          $ref: '#/components/schemas/Date'
        targetGoLiveDate:
          $ref: '#/components/schemas/Date'
        masterAgreement:
          $ref: '#/components/schemas/Document'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
        fromDateTime:
          $ref: '#/components/schemas/Date'
        upToDateTime:
          $ref: '#/components/schemas/Date'
    Agreement:
      description: Contractual details related to an agreement between parties
      type: object
      properties:
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
        fromDateTime:
          $ref: '#/components/schemas/Date'
        upToDateTime:
          $ref: '#/components/schemas/Date'
    Document:
      type: object
      properties:
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
      description: |
        General information that unambiguously identifies a document, such as identification number and issue date time.
    Date:
      type: string
      description: A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format.
      format: date
      example: 2022-04-17
    Period:
      properties:
        fromDateTime:
          $ref: '#/components/schemas/Date'
        upToDateTime:
          $ref: '#/components/schemas/Date'
    Jurisdiction:
      $ref: '#/components/schemas/Place'
    Place:
      type: object
      properties:
        countrySubdivision:
          maxLength: 35
          minLength: 1
          type: string
          example: Oregon
        townName:
          maxLength: 35
          minLength: 1
          type: string
          example: Tualatin
        country:
          $ref: '#/components/schemas/CountryCode'
      description: "Town, CountrySubdivision and Country ."
    CountryCode:
      pattern: "^([A-Z]{2,2})?$"
      type: string
      description: "Country name obtained from the United Nations (ISO 3166, Alpha-2 code)."
      example: US
    InterestCalculation:
      type: object
      properties:
        fromDateTime:
          $ref: '#/components/schemas/Date'
        upToDateTime:
          $ref: '#/components/schemas/Date'
        name:
          $ref: '#/components/schemas/InterestName'
        dayCountBasis:
          $ref: '#/components/schemas/InterestComputationMethod'
        rate:
          $ref: '#/components/schemas/Percentage'
        interestRateType:
          $ref: '#/components/schemas/InterestRateType'
        calculationFrequency:
          $ref: '#/components/schemas/Frequency'
        applicationFrequency:
          $ref: '#/components/schemas/Frequency'
        variableInterest:
          $ref: '#/components/schemas/VariableInterestCalculation'
    InterestName:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Name of the interest that applies to the account. For instance, Overdraft, LatePayment.
      example: LatePayment
    InterestComputationMethod:
      maxLength: 50
      minLength: 1
      type: string
      description: |
        Specifies the method used to compute accruing interest of a financial instrument. Some ISO 20022 compliant values are: 30360AmericanBasicRule, IC30365, IC30Actual, Actual360, Actual365Fixed, ActualActualICMA, IC30E360orEuroBondBasismodel1, ActualActualISDA, Actual365LorActuActubasisRule, ActualActualAFB, IC30360ICMAor30360basicrule, IC30E2360orEurobondbasismodel2, IC30E3360orEurobondbasismodel3, Actual365NL, Narrative, ActualActualUltimo, IC30EPlus360, Actual364, Business252, Actual360NL, OneOne, Other
      example: 30360AmericanBasicRule
    Percentage:
      maxLength: 23
      pattern: "^((([0])([.][0-9]{0,10}))|[1])?$"
      type: string
      description: |
        Value expressed as a percentage, for example, 0.7 is %70;  0.3333 is %33.33.
            total number of digits: 11
            number of digits in fractional part: 10
            Max Value: 1
      example: "0.7"
    InterestRateType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the type of interest rate. Some ISO 20022 compliant values are: Fixed, Forfeit, Variable, Scheduled, Unscheduled, Discount, FixedRateUnderlyingExposureForLife, FixedRateUnderlyingExposureWithCompulsoryFutureSwitchToFloating, FixedWithFuturePeriodicResets, FloatingLinkedToIndex, FloatingRateUnderlyingExposureForLife, FloatingRateUnderlyingExposureWithCap, FloatingRateUnderlyingExposureWithFloor, FloatingRateUnderlyingExposureWithFloorAndCap, Modular, ObligorSwapped, Other, SwicthOptionality
      example: Fixed
    Frequency:
      type: object
      properties:
        unit:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies a frequency. Some ISO 20022 compliant values are: Annual, Monthly, Quarterly, SemiAnnual, Weekly, Daily, Adhoc, IntraDay, Overnight, TenDays, Fortnightly, TriggeredByMovement, Never, Rate, OnCreditEvent, Upfront, OnExpiry, Hourly, TriAnnual, Bimonthly, OnDemand, Shift, TwiceAWeek, XDays, XMonths, XYears.
          example: Monthly
        value:
          maximum: 999
          type: integer
          description: "Number of units, for XDays, XMonths, XYears."
      description: Specifies an event frequency
    VariableInterestCalculation:
      type: object
      properties:
        referenceRateName:
          $ref: '#/components/schemas/BenchmarkCurve'
        term:
          $ref: '#/components/schemas/TemporalDuration'
        spreadRate:
          $ref: '#/components/schemas/Percentage'
        basisPointSpread:
          type: integer
          description: |
            Provides the number of basis points added to (if positive) or deducted from (if negative) the underlying reference rate to calculate the actual interest rate applicable for a given period at issuance of the floating rate instrument. Used to express differences in interest rates, for example, a difference of 0.10% is equivalen
      description: |
        Specifies the parameters to be used for variable interest.
    BenchmarkCurve:
      type: string
      description: "Specifies a benchmark curve name. Possible ISO 20022 compliant values are: WIBOR, Treasury, TIBOR, TELBOR, SWAP, STIBOR, PRIBOR, Pfandbriefe, NIBOR, MuniAAA, MOSPRIM, LIBOR, LIBID, JIBAR, ISDAFIX, GCFRepo, FutureSWAP, EuroSwiss, EURODOLLAR, Euribor, EONIASwaps, EONIA, CIBOR, CDOR, BUBOR, BBSW\n\n   \n"
    TemporalDuration:
      type: object
      properties:
        unit:
          $ref: '#/components/schemas/TemporalUnit'
        value:
          maximum: 999
          type: integer
          description: Value of the duration in number of units.
      description: |
        Describes a temporal duration.
    TemporalUnit:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies a temporal unit. Possible values are: Days, Months, Weeks, Years.
      example: Months
    ChargeCalculation:
      type: object
      properties:
        fromDateTime:
          $ref: '#/components/schemas/Date'
        upToDateTime:
          $ref: '#/components/schemas/Date'
        name:
          $ref: '#/components/schemas/ChargeName'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        rate:
          $ref: '#/components/schemas/Percentage'
        chargeType:
          $ref: '#/components/schemas/ChargeType'
        calculationBasis:
          $ref: '#/components/schemas/CalculationBasis'
        bearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        maximumAmount:
          description: |
            $ref: '#/components/schemas/PositiveAmountInCents'
        relatedInterest:
          $ref: '#/components/schemas/InterestCalculation'
    ChargeName:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Name of the charge calculation in PascalCase. Possible values: cardLatePayment, cashAdvance
      example: cardLatePayment
    PositiveAmountInCents:
      maxLength: 23
      pattern: "^([0]|([1-9][0-9]{0,12}))([.][0-9]{0,8})?$"
      type: string
      description: "Number of monetary units where the size of the decimal part is defined by the currency.\nNote: \ntotal number of digits: 21\nnumber of digits in fractional part: 8\nmaxInclusive: 9999999999999.99999999\nminInclusive: 0\n"
      example: "100"
    ChargeType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Type of service for which a charge is asked or paid. Some possible ISO 20022 compliant values are:\n    BrokerageFee, Commission, BackEndLoad, FrontEndLoad, Switch, DilutionLevy, Discount, ManagementFee, TransferFee, MatchingFees, PostageCharge, RegulatoryFee, ShippingCharge, ServiceProvisionFee, SpecialConcessions, PartAcquis, Penalty, ContingencyDeferredSalesCharge, Other, Equalisation, CorrespondentBankCharge, Premium, Initial, AdvisoryFee, CustodyFee, PublicationFee, AccountingFee, SignatureService, StorageAtDestination, StorageAtOrigin, Packaging, PickUp, DangerousGoodsFee, SecurityCharge, InsurancePremium, CollectFreight, ClearanceAndHandlingAtOrigin, ClearanceAndHandlingAtDestination, AirWayBillFee, TransportCharges, UCITSCommission, SpeciallyAgreedFrontEndLoad, ADRFee, IssuanceCancellationFee, MiscellaneousFee, IssuanceFee.\n    \n"
      example: ManagementFee
    CalculationBasis:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the calculation basis of a charge or fee. Some possible ISO 20022 compliant values are:\n    Average, Daily, Other, Monthly, Annual\n\n    \n    \n    \n"
      example: Monthly
    ChargeBearerType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies which party(ies) will pay charges due for processing of the instruction.
        BorneByDebtor, BorneByCreditor,  Shared, FollowingServiceLevel
      example: Shared
    AccountParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyAccountRole:
          $ref: '#/components/schemas/AccountPartyRole'
    PartyType:
      type: string
      description: |
        Possible values are:
         Person,
         Organization. Also other types of servicer internal entities: ServicerOfficer
      example: Person
    AccountPartyRole:
      maxLength: 35
      minLength: 1
      type: string
      description: "Type of the account. Some possible ISO 20022 compliant values are: \n AccountOwner, LiquidityManager, LimitManager, PaymentManager, Reader, BackupManager, SettlementManager, FundManagementCompany, TransferAgent, FundAccountant, Registrar, InvestmentManager, Custodian, Auditor, PayingAgent, CashCorrespondent, DataProvider, FinalAgent, Investor, FirstAgent, Intermediary, Distributor, Concentrator, UnderlyingClient1, UnderlyingClient2, TransmittingAgent, FundBroker, FinancialAdvisor, ContactPersonAtInstructingPartyInstitution, ContactPersonAtExecutingPartyInstitution, NameOfAgentToOrder, PrimeBroker, Internal, LegalGuardian, DecisionMaker, Guarantor, LoanLender, LoanBorrower, LoanCoBorrower, PrimaryOwner, Trustee, CustodianForMinor, Nominee, SecondaryOwner, Executor, Beneficiary, PrimaryServicerOfficer, SecondaryServicerOfficer.\n"
      example: AccountOwner
    RelatedAccount:
      type: object
      properties:
        accountRelationType:
          $ref: '#/components/schemas/AccountRelationType'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
    AccountRelationType:
      type: string
      description: |
        Account relation role. Possible values are:
           Parent,
           Child, Group.
    AccountId:
      maxLength: 36
      minLength: 1
      type: string
      description: Identification assigned by the account service institution (Servicer).
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    AccountNumber:
      maxLength: 30
      type: string
      description: "The account number or Basic Bank Account Number (BBAN). \n"
      example: "012345678"
    Restriction:
      type: object
      properties:
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Name of the restriction in PascalCase. Possible values: externalTransferAllowed, urgentTransferAllowed
          example: externalTransferAllowed
        restrictionPurpose:
          $ref: '#/components/schemas/Description'
        validFrom:
          $ref: '#/components/schemas/Date'
        validUntil:
          $ref: '#/components/schemas/Date'
      description: Restriction on capabilities allowed.
    Limit:
      type: object
      properties:
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Name of the limit in PascalCase. Possible values: overdraft, creditLimit
          example: creditLimit
        limitTypeCode:
          $ref: '#/components/schemas/LimitType'
        channelType:
          maxLength: 30
          minLength: 1
          type: string
          description: "Channel type for which this limit applies. Possible values: Online, ATM \n"
        amount:
          $ref: '#/components/schemas/AmountInCents'
        percentage:
          $ref: '#/components/schemas/Percentage'
        validFrom:
          $ref: '#/components/schemas/Date'
        validUntil:
          $ref: '#/components/schemas/Date'
        usedAmount:
          $ref: '#/components/schemas/AmountInCents'
        usedPercentage:
          $ref: '#/components/schemas/Percentage'
        status:
          $ref: '#/components/schemas/LimitStatus'
        periodicity:
          $ref: '#/components/schemas/Frequency'
      description: |
        Value used for risk containment.
    LimitType:
      maxLength: 35
      type: string
      description: "Specifies the type of risk management limit. \n       Possible ISO 20020 compliant values are: Bilateral, NetBilateral, IndirectBilateral, Global, MandatoryBilateral, DiscretionaryBilateral, DirectDebit, SingleCustomerDirectDebit, SingleFinancialInstitutionDirectDebit, TotalDailyCustomerDirectDebit, TotalDailyFinancialInstitutionDirectDebit, AutoCollateralisation, UnsecuredCredit, ExternalGuarantee\n"
      example: DirectDebit
    LimitStatus:
      maxLength: 35
      type: string
      description: "Specifies the current status of a limit. \n       Possible ISO 20020 compliant values are: Enabled, Disabled, Deleted, Requested\n"
      example: Requested
    StatementSettings:
      type: object
      properties:
        frequency:
          $ref: '#/components/schemas/Frequency'
        communicationMethod:
          $ref: '#/components/schemas/CommunicationChannelName'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        category:
          $ref: '#/components/schemas/StatementCategory'
        subcategory:
          $ref: '#/components/schemas/StatementSubcategory'
      description: |
        Specifies how often statements will be sent, in which format, to which address.
    CommunicationChannelName:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Channel used to communicate with a party. Possible Values: Email, Fax, File, Online, PostalService, LiveSupport, ATM, IVR, Kiosk, Mobile, OnlineBanking, Phone, SMS, Card, InPerson.
      example: Email
    DocumentFormat:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies a choice of format for a document. Possible Values: PDF, HTML
      example: PDF
    StatementCategory:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Used to categorize the statement. Possible Values: BalanceSheet, ProfitAndLoss
      example: BalanceSheet
    StatementSubcategory:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Used to subcategorize the statement. Possible Values: Cash, AccountReceivable, Inventory, CurrentAssets
      example: Cash
    SupplementaryData:
      type: object
      description: |
        Additional information that cannot be captured in the structured elements and/or any other specific block. If this information need to be converted in ISO Messages, must be ISO 20022 compliant: it requires development of a compliant message extension model and its components must be registered in the ISO 20022 Data Dictionary. https://www.iso20022.org/catalogue-messages/additional-content-messages/supplementary-data
    AccountResponse:
      type: object
      properties:
        servicerBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountType:
          $ref: '#/components/schemas/AccountType'
        accountOwnershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        initialAmount:
          $ref: '#/components/schemas/AmountInCents'
        contract:
          $ref: '#/components/schemas/AccountContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        maturityDate:
          $ref: '#/components/schemas/Date'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        referenceAccount:
          $ref: '#/components/schemas/Id'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statementSettings:
          $ref: '#/components/schemas/StatementSettings'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        status:
          $ref: '#/components/schemas/AccountStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the account servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        closeDate:
          $ref: '#/components/schemas/Date'
        iBAN:
          $ref: '#/components/schemas/IBAN'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        accountId:
          $ref: '#/components/schemas/AccountId'
    AccountDetailedStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/AccountStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the account servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        closeDate:
          $ref: '#/components/schemas/Date'
      description: Specifies the current state of an account.
    AccountStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the current state of an account. Possible ISO 20022 compliant values names are:\n Enable,        \n Disable,\n Deleted,\n Pending, \n Form.\n"
      example: Pending
    DateAndTime:
      type: string
      format: date-time
      example: 2022-04-17T08:00:00Z
    AccountIdentifiers:
      type: object
      properties:
        iBAN:
          $ref: '#/components/schemas/IBAN'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    IBAN:
      maxLength: 34
      minLength: 1
      pattern: "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$"
      type: string
      description: |
        The International Bank Account Number is a code used internationally by financial institutions to uniquely identify the account of a customer at a financial institution. A valid IBAN consists of all three of the following components: Country Code, check digits and BBAN.
      example: AL35202111090000000001234567
    RoutingNumber:
      type: object
      properties:
        number:
          $ref: '#/components/schemas/ABANumber'
        routingNumberType:
          $ref: '#/components/schemas/RoutingNumberType'
    ABANumber:
      maxLength: 9
      minLength: 9
      type: string
      description: "The routing number (sometimes referred to as an ABA routing number, regarding the American Bankers Association) is a sequence of nine digits used by banks to identify specific financial institutions within the United States.  \n"
      example: "012345678"
    RoutingNumberType:
      maxLength: 9
      minLength: 9
      type: string
      description: |
        Different types of payments may require different bank routing numbers. Some possible values: ACH, WIRE, ElectronicCheck, PaperCheck
      example: ACH
    AccountIdentification:
      type: object
      properties:
        identification:
          maxLength: 34
          minLength: 1
          type: string
          description: Identification assigned by an institution.
        schemeName:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Name of the identification scheme, in PascalCase. Possible ISO 20022 compliant values names are:
            IssuerIdentificationNumber, BBANIdentifier, CHIPSUniversalIdentifier, UPICIdentifier.
          example: BBANIdentifier
        issuer:
          maxLength: 35
          minLength: 1
          type: string
          description: Entity that assigns the identification.
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: |
            A broad categorization of the error. A short string indicating the error code reported. Safe for programmatic use.
          example: InvalidRequest
        message:
          type: string
          description: |
            A human-readable representation of the error.
          example: Invalid Request
        details:
          type: array
          description: |
            An array of details about specific errors that led to this reported error.
          items:
            $ref: '#/components/schemas/ErrorDetail'
        innerError:
          $ref: '#/components/schemas/InnerError'
        debugMessage:
          type: object
          description: |
            Message used to debug the root cause of the error. Contents should not be used in consumer's business logic. Can change at any time and should only be used for consumer to communicate with the data provider about an issue.
        documentationUrl:
          type: string
          description: |
            URI reference that identifies the
            problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type.
          example: /errors/invalid-credentials
    ErrorDetail:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: |
            A short string indicating the error code reported. Safe for programmatic use.
          example: InvalidRequest
        message:
          type: string
          description: |
            A human-readable representation of the error.
          example: Invalid Request
        target:
          type: string
          description: |
            The target of the error.
          example: Invalid Request
    InnerError:
      type: object
      properties:
        code:
          type: string
          description: |
            A short string indicating the error code reported. Safe for programmatic use.
        message:
          type: string
          description: |
            The description of the error code
        innerError:
          $ref: '#/components/schemas/InnerError'
      description: |
        An object containing more specific information than the current object about the error.
    DepositRequest:
      type: object
      properties:
        transactionType:
          $ref: '#/components/schemas/DepositTransactionType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        exchange:
          $ref: '#/components/schemas/Exchange'
        check:
          $ref: '#/components/schemas/Check'
      description: |
        Deposit transaction request to an account for cash, check deposits, or merchandise payments.
    DepositTransactionType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of Credit Transaction: Cash, Check, Merchandise
      example: Cash
    Exchange:
      type: object
      properties:
        currency:
          description: |
            $ref: '#/components/schemas/CurrencyCode'
        exchangeFactor:
          $ref: '#/components/schemas/BaseOneRate'
    BaseOneRate:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.
               total number of digits: 11
               number of digits in fractional part: 10
               base value: 1
      example: "0.7"
    Check:
      type: object
      properties:
        checkType:
          type: string
          description: "Specifies the type of the check. Possible ISO compliant values are: \nCustomerCheque, CertifiedCustomerCheque, BankCheque, Draft, ElectronicDraft.\n"
        checkNumber:
          maxLength: 35
          type: string
          description: |
            The number on the face of the check indicating the id of that check in a series.
        availabilityDate:
          $ref: '#/components/schemas/DateAndTime'
      description: Characteristics of a check
    Transaction:
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        domain:
          $ref: '#/components/schemas/BankTransactionDomain'
        family:
          $ref: '#/components/schemas/BankTransactionFamily'
        subFamily:
          $ref: '#/components/schemas/BankTransactionSubfamily'
        description:
          $ref: '#/components/schemas/Description'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        creationDate:
          $ref: '#/components/schemas/DateAndTime'
        valueDate:
          $ref: '#/components/schemas/DateAndTime'
        bookingDate:
          $ref: '#/components/schemas/DateAndTime'
        charges:
          type: array
          description: All charges and taxes applied to the transaction.
          items:
            $ref: '#/components/schemas/TransactionCharge'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        interests:
          type: array
          description: All interests included in the transaction amount.
          items:
            $ref: '#/components/schemas/TransactionInterest'
        currentBalance:
          $ref: '#/components/schemas/AmountInCents'
        payment:
          $ref: '#/components/schemas/PaymentId'
        check:
          $ref: '#/components/schemas/Check'
        card:
          $ref: '#/components/schemas/PaymentCardTransaction'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    TransactionId:
      maxLength: 36
      minLength: 1
      type: string
      description: Unique reference as assigned by the account servicing institution to unambiguously identify the transaction.
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    CreditDebitIndicator:
      maxLength: 17
      minLength: 1
      type: string
      description: |
        Specifies if an operation is an increase or a decrease. Possible ISO 20022 compliant values names are:
        Credit,
        Debit.
      example: Credit
    BankTransactionDomain:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the bank transaction code domain. Some possible ISO 20022 compliant values are: \n Payments,\n AccountManagement.\n"
      example: Payments
    BankTransactionFamily:
      maxLength: 60
      minLength: 1
      type: string
      description: "Specifies the bank transaction family. Some possible ISO 20022 compliant values are: \n For Payments domain: CustomerCardTransactions, MerchantCardTransactions.\n"
      example: CustomerCardTransactions
    BankTransactionSubfamily:
      maxLength: 60
      minLength: 1
      type: string
      description: "Specifies the bank transaction subfamily. Some possible ISO 20022 compliant values are: \n For CustomerCardTransactions family: CashDeposit, CashWithdrawal, SmartCardPayment, PointOfSalePaymentDebitCard, CreditCardPayment, CrossBorderCreditCardPayment, CrossBorderCashWithdrawal\n"
      example: CreditCardPayment
    TransactionStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the status of an entry on the books of the account servicer. Some possible ISO 20022 compliant values are: \n Booked, Future, Information, Pending.\n"
      example: Booked
    ReversalIndicator:
      type: boolean
      description: |
        Indicates whether or not the transaction is the result of a reversal.
        Usage: This element should only be present if the entry is the result of a reversal.
        If the CreditDebitIndicator is Credit and ReversalIndicator is Yes, the original operation was a debit entry.
        If the CreditDebitIndicator is Debit and ReversalIndicator is Yes, the original operation was a credit entry.
    TransactionCharge:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ChargeName'
        amount:
          $ref: '#/components/schemas/AmountInCents'
      description: |
        Provides information on a charge included in the entry amount.
    GenericTransactionCode:
      type: object
      properties:
        codeType:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Name of the code in PascalCase form. Possible values are: DetailBAI, SummaryBAI, MT940
          example: DetailBAI
        codeName:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Code value description
          example: Incoming Wire
        code:
          maxLength: 35
          minLength: 1
          type: string
          description: Code value to identify the type of transaction.
          example: "195"
      description: Generic transaction code definition.
    TransactionInterest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/InterestName'
        amount:
          $ref: '#/components/schemas/AmountInCents'
      description: |
        Provides information on an interest included in the entry amount.
    PaymentId:
      maxLength: 36
      minLength: 1
      type: string
      description: Identification of the Payment.
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    PaymentCardTransaction:
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        merchantCategoryCode:
          $ref: '#/components/schemas/MerchantCategoryCode'
        merchantName:
          $ref: '#/components/schemas/PartyShortName'
        merchantAddress:
          $ref: '#/components/schemas/PostalAddress'
        offerId:
          $ref: '#/components/schemas/OfferId'
        offerTitle:
          $ref: '#/components/schemas/OfferTitle'
      description: |
        Information that locates and identifies a specific address, as defined by postal services.
    PaymentCardId:
      maxLength: 36
      minLength: 1
      type: string
      description: "Identification assigned by the card provider. A cardId is a unique identifier associated with a specific cardholder. Establishing the card ID is the first step. The card ID is used as the card reference. When a card is replaced, a new card ID must be requested for the new PAN.  \n  \n"
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    MerchantCategoryCode:
      pattern: "^[0-9]{4,4}"
      type: string
      description: |
        Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
      example: "482"
    PartyShortName:
      maxLength: 35
      minLength: 1
      type: string
      description: Short name or nickname by which a party is known and which is usually used to identify that party.
      example: Jane
    PostalAddress:
      type: object
      properties:
        addressType:
          type: string
          description: |
            Specifies the type of address, in PascalCase form. Possible ISO Compliant values are:  Postal, POBox, Residential, Permanent, Temporary, Business.
          example: Postal
        addressPurpose:
          type: string
          description: "Specifies the purpose of an address, in PascalCase form. Possible ISO Compliant values are: \nMailTo, \nDeliveryTo,\nBilling,\nPlaceOfOperation,\nPlaceOfRegistration.\n"
          example: Billing
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        department:
          maxLength: 70
          minLength: 1
          type: string
          description: Identification of a division of a large organisation or building.
          example: A
        subDepartment:
          maxLength: 70
          minLength: 1
          type: string
          description: Identification of a sub-division of a large organisation or building.
          example: B
        streetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a street or thoroughfare.
          example: First Street
        firstCrossStreetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a the first cross street.
        secondCrossStreetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a the second cross street.
          example: Second Street
        buildingNumber:
          maxLength: 16
          minLength: 1
          type: string
          description: Number that identifies the position of a building or house on a street.
          example: "11407"
        buildingName:
          maxLength: 35
          minLength: 1
          type: string
          description: Name of the building or house.
          example: Tall Tower
        floor:
          maxLength: 70
          minLength: 1
          type: string
          description: Floor or storey within a building.
          example: "20"
        postBox:
          maxLength: 16
          minLength: 1
          type: string
          description: "Numbered box in a post office, assigned to a person or organisation, where letters are kept until called for."
          example: MY779
        room:
          maxLength: 70
          minLength: 1
          type: string
          description: Building room number.
          example: "22"
        postCode:
          maxLength: 16
          minLength: 1
          type: string
          description: Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
          example: 97062-6884
        townName:
          maxLength: 35
          minLength: 1
          type: string
          description: "Name of a built-up area, with defined boundaries, and a local government."
          example: Tualatin
        townLocationName:
          maxLength: 35
          minLength: 1
          type: string
          description: Specific location name within the town.
          example: Clackamas
        districtName:
          maxLength: 35
          minLength: 1
          type: string
          description: Identifies a subdivision within a country sub-division.
          example: Washington
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubdivision'
        countrySubDivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        country:
          $ref: '#/components/schemas/CountryCode'
        addressLine:
          type: array
          description: "Information that locates and identifies a specific address, as defined by postal services, presented in free format text."
          items:
            maxLength: 70
            minLength: 1
            type: string
            example: "11407 Sw Amu st, Suite MY777"
      description: |
        Information that locates and identifies a specific address, as defined by postal services.
    PrimaryContactIndicator:
      type: boolean
      description: "Indicates whether the contact informacion y is primary. \n"
    CountrySubdivision:
      maxLength: 35
      minLength: 1
      type: string
      description: "Name of a country subdivision such as state, region, county."
      example: Oregon
    CountrySubdivisionCode:
      pattern: "^[A-Z]{2,2}\\-[0-9A-Z]{1,3}"
      type: string
      description: |
        Code to identify a name of a unit resulting from the division of a country, dependency, or other area of special geopolitical interest contained in ISO 3166-1, on the basis of country names obtained from the United Nations (ISO 3166-2: Country subdivision code).
      example: AR-B
    OfferId:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Card provider unique reference to the card payment offer.
      example: "101854"
    OfferTitle:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Short description of the offer
      example: Save 20%
    RemittanceInformation:
      type: object
      properties:
        remittanceNumber:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Unique and unambiguous identification of the remittance document
        documentType:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Specifies a type of financial or commercial document. Possible values are: MeteredServiceInvoice, CreditNoteRelatedToFinancialAdjustment, DebitNoteRelatedToFinancialAdjustment, CommercialInvoice, CreditNote, DebitNote, HireInvoice, SelfBilledInvoice, CommercialContract, StatementOfAccount, DispatchAdvice, BillOfLading, Voucher, AccountReceivableOpenItem, TradeServicesUtilityTransaction, PurchaseOrded
      description: |
        Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system.
    WithdrawalRequest:
      type: object
      properties:
        transactionType:
          $ref: '#/components/schemas/WithdrawalTransactionType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        check:
          $ref: '#/components/schemas/Check'
      description: |
        Debit transaction request to an account for cash, check deposits, or merchandise payments.
    WithdrawalTransactionType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of Debit Transaction: Cash
      example: Cash
    Account:
      type: object
      properties:
        iBAN:
          $ref: '#/components/schemas/IBAN'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        servicerBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountType:
          $ref: '#/components/schemas/AccountType'
        accountOwnershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        initialAmount:
          $ref: '#/components/schemas/AmountInCents'
        contract:
          $ref: '#/components/schemas/AccountContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        maturityDate:
          $ref: '#/components/schemas/Date'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        referenceAccount:
          $ref: '#/components/schemas/Id'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statementSettings:
          $ref: '#/components/schemas/StatementSettings'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        status:
          $ref: '#/components/schemas/AccountStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the account servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        closeDate:
          $ref: '#/components/schemas/Date'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/NumberOfTransactions'
        accountId:
          $ref: '#/components/schemas/AccountId'
        relatedCards:
          type: array
          description: |
            Payment cards related to the account. Debit cards, for loans or current accounts. Credit cards, for credit card accounts.
          items:
            $ref: '#/components/schemas/RelatedCard'
        standingOrders:
          type: array
          description: |
            Instructions given by an account holder to an account servicer to make regular transfers on given dates to the same beneficiary.
          items:
            $ref: '#/components/schemas/StandingOrder'
    AccountBalance:
      type: object
      properties:
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/NumberOfTransactions'
    Balance:
      type: object
      properties:
        balanceName:
          $ref: '#/components/schemas/BalanceName'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        calculationDate:
          $ref: '#/components/schemas/DateAndTime'
      description: |
        Numerical representation of the net increases and decreases in an account at a specific point in time.
    BalanceName:
      maxLength: 17
      minLength: 1
      type: string
      description: "Specifies the nature of the balance. Possible ISO 20022 compliant value names are:\n Current, \n Available, \n Pending, \n Blocked.\n"
      example: Available
    NumberOfTransactions:
      type: object
      properties:
        codeType:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Name of the code in PascalCase form. Possible values are: DetailBAI, SummaryBAI, MT940
          example: DetailBAI
        codeName:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Code value description
          example: Incoming Wire
        code:
          maxLength: 35
          minLength: 1
          type: string
          description: Code value to identify the type of transaction.
          example: "195"
        status:
          $ref: '#/components/schemas/TransactionStatus'
        number:
          type: integer
          description: Number of individual transactions.
        controlSum:
          $ref: '#/components/schemas/AmountInCents'
    RelatedCard:
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/Id'
        cardHolderName:
          $ref: '#/components/schemas/PartyName'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
    PartyName:
      maxLength: 350
      minLength: 1
      type: string
      description: Name by which a party is known and which is usually used to identify that party.
      example: Jane Birkin
    CardHolderType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the card holder type of payment card. Possible Values: Primary, Additional
      example: Primary
    StandingOrder:
      type: object
      properties:
        standingOrderId:
          $ref: '#/components/schemas/Id'
        period:
          $ref: '#/components/schemas/Period'
        orderSequence:
          type: integer
          description: |
            Specifies the sequence in which the system will execute the liquidity transfers standing order within the set.
          example: 1
        paymentInitiation:
          $ref: '#/components/schemas/PaymentInitiation'
        payment:
          $ref: '#/components/schemas/Payment'
        frequency:
          $ref: '#/components/schemas/Frequency'
        eventDescription:
          $ref: '#/components/schemas/Description'
        day:
          description: |
            $ref: '#/components/schemas/Day'
        timeOfDay:
          $ref: '#/components/schemas/HourOfTheDay'
        status:
          $ref: '#/components/schemas/StandingOrderStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        cancellationReason:
          $ref: '#/components/schemas/Description'
      description: |
        Instruction given by an account holder to an account servicer to make regular transfers on given dates to the same beneficiary.
    PaymentInitiation:
      type: object
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        identifiers:
          $ref: '#/components/schemas/PaymentIdentifiers'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
    PaymentMethod:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the means of payment that will be used to move the amount of money. Possible ISO 20022 compliant values are:  Check, CreditTransfer,TransferAdvice
      example: CreditTransfer
    PaymentType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the type of Payment. Possible values: LiquidityTransfer, On-Us, ACH, Wire    \n"
      example: On-Us
    PaymentIdentifiers:
      type: object
      properties:
        instructionIdentification:
          $ref: '#/components/schemas/InstructionIdentification'
        endToEndIdentification:
          $ref: '#/components/schemas/EndToEndIdentification'
        uETR:
          $ref: '#/components/schemas/UETR'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
      description: Set of elements used to reference a payment instruction.
    InstructionIdentification:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain.
         Usage: The transaction identification can be used for reconciliation, tracking or to link tasks relating to the transaction on the interbank level. The instructing agent has to make sure that the transaction identification is unique for a pre-agreed period.
      example: "123456789"
    EndToEndIdentification:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.

        Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
      example: "12345678912345"
    UETR:
      $ref: '#/components/schemas/Id'
    PaymentIdentification:
      type: object
      properties:
        number:
          maxLength: 35
          minLength: 1
          type: string
          description: Unique and unambiguous identification of a payment.
        identifierName:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Name of other payment identificaction. For instance,
            ISOInitiationMessageIdentifier
          example: ISOInitiationMessageIdentifier
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: Banc of California
    PaymentProcessingDetail:
      type: object
      properties:
        instructionPriority:
          $ref: '#/components/schemas/InstructionPriority'
        serviceLevel:
          $ref: '#/components/schemas/ServiceLevel'
        clearingChannel:
          $ref: '#/components/schemas/ClearingSystem'
        localInstrument:
          $ref: '#/components/schemas/LocalInstrument'
        categoryPurpose:
          $ref: '#/components/schemas/CategoryPurpose'
      description: Provides further details of the type of payment.
    InstructionPriority:
      maxLength: 35
      minLength: 1
      type: string
      description: "Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction. Possible ISO Complaiant values are: \n"
      example: "123456789"
    ServiceLevel:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies a pre-agreed service between the parties. Some ISO complaiant values from ExternalServiceLevel1Code are:
        BookTransaction, TrackedCustomerCreditTransfer, TrackedStopAndRecall, TrackedOutboundCorporateTransfer, TrackedFinancialInstitutionTransfe, NonurgentPriorityPayment, NonurgentPayment, EBAPriorityService, SameDayValue, DomesticChequeClearingAndSettlement, UrgentPayment, UrgentPaymentNetSettlement, InstantCreditTransferOrInstantDirectDebit, ServiceRequestToPay, ScheckVerarbeitungAustria, TrackedCaseManagement, TrackedInboundCustomerCreditTransfer, TrackedInstantCustomerCreditTransfer, TrackedLowValueCrossBorderCustomerCreditTransfer.
      example: BookTransaction
    ClearingSystem:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the clearing system identification. Some ISO complaiant values from ExternalCashClearingSystem1Code are:
         USFedACH, USFedNow, USFedwireFunds, ACH, EBAEuro1Step1, CanadaACSS, Albania, Austrian, NewZealand, Azerbaijan, BosniaHerzegovina, SwedenBGC, Ecuador, Barbados, Belgium, Bulgaria, Bahamas, Botswana, Finland, BankOfJapanNet, Italy, Philippines, CanadaCAD, SpainCAM, CentralBankOfArubaCSM, CentraleBankVanCuraçaoEnSintMaartenCSM, Ireland, Peru, USTCHChips,UnitedKingdom, China, CentralInteroperabilityService, ColumbiaCEDEC, ColumbiaCENIT, ColumbiaCUD, DenmarkDDK,Denmark, EBAEuro1, GermanyELS, Germany, ECB, USTCHEPN, EBAStep1, ForeignExchangeYenClearing, FasterPaymentsServices, Ghana, HongKongCHAT, HongKongFPS, Croatia, Greece, Hungary, SpainIberpayInstantPayments, DEandNLEquens, IndiaImmediatePaymentService, Jordan, Kenya, Luxemburg, SriLanka, Latvia, CanadaLVTS, LynxCanada, Singapore, SouthAfrica, MacaoRTGS, Malta, Mauritius, Namibia, Norway, NorwayNICSReal, AustraliaNPP, USNSS, NewZealandRTGS, Switzerland, AustraliaPDS, Egypt, FrancePNS, AustrianCSM, Angola, Venezuela, RomaniaEPO, RomaniaGSRS, RTGS, GermanyRTGSPlus, RTRCanada, RPSAndSEPAClearer, Chili, SwedenSEC, euroSIC, SIC, SICIP, Slovania, SpainES, Portugal, SwedenSSK, EBAClearingSTEP2, UnitedKingdomGBP, FranceFR, USTCHRealTime, Target, Thailand, Thailand-NITMX, Tanzania, Netherlands, TrinidadAndTobago, CanadaUSBE, Uganda, IndiaUnifiedPaymentsInterface, VocaLink, EBASTEP2XCT, Zengin, Zimbabwe, Zambia, Iceland, NorwayRTGS, NGInterswitch, P27RealTime, P27, UnitedKingdomUKD, SingaporeSCRIPS, RIXRTGSSverigesRiksbank
      example: ACH
    LocalInstrument:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        This element is used to specify a local clearing option and/or qualify the service or service level. CreditTransfers, ReturnedCreditTransfers, TruncatedCreditTransfers, TruncatedChecks, RevokedCreditTransfers, RevokedReturnedCreditTransfers, RevokedTruncatedChecks, RevokedTruncatedCreditTransfers, CardClearing, FedNowAccount.
      example: CreditTransfers
    CategoryPurpose:
      maxLength: 35
      minLength: 1
      description: "Specifies the high level purpose of the instruction based on a set of pre-defined categories.\nUsage: This is used by the initiating party to provide information concerning the processing of the payment. It is likely to trigger special processing by any of the agents involved in the payment chain. Some ISO complaiant values are from ExternalCategoryPurpose1Code: \n BonusPayment, CashManagementTransfer, CardBulkClearing, CreditCardPayment, TradeSettlementPayment, DebitCardPayment, Dividend, DeliverAgainstPayment, Epayment,FeeCollectionAndInterest, FeeCollection,PersontoPersonPayment, GovernmentPayment, Hedging, IrrevocableCreditCardPayment, IrrevocableDebitCardPayment, IntraCompanyPayment, Interest, LockboxTransactions, Loan, Commercial, Consumer, OtherPayment, PensionPayment, Represented, ReimbursementReceivedCreditTransfer, ReceiveAgainstPayment, SalaryPayment, Securities, SocialSecurityBenefit, SupplierPayment, TaxPayment, Trade, TreasuryPayment, ValueAddedTaxPayment, WithHolding, CashManagementSweepAccount, CashManagementTopAccount, CashManagementZeroBalanceAccount\n"
      example: SalaryPayment
    Payment:
      type: object
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        identifiers:
          $ref: '#/components/schemas/PaymentIdentifiers'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
    Day:
      maximum: 31
      type: integer
      description: Specifies the date in a month.
      example: 30
    HourOfTheDay:
      type: object
      properties:
        hour:
          type: string
          format: time-hour
          example: "12"
        timeZone:
          $ref: '#/components/schemas/TimeZone'
    TimeZone:
      maxLength: 30
      minLength: 1
      type: string
      description: |
        A time zone is an area which observes a uniform standard time for legal, commercial and social purposes. Some possible values: Pacific, Mountain, Central, Eastern, GreenwichMean
      example: Pacific
    StandingOrderStatus:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies the status of a standing order request. Possible values: Cancelled, Pending, Sent.
      example: Months
    AccountBalanceResponse:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    AccountTransactionsResponse:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        currentBalance:
          $ref: '#/components/schemas/AmountInCents'
        availableBalance:
          $ref: '#/components/schemas/AmountInCents'
        transactions:
          type: array
          description: Account Transactions
          items:
            $ref: '#/components/schemas/Transaction'
    AccountIdentifiersResponse:
      type: object
      properties:
        iBAN:
          $ref: '#/components/schemas/IBAN'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountType:
          $ref: '#/components/schemas/AccountType'
    AccountPartyResponse:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
    AccountOwnerResponse:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
    AccountPaymentCardResponse:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCard'
    PaymentCard:
      type: object
      properties:
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productCode:
          $ref: '#/components/schemas/CardProductCode'
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolder:
          $ref: '#/components/schemas/Id'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        nameOnCard:
          $ref: '#/components/schemas/PartyName'
        referenceAccount:
          $ref: '#/components/schemas/AccountId'
        relatedAccounts:
          type: array
          description: |
            Account that provides the payment card transactions. The account is the funding source for the card. Could be a cash or loan account linked to the debit card or a credit card account. A card can have one or many accounts.
          items:
            $ref: '#/components/schemas/CardRelatedAccount'
        startDate:
          $ref: '#/components/schemas/YearMonth'
        expiryDate:
          $ref: '#/components/schemas/YearMonth'
        securityCode:
          maxLength: 35
          type: string
          description: |
            Security code written on the card, sometimes called card security code (CSC).
          example: "103"
        pin:
          maxLength: 35
          type: string
          description: |
            PIN is the 4 digit security code that is used to authenticate the user and allow them access to the associated accounts of the card.
          example: "1031"
        sequenceNumber:
          maxLength: 20
          type: string
          description: |
            Identifies a card inside a set of cards with the same number (or PAN).
          example: "1"
        brand:
          maxLength: 35
          type: string
          description: |
            Brand name of the card.
          example: Visa
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        status:
          $ref: '#/components/schemas/CardStatus'
        statusDate:
          $ref: '#/components/schemas/DateAndTime'
        statusReason:
          $ref: '#/components/schemas/Description'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        productName:
          $ref: '#/components/schemas/CardProductName'
        creditCardStatement:
          $ref: '#/components/schemas/CreditCardStatement'
        offers:
          type: array
          description: |
            Card provider offers assigned to the PAN.
          items:
            $ref: '#/components/schemas/CardProviderOffer'
    PaymentCardRequest:
      type: object
      properties:
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productCode:
          $ref: '#/components/schemas/CardProductCode'
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolder:
          $ref: '#/components/schemas/Id'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        nameOnCard:
          $ref: '#/components/schemas/PartyName'
        referenceAccount:
          $ref: '#/components/schemas/AccountId'
        relatedAccounts:
          type: array
          description: |
            Account that provides the payment card transactions. The account is the funding source for the card. Could be a cash or loan account linked to the debit card or a credit card account. A card can have one or many accounts.
          items:
            $ref: '#/components/schemas/CardRelatedAccount'
        startDate:
          $ref: '#/components/schemas/YearMonth'
        expiryDate:
          $ref: '#/components/schemas/YearMonth'
        securityCode:
          maxLength: 35
          type: string
          description: |
            Security code written on the card, sometimes called card security code (CSC).
          example: "103"
        pin:
          maxLength: 35
          type: string
          description: |
            PIN is the 4 digit security code that is used to authenticate the user and allow them access to the associated accounts of the card.
          example: "1031"
        sequenceNumber:
          maxLength: 20
          type: string
          description: |
            Identifies a card inside a set of cards with the same number (or PAN).
          example: "1"
        brand:
          maxLength: 35
          type: string
          description: |
            Brand name of the card.
          example: Visa
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        status:
          $ref: '#/components/schemas/CardStatus'
        statusDate:
          $ref: '#/components/schemas/DateAndTime'
        statusReason:
          $ref: '#/components/schemas/Description'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    CardFundingSourceType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the funding source type of payment card. Possible Values: Credit, Debit, Prepaid, Charge, DeferredDebit
      example: Credit
    CardProductCode:
      maxLength: 4
      minLength: 1
      type: string
      description: |
        Specifies the product code of payment card.
      example: F
    DigitalCardIndicator:
      type: boolean
      description: "Indicates whether the payment card is digital or physical.    \n"
    PrimaryAccountNumber:
      maxLength: 19
      minLength: 1
      type: string
      description: |
        Primary Account Number (PAN) of the card.
      example: "1234567890123456789"
    CardRelatedAccount:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
    YearMonth:
      maxLength: 7
      pattern: "^\\d{4}-([0]\\d|1[0-2])$"
      type: string
      description: |
        Month within a particular calendar year represented by YYYY-MM (ISO 8601).
      example: 2022-12
    CardStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the status of payment card. Some possible values are:
        Active, Blocked, Closed, Expedite, Expired, Inactive, Issued, Lost, Restricted, Stolen, Suspended.
      example: Active
    CardProductName:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the product name of payment card.
      example: Visa Classic
    CreditCardStatement:
      type: object
      properties:
        statementBalance:
          $ref: '#/components/schemas/AmountInCents'
        paymentClosingDate:
          $ref: '#/components/schemas/Date'
        paymentDueDate:
          $ref: '#/components/schemas/Date'
        minimumPayment:
          $ref: '#/components/schemas/AmountInCents'
        lastPaymentDate:
          $ref: '#/components/schemas/Date'
        lastPaymentAmount:
          $ref: '#/components/schemas/AmountInCents'
      description: Credit Card statement details.
    CardProviderOffer:
      type: object
      properties:
        offerId:
          $ref: '#/components/schemas/OfferId'
        offerTitle:
          $ref: '#/components/schemas/OfferTitle'
      description: Card Payment Offer.
    AccountStandingOrderResponse:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        standingOrders:
          type: array
          items:
            $ref: '#/components/schemas/StandingOrder'
    StandingOrderCancellationRequest:
      type: object
      properties:
        cancellationReason:
          $ref: '#/components/schemas/Description'
      description: |
        Request the cancellation of an existing standing order.
    PhoneNumber:
      pattern: "^\\+[0-9]{1,3}-[0-9()+\\-]{1,30}$"
      type: string
      description: The collection of information which identifies a specific phone or FAX number as defined by telecom services.
      example: +1-415-731359
    Person:
      type: object
      properties:
        uSDocumentedIndicator:
          type: boolean
        genericIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        settings:
          $ref: '#/components/schemas/PartySystemSettings'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        signature:
          $ref: '#/components/schemas/DigitalSignature'
        contact:
          $ref: '#/components/schemas/PersonContactDetails'
        headOfHousehold:
          type: boolean
          description: Indicates whether the person pay the costs of supporting a house.
          example: true
        civilStatus:
          $ref: '#/components/schemas/CivilStatus'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        gender:
          $ref: '#/components/schemas/Gender'
        profession:
          $ref: '#/components/schemas/Profession'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        residentialStatus:
          $ref: '#/components/schemas/ResidentialStatus'
        minorIndicator:
          $ref: '#/components/schemas/MinorIndicator'
        citizenships:
          type: array
          items:
            $ref: '#/components/schemas/Citizenship'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
        profile:
          $ref: '#/components/schemas/PersonProfile'
        partySettings:
          $ref: '#/components/schemas/PartySystemSettings'
        personId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/InstructionStatus'
    PersonRequest:
      type: object
      properties:
        uSDocumentedIndicator:
          type: boolean
        genericIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        settings:
          $ref: '#/components/schemas/PartySystemSettings'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        signature:
          $ref: '#/components/schemas/DigitalSignature'
        contact:
          $ref: '#/components/schemas/PersonContactDetails'
        headOfHousehold:
          type: boolean
          description: Indicates whether the person pay the costs of supporting a house.
          example: true
        civilStatus:
          $ref: '#/components/schemas/CivilStatus'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        gender:
          $ref: '#/components/schemas/Gender'
        profession:
          $ref: '#/components/schemas/Profession'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        residentialStatus:
          $ref: '#/components/schemas/ResidentialStatus'
        minorIndicator:
          $ref: '#/components/schemas/MinorIndicator'
        citizenships:
          type: array
          items:
            $ref: '#/components/schemas/Citizenship'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
        profile:
          $ref: '#/components/schemas/PersonProfile'
        partySettings:
          $ref: '#/components/schemas/PartySystemSettings'
    PersonIdentifiers:
      type: object
      properties:
        uSDocumentedIndicator:
          type: boolean
        genericIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
    PersonIdentification:
      type: object
      properties:
        number:
          maxLength: 35
          minLength: 1
          type: string
          description: Unique and unambiguous identification of a person.
          example: 123-45-6789
        schemeName:
          maxLength: 35
          minLength: 1
          type: string
          description: "Name of the identification scheme in PascalCase form. Possible ISO Compliant values are: \nAlienRegistrationNumber\nPassportNumber\nCustomerIdentificationNumber\nDriversLicenseNumber\nEmployeeIdentificationNumber\nNationalIdentityNumber\nSocialSecurityNumber\nTelephoneNumber\nTaxIdentificationNumber\nPersonCommercialIdentification\n"
          example: SocialSecurityNumber
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: US
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
    Party:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        settings:
          $ref: '#/components/schemas/PartySystemSettings'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
    RelatedParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          $ref: '#/components/schemas/PartyName'
        partyRelationType:
          $ref: '#/components/schemas/PartyRelationType'
        ownershipPercentage:
          $ref: '#/components/schemas/Percentage'
    PartyRelationType:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Type of relation between parties.  Some ISO 20022 compliant values for Organizations are: RepresentativeOfficer, ResponsibleParty, Owner, PrimaryContact, SecondaryContact. For Trusts: Trustor, Trustee.  Between organizations: ParentOrganization, Branch. Between persons (organizations) and internal entities: PrimaryServicerOfficer, SecondaryServicerOfficer. Between financial institutions: AffiliateFinancialInstitution, HoldingCompany.
      example: Owner
    TaxPartyInformation:
      type: object
      properties:
        tIN:
          type: string
          description: |
            A Taxpayer Identification Number
          example: 778-62-8144
        taxIdType:
          maxLength: 30
          minLength: 1
          type: string
          description: |
            Identifies what type of tax ID is in the TIN field. Possible Values: SocialSecurityNumber (SSN),  EmployerIdentificationNumber (EIN), IndividualTaxpayerIdentificationNumber (ITIN), TaxpayerIdentificationNumber forPendingAdoptions (ATIN), Preparer TaxpayerIdentificationNumber (PTIN), ForeignTaxID
          example: SSN
        reportingIndicator:
          type: boolean
          description: "Whether the financial income for this party should be reported to the U.S. government (IRS) when related to an account in a way which requires reporting (for example, primary, joint ownership). Defaults to true if not specified. "
        tinStatus:
          type: string
          description: |
            'The tax ID has been verified by the IRS as valid. Possible values: Valid, NotValid, NotVerified, IRSWarning, NotVerified, TINApplied.
          example: Valid
        taxStatus:
          type: string
          description: |
            Exempt, ExemptExpired, VoluntaryWithholding, Chapter3, Chapter4.
          example: Valid
        forms:
          type: array
          items:
            $ref: '#/components/schemas/TaxForm'
        regulations:
          type: array
          items:
            $ref: '#/components/schemas/TaxRegulation'
        withholdings:
          type: array
          items:
            $ref: '#/components/schemas/WithholdingTax'
        nRAIndicator:
          type: boolean
          description: |
            Indicates whether the party is a Non-residen alien.
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubdivision'
        countrySubDivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        country:
          $ref: '#/components/schemas/CountryCode'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
      description: |
        Taxation parameters which apply to an individual person or to an organization.
    TaxForm:
      type: object
      properties:
        formName:
          maxLength: 10
          minLength: 1
          type: string
          example: W-9
        cerfiticationDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: |
        Form requested by the tax payer. Possible Values: W-8BEN (for individuals), W-8BEN-E (for entities), W-8ECI, W-8EXP, W-8IMY, W-9.
    TaxRegulation:
      type: object
      properties:
        name:
          maxLength: 35
          minLength: 1
          type: string
          example: Chapter4
        section:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            String that represent the section number.
          example: "1471"
      description: |
        Tax regulations that are deemed to comply by the tax payer. Possible values: Chapter3, Chapter4
    WithholdingTax:
      type: object
      properties:
        withholdingTaxType:
          $ref: '#/components/schemas/WithholdingTaxType'
        withholdingRate:
          $ref: '#/components/schemas/Percentage'
        withholdingAmount:
          $ref: '#/components/schemas/AmountInCents'
      description: |
        Withholding is a tax that is levied on income, at an established tax rate
    WithholdingTaxType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of Withholding. Possible Values:
        ForeignAccountTaxComplianceAct, NonResidentAlienTax, BackUpWithholding, VoluntaryWithholding, Federal, State, Local, W-4.
      example: NonResidentAlienTax
    PowerOfAttorney:
      type: object
      properties:
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
        fromDateTime:
          $ref: '#/components/schemas/Date'
        upToDateTime:
          $ref: '#/components/schemas/Date'
        authorizedPerson:
          $ref: '#/components/schemas/Id'
        authorizedAccount:
          $ref: '#/components/schemas/AccountId'
    PartySystemSettings:
      type: object
      properties:
        communicationChannels:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationChannel'
      description: System configurations at Party level.
    CommunicationChannel:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannelName'
        channelIdentification:
          $ref: '#/components/schemas/CommunicationChannelIdentification'
        codeWord:
          type: string
          description: |
            A party is asked for a codeword to verify their identity trought a communication channel
        alertIndicator:
          description: |
            Indicates whether the channel is used for enterprise alerts
      description: |
        Channel used to communicate with a party
    CommunicationChannelIdentification:
      maxLength: 128
      minLength: 1
      type: string
      description: Communication value such as phone number or email address.
      example: 011-02010020202
    PlaceAndDateOfBirth:
      type: object
      properties:
        countrySubdivision:
          maxLength: 35
          minLength: 1
          type: string
          example: Oregon
        townName:
          maxLength: 35
          minLength: 1
          type: string
          example: Tualatin
        country:
          $ref: '#/components/schemas/CountryCode'
        birthDate:
          $ref: '#/components/schemas/Date'
    DigitalSignature:
      maxLength: 13654
      minLength: 1
      type: string
      description: |
        Binary data of 10K maximum.
      format: byte
    PersonContactDetails:
      type: object
      properties:
        namePrefix:
          maxLength: 35
          minLength: 1
          type: string
          description: "Specifies the terms used to formally address a person, in PascalCase form. Possible ISO compliant values are:  \nDoctor, Madam, Miss, Mister, GenderNeutral\n"
        name:
          $ref: '#/components/schemas/PartyName'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        department:
          maxLength: 35
          minLength: 1
          type: string
          description: Identification of a division of a large organisation or building.
          example: Sales
        otherContactMethods:
          type: array
          items:
            $ref: '#/components/schemas/GenericContact'
        preferredMethod:
          maxLength: 35
          minLength: 1
          type: string
          description: "Preferred method used to reach the contact, in PascalCase form. Possible ISO compliant values are:  \nLetter, Email, Phone, Fax, MobileOrCellPhone.\n"
          example: Email
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
      description: Specifies the contact details of a person.
    Phone:
      type: object
      properties:
        number:
          $ref: '#/components/schemas/PhoneNumber'
        extension:
          maxLength: 5
          type: string
          description: Phone Number Extension.
        phoneType:
          maxLength: 35
          minLength: 1
          type: string
          description: "Type of phone address. Possible values are:  \nMobile, Landline, Fax.\n"
        phonePurpose:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Purpose of the phone address. Possible values are:   Business, Personal.
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        preferredHourOfDay:
          $ref: '#/components/schemas/HourOfTheDay'
      description: Collection of information that identifies a phone address.
    Email:
      type: object
      properties:
        emailAddress:
          maxLength: 2048
          minLength: 1
          type: string
          description: Address for electronic mail (e-mail).
        emailPurpose:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Purpose of the e-mail address. Possible values:   Marketing, Statements.
          example: Statements
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
      description: Collection of information that identifies an electronic mail address.
    JobTitle:
      maxLength: 35
      minLength: 1
      type: string
      description: Title of the function in an organization.
      example: Head of Documentation
    GenericContact:
      type: object
      properties:
        channelType:
          $ref: '#/components/schemas/CommunicationChannelName'
        identification:
          $ref: '#/components/schemas/CommunicationChannelIdentification'
      description: Communication device number or electronic address used for communication.
    PreferredLanguage:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Language of the contact person. Names according to the language list provided in the ISO 639-1 codes. Some possible values: Chinese, Spanish, French, English, Japanese, Italian, German.
      example: English
    CivilStatus:
      maxLength: 17
      minLength: 1
      type: string
      description: |
        Specifies the civil status of a person. Possible ISO 20022 compliant values names are:
        Single,
        Married,
        LegallyDivorced,
        Divorced,
        Widow,
        StableUnion
      example: Single
    StructuredName:
      type: object
      properties:
        firstName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person given first name.
          example: Mary
        middleName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person given middle name.
          example: Joe
        lastName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person surname.
          example: Smith
        suffix:
          maxLength: 20
          minLength: 1
          type: string
          description: |
            A name suffix in the Western English-Language naming tradition, follows a person's full name and provides additional information about the person. Possible Values:  PhD, Snr, Jnr.
          example: PhD
        prefix:
          maxLength: 20
          minLength: 1
          type: string
          description: |
            Name prefixes are typically Dr., Mr., Mrs., Ms.
          example: Dr.
      description: |
        The structured name is used to initialize the person name with the format <firstName middleName lastName>
    Gender:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies the gender of the person. Possible Values: Female, Male, NonBinary
      example: Female
    Profession:
      maxLength: 35
      type: string
      description: |
        Professional Designation or name of the occupation of a person.
      example: Artist
    ResidentialStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Residential status of an individual. Possible values: Permanent, Resident, NonResident, Rents, Owns
      example: Permanent
    MinorIndicator:
      type: boolean
      description: |
        Indicates whether the person is a legal minor.
    Citizenship:
      type: object
      properties:
        countrySubdivision:
          maxLength: 35
          minLength: 1
          type: string
          example: Oregon
        townName:
          maxLength: 35
          minLength: 1
          type: string
          example: Tualatin
        country:
          $ref: '#/components/schemas/CountryCode'
    PersonProfile:
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: "Code used for reporting to the credit bureaus. This code is used to report the trade line of a credit account to the credit bureau agencies. \n"
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        sourceOfWealth:
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: |
            Indicates the political affiliation of the Party. Possible values could be: Democrat, Independent, Republican.
        lastContactDate:
          $ref: '#/components/schemas/Date'
        lastContactChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
        customerConductClassification:
          $ref: '#/components/schemas/CustomerConductClassification'
        familyMedicalInsuranceIndicator:
          type: boolean
          description: Indicates if the person has family medical insurance coverage available.
          example: true
        salaryRange:
          $ref: '#/components/schemas/AmountRange'
        employmentStatus:
          $ref: '#/components/schemas/EmploymentStatus'
        vIPStatus:
          $ref: '#/components/schemas/VIPStatus'
        employments:
          type: array
          items:
            $ref: '#/components/schemas/Employment'
        regulation0:
          $ref: '#/components/schemas/Regulation0'
        anualIncome:
          $ref: '#/components/schemas/AmountInCents'
    PartyProfile:
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: "Code used for reporting to the credit bureaus. This code is used to report the trade line of a credit account to the credit bureau agencies. \n"
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        sourceOfWealth:
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: |
            Indicates the political affiliation of the Party. Possible values could be: Democrat, Independent, Republican.
        lastContactDate:
          $ref: '#/components/schemas/Date'
        lastContactChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
    RiskLevel:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the customer’s money laundering risk. Possible values: High, Medium, Low.
      example: Permanent
    CreditReview:
      type: object
      properties:
        frequency:
          $ref: '#/components/schemas/Frequency'
        lastReviewDate:
          $ref: '#/components/schemas/DateAndTime'
        nextReviewDate:
          $ref: '#/components/schemas/DateAndTime'
        creditQuality:
          $ref: '#/components/schemas/CreditQuality'
        creditScore:
          type: number
      description: |
        A credit review is a periodic assessment of an individual’s or businesses' credit profile.
    CreditQuality:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Credit quality rating of an issuer or financial obligation. Possible Values: DefaultImminent, ExtremelySpeculative, HighGrade, HighlySpeculative, InDefault, LowerMediumGrade, NonInvestmentGradeSpeculative, Prime, SubstantialRisk, UpperMediumGrade
      example: UpperMediumGrade
    MoneyLaunderingCheck:
      type: string
      description: |
        Specifies the status of money laundering identification procedures. Possible Values: PassedNotChecked, ExemptBelowLimit, ClientMoneyTypeExempt, AuthorizedCredit, PostalOrElectronicPaymentExempt
      example: AuthorizedCredit
    KnowYourCustomerCheckType:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies the type of Know Your Customer (KYC) or anti-money laundering due diligence to which the investor has been subjected. Possible Values: Ordinary, Simple, Enhanced.
      example: Ordinary
    LostCustomerReason:
      maxLength: 35
      minLength: 1
      type: string
      description: "Possible values are: \n Competition, Deceased, Dissatisfied, Moved\n"
      example: Deceased
    CustomerConductClassification:
      maxLength: 35
      minLength: 1
      type: string
      description: "Assessment of the customer’s behaviour at the time of the account opening application. Possible Values: Standard, NonStandard, Reluctant. \n"
    AmountRange:
      type: object
      properties:
        minAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        maxAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
      description: |
        Range an amount
    EmploymentStatus:
      type: string
      description: |
        Represents available individual employment status. Possible Values: Contract, Employed, Homemaker, Retired, SelfEmployed, Student, Temporary, Unemployed.
    VIPStatus:
      type: string
      description: |
        Very Important People Program Status. Possible Values: Novice, Pro, Elite
      example: Elite
    Employment:
      type: object
      properties:
        employingPartyName:
          $ref: '#/components/schemas/PartyName'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        employeeTerminationIndicator:
          type: boolean
          example: false
        lengthOfEmployment:
          $ref: '#/components/schemas/TemporalDuration'
        endDate:
          $ref: '#/components/schemas/Date'
        place:
          $ref: '#/components/schemas/Place'
    Regulation0:
      type: object
      properties:
        insider:
          $ref: '#/components/schemas/InsiderType'
        familyRelationship:
          $ref: '#/components/schemas/PartyRelationType'
        institutionRelationship:
          $ref: '#/components/schemas/PartyRelationType'
      description: |
        Regulation O is a Federal Reserve regulation that places limits and stipulations on the credit extensions a member bank can offer to its executive officers, principal shareholders, and directors.
    InsiderType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Director, Employee, Officer, PrincipalShareholder, Shareholder, Executive.
      example: Director
    InstructionStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Details about the processing of a request on party reference data (create or update). Possible ISO compliant values are: Rejected, Completed, Queued.
      example: Queued
    PersonAccountResponse:
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    PersonCardResponse:
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCard'
    Organization:
      type: object
      properties:
        bIC:
          $ref: '#/components/schemas/BIC'
        lEI:
          $ref: '#/components/schemas/LEI'
        genericIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        settings:
          $ref: '#/components/schemas/PartySystemSettings'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        organizationType:
          $ref: '#/components/schemas/OrganizationLegalStructure'
        organizationPurpose:
          $ref: '#/components/schemas/Description'
        legalName:
          $ref: '#/components/schemas/PartyShortName'
        tradingName:
          $ref: '#/components/schemas/PartyShortName'
        registrationDate:
          $ref: '#/components/schemas/Date'
        establishmentDate:
          $ref: '#/components/schemas/Date'
        entityExpirationDate:
          $ref: '#/components/schemas/Date'
        merchantCategory:
          $ref: '#/components/schemas/MerchantCategoryCode'
        sector:
          $ref: '#/components/schemas/OrganizationSector'
        organizationProfile:
          $ref: '#/components/schemas/OrganizationProfile'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          description: Business e-mails
          items:
            $ref: '#/components/schemas/Email'
        webPage:
          $ref: '#/components/schemas/URL'
        logo:
          $ref: '#/components/schemas/ComercialLogo'
        organizationId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/InstructionStatus'
    OrganizationRequest:
      type: object
      properties:
        bIC:
          $ref: '#/components/schemas/BIC'
        lEI:
          $ref: '#/components/schemas/LEI'
        genericIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        settings:
          $ref: '#/components/schemas/PartySystemSettings'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
        organizationType:
          $ref: '#/components/schemas/OrganizationLegalStructure'
        organizationPurpose:
          $ref: '#/components/schemas/Description'
        legalName:
          $ref: '#/components/schemas/PartyShortName'
        tradingName:
          $ref: '#/components/schemas/PartyShortName'
        registrationDate:
          $ref: '#/components/schemas/Date'
        establishmentDate:
          $ref: '#/components/schemas/Date'
        entityExpirationDate:
          $ref: '#/components/schemas/Date'
        merchantCategory:
          $ref: '#/components/schemas/MerchantCategoryCode'
        sector:
          $ref: '#/components/schemas/OrganizationSector'
        organizationProfile:
          $ref: '#/components/schemas/OrganizationProfile'
        phones:
          type: array
          description: Business phone numbers
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          description: Business e-mails
          items:
            $ref: '#/components/schemas/Email'
        webPage:
          $ref: '#/components/schemas/URL'
        logo:
          $ref: '#/components/schemas/ComercialLogo'
    OrganizationIdentifiers:
      type: object
      properties:
        bIC:
          $ref: '#/components/schemas/BIC'
        lEI:
          $ref: '#/components/schemas/LEI'
        genericIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
    BIC:
      maxLength: 36
      minLength: 1
      pattern: "^[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}$"
      type: string
      description: |
        Business identification code of the organization. Code allocated to a financial or non-financial institution by the ISO 9362 Registration Authority, as described in ISO 9362: 2014 - "Banking - Banking telecommunication messages - Business identifier code (BIC)".
      example: AAAABBCCXXX
    LEI:
      maxLength: 36
      minLength: 1
      pattern: "^[A-Z0-9]{18,18}[0-9]{2,2}$"
      type: string
      description: |
        Legal Entity Identifier is a code allocated to a party as described in ISO 17442 "Financial Services - Legal Entity Identifier (LEI)".
      example: 2ZCNRR8UK83OBTEK2170
    OrganizationIdentification:
      type: object
      properties:
        number:
          maxLength: 35
          minLength: 1
          type: string
          description: Unique and unambiguous identification of an organization.
          example: 123-45-6789
        schemeName:
          maxLength: 35
          minLength: 1
          type: string
          description: "Name of the identification scheme, in PascalCase form. Possible ISO compliant values are: \nBankPartyIdentification\nCentralBankIdentificationNumber\nClearingIdentificationNumber\nCertificateOfIncorporationNumber\nCountryIdentificationCode\nCustomerNumber\nDataUniversalNumberingSystem\nEmployerIdentificationNumber\nGS1GLNIdentifier\nSIREN\nSIRET\nTaxIdentificationNumber\nBusinessDomainIdentifier\nBusinessOtherIdentification\nEmployerIdentificationNumber\n"
          example: TaxIdentificationNumber
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: UnitedStates
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: Unique and unambiguous way to identify an organisation.
    OrganizationLegalStructure:
      type: string
      description: |
        Specifies the legal standing of the organization. Possible values are: Government, FinancialInstitution SoleProprietorship, Llc, Partnership, Corporation, NotForProfit, Club, Corporation, Individual, Supranational, Sovereign, Municipal, Province, State, County, National, ExemptionTrust, LivingTrust, EmployeeTrust, RevocableTrust, IrrovocableTrust, NakedTrust, CliffordTrust
      example: Corporation
    OrganizationSector:
      type: string
      description: |
        A sector is an area of the economy in which businesses share the same or related business activity, product, or service. Energy, Materials, Industrials, ConsumerDiscretionary, ConsumerStaples, HealthCare, Financials, InformationTechnology, TelecommunicationServices, Utilities, RealEstate.
    OrganizationProfile:
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: "Code used for reporting to the credit bureaus. This code is used to report the trade line of a credit account to the credit bureau agencies. \n"
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        sourceOfWealth:
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: |
            Indicates the political affiliation of the Party. Possible values could be: Democrat, Independent, Republican.
        lastContactDate:
          $ref: '#/components/schemas/Date'
        lastContactChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
        numberOfEmployees:
          type: integer
          description: Number of employees of the corporation.
          example: 100
        anualSales:
          $ref: '#/components/schemas/AmountInCents'
        services:
          $ref: '#/components/schemas/Description'
        goods:
          $ref: '#/components/schemas/Description'
        serviceOrGoodsLocations:
          type: array
          description: Places where the goods and services are sold.
          items:
            $ref: '#/components/schemas/Place'
    URL:
      pattern: "ˆ[(http(s)?):\\/\\/(www\\.)?a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)"
      type: string
      description: The address of a web page.
    ComercialLogo:
      maxLength: 10240
      minLength: 1
      type: string
      description: "Commercial logo of the organization. 10K Binary Data. \n"
      format: byte
    OrganizationAccountResponse:
      type: object
      properties:
        organizationId:
          $ref: '#/components/schemas/Id'
        organizationName:
          $ref: '#/components/schemas/PartyName'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    Product:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/Id'
        name:
          maxLength: 35
          minLength: 1
          type: string
        description:
          $ref: '#/components/schemas/Description'
        productType:
          maxLength: 35
          minLength: 1
          type: string
        productSubType:
          maxLength: 35
          minLength: 1
          type: string
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    CardRelatedAccountResponse:
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/Id'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productName:
          $ref: '#/components/schemas/CardProductName'
        productCode:
          $ref: '#/components/schemas/CardProductCode'
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        accounts:
          type: array
          description: Card Related Accounts
          items:
            $ref: '#/components/schemas/CardRelatedAccount'
    LoanRequest:
      type: object
      properties:
        servicerBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        loanType:
          $ref: '#/components/schemas/LoanType'
        accountOwnershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        contract:
          $ref: '#/components/schemas/LoanContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statmentSettings:
          $ref: '#/components/schemas/StatementSettings'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
      description: |
        Request of an amount of money in exchange for future repayment of the principal amount along with interest or other finance charges.
    LoanType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Type of the account. Some possible BIAN compliant values are: \n Personal,\n Consumer,  \n Corporate, \n Lease, \n Syndicated, \n Mortgage,\n Conforming,\n Merchandising,\n LinesOfCredit,\n RevolvingCredit.\n"
      example: Personal
    LoanContract:
      type: object
      properties:
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          $ref: '#/components/schemas/Date'
        issueDate:
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 35
          minLength: 1
          type: string
          description: Specifies the function of the document.
        fromDateTime:
          $ref: '#/components/schemas/Date'
        upToDateTime:
          $ref: '#/components/schemas/Date'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        borrower:
          $ref: '#/components/schemas/Id'
        lender:
          $ref: '#/components/schemas/Id'
        maturityDate:
          $ref: '#/components/schemas/Date'
        masterAgreement:
          $ref: '#/components/schemas/Document'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        tranches:
          type: array
          description: |
            Provides details on the tranches defined for the loan contract.
          items:
            $ref: '#/components/schemas/LoanContractTranche'
        term:
          $ref: '#/components/schemas/TemporalDuration'
        paymentSchedule:
          type: array
          description: |
            Schedule of the principal payments and interests defined for the loan contract.
          items:
            $ref: '#/components/schemas/RepaymentSchedule'
        collaterals:
          type: array
          items:
            $ref: '#/components/schemas/Collateral'
        syndicate:
          type: array
          description: |
            Loan offered by a group of lenders (called a syndicate).
          items:
            $ref: '#/components/schemas/SyndicatedLoan'
        intraCompanyLoanIndicator:
          type: boolean
          description: Indicates whether the loan is an intra-company loan.
          example: false
    LoanContractTranche:
      type: object
      properties:
        sequenceNumber:
          maxLength: 20
          type: string
          description: |
            Unique sequence number of the tranche.
          example: "1"
        expectedDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        duration:
          $ref: '#/components/schemas/TemporalDuration'
      description: |
        Provides details of a tranche defined for the loan contract.
    RepaymentSchedule:
      type: object
      properties:
        repaymentScheduleId:
          $ref: '#/components/schemas/Id'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        expectedDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        repaymentType:
          $ref: '#/components/schemas/LoanPaymentType'
      description: |
        An amount that must be paid no sooner than the expected payment date and no later than the due date.
    LoanPaymentType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Possible values are: \n Interest,\n Principal.\n"
      example: Principal
    Collateral:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        collateralType:
          $ref: '#/components/schemas/CollateralType'
        contract:
          $ref: '#/components/schemas/Agreement'
      description: |
        Assets pledged by a debtor to secure a loan or an exposure and subject to seizure in the event of default.
    CollateralType:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the type of collateral. Some possible values are:  LetterOfCredit, Cash, Securities, PhysicalEntities, Insurance, StockCertificate, Bond, BankGuarantee, Commodity, Automobile, IndustrialVehicle, CommercialTruck, RailVehicle, NauticalCommercialVehicle, NauticalLeisureVehicle, Aeroplane, MachineTool, IndustrialEquipment, OfficeEquipment, ITEquipment, MedicalEquipment, EnergyRelatedEquipment, CommercialBuilding, ResidentialBuilding. IndustrialBuilding, OtherVehicle, OtherEquipment, OtherRealEstate, OtherGoodsOrInventory, Guarantee, OtherFinancialAsset, MixedCategories.
    SyndicatedLoan:
      type: object
      properties:
        lenderId:
          $ref: '#/components/schemas/Id'
        lenderType:
          $ref: '#/components/schemas/PartyType'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        share:
          $ref: '#/components/schemas/Percentage'
      description: |
        Loan offered by a group of lenders (called a syndicate) who work together to lend an amount of money to a single borrower.
    Loan:
      type: object
      properties:
        iBAN:
          $ref: '#/components/schemas/IBAN'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        servicerBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        loanType:
          $ref: '#/components/schemas/LoanType'
        accountOwnershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        contract:
          $ref: '#/components/schemas/LoanContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statmentSettings:
          $ref: '#/components/schemas/StatementSettings'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        status:
          $ref: '#/components/schemas/LoanStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the loan servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        fundedDate:
          $ref: '#/components/schemas/Date'
        disbursalDate:
          $ref: '#/components/schemas/Date'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/NumberOfTransactions'
        accountId:
          $ref: '#/components/schemas/AccountId'
        relatedCards:
          type: array
          description: |
            Payment cards related to the account. Debit cards, for loans or current accounts. Credit cards, for credit card accounts.
          items:
            $ref: '#/components/schemas/RelatedCard'
        principalAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        accruedCapitalisationAmount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        nextPayment:
          $ref: '#/components/schemas/RepaymentSchedule'
        lastPayment:
          $ref: '#/components/schemas/Repayment'
    LoanDetailedStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/LoanStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        substatus:
          maxLength: 35
          minLength: 1
          type: string
          description: Status defined by the loan servicer.
        openDate:
          $ref: '#/components/schemas/Date'
        fundedDate:
          $ref: '#/components/schemas/Date'
        disbursalDate:
          $ref: '#/components/schemas/Date'
      description: Specifies the current state of a loan.
    LoanStatus:
      maxLength: 17
      minLength: 1
      type: string
      description: "Specifies the current state of an account. Possible  values names are:\n Pending, \n Form,\n Denied, \n Review,\n Approve,\n Withdrawn,\n Disable,\n Funded,\n Deleted\n"
      example: Withdrawn
    Repayment:
      type: object
      properties:
        repaymentScheduleId:
          $ref: '#/components/schemas/Id'
        amount:
          $ref: '#/components/schemas/PositiveAmountInCents'
        expectedDate:
          $ref: '#/components/schemas/Date'
        dueDate:
          $ref: '#/components/schemas/Date'
        repaymentType:
          $ref: '#/components/schemas/LoanPaymentType'
        paymentDate:
          $ref: '#/components/schemas/Date'
    LoanBalanceResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    LoanTransactionsResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        loanType:
          $ref: '#/components/schemas/LoanType'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        currentBalance:
          $ref: '#/components/schemas/AmountInCents'
        availableBalance:
          $ref: '#/components/schemas/AmountInCents'
        transactions:
          type: array
          description: Loan Transactions
          items:
            $ref: '#/components/schemas/Transaction'
    LoanIdentifiersResponse:
      type: object
      properties:
        iBAN:
          $ref: '#/components/schemas/IBAN'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        loanId:
          $ref: '#/components/schemas/AccountId'
        loanType:
          $ref: '#/components/schemas/LoanType'
    LoanPartyResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
    LoanPaymentCardResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCard'
    CreditTransferInitiation:
      type: object
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        identifiers:
          $ref: '#/components/schemas/PaymentIdentifiers'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        exchangeDetail:
          $ref: '#/components/schemas/Exchange'
        checkDetail:
          $ref: '#/components/schemas/Check'
        valueDate:
          $ref: '#/components/schemas/Date'
        creditor:
          $ref: '#/components/schemas/PartyIdentification'
    PartyIdentification:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Party'
        postalAddress:
          $ref: '#/components/schemas/AccountIdentifiers'
        agent:
          $ref: '#/components/schemas/FinancialInstitution'
        bIC:
          $ref: '#/components/schemas/BIC'
        lEI:
          $ref: '#/components/schemas/LEI'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        contact:
          $ref: '#/components/schemas/PersonContactDetails'
        genericIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/PartyGenericIdentification'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
    PartyGenericIdentification:
      type: object
      properties:
        number:
          maxLength: 35
          minLength: 1
          type: string
          description: Unique and unambiguous identification of an organization.
          example: 123-45-6789
        schemeName:
          $ref: '#/components/schemas/PartySchemeName'
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: UnitedStates
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: Unique and unambiguous way to identify a party.
    PartySchemeName:
      maxLength: 35
      minLength: 1
      type: string
      description: "Name of the identification scheme, in PascalCase form. Possible ISO compliant values are: \nBankPartyIdentification\nCentralBankIdentificationNumber\nClearingIdentificationNumber\nCertificateOfIncorporationNumber\nCountryIdentificationCode\nCustomerNumber\nDataUniversalNumberingSystem\nEmployerIdentificationNumber\nGS1GLNIdentifier\nSIREN\nSIRET\nTaxIdentificationNumber\nBusinessDomainIdentifier\nBusinessOtherIdentification\n AlienRegistrationNumber\nPassportNumber\nCustomerIdentificationNumber\nDriversLicenseNumber\nEmployeeIdentificationNumber\nNationalIdentityNumber\nSocialSecurityNumber\nTelephoneNumber\nTaxIdentificationNumber\nPersonCommercialIdentification\n"
      example: TaxIdentificationNumber
    CreditTransfer:
      type: object
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        identifiers:
          $ref: '#/components/schemas/PaymentIdentifiers'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        exchangeDetail:
          $ref: '#/components/schemas/Exchange'
        checkDetail:
          $ref: '#/components/schemas/Check'
        valueDate:
          $ref: '#/components/schemas/Date'
        creditor:
          $ref: '#/components/schemas/PartyIdentification'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        date:
          $ref: '#/components/schemas/DateAndTime'
    PaymentStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Indicates the status of a payment. ISO Complaiant values:
        AcceptedTechnicalValidation, Received, Rejected, Pending, AcceptedCustomerProfile, AcceptedSettlementInProcess, AcceptedSettlementCompleted, Accepted, AcceptedCancellationRequest, RejectedCancellationRequest, AcceptedWithChange, PendingCancellationRequest, AcceptedCreditSettlementCompleted, PaymentCancelled,
         AcceptedSettlementCompletedCreditorAccount, AcceptedCustomerProfile, AcceptedFundsChecked, AcceptedandChequeIssued, AcceptedSettlementCompletedDebitorAccount, AcceptedWithoutPosting, Blocked, CashPickedUpByCreditor, PartiallyAcceptedTechnicalCorrect, Presented, AcceptedClearingProcessed, ServicerDeadlineMissed
      example: AcceptedSettlementCompleted
    StatusReason:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Reason for the status. Possible Values: AbortedClearingTimeout, AbortedClearingFatalError, AbortedSettlementTimeout, AbortedSettlementFatalError,TimeoutCreditorAgent, TimeoutInstructedAgent, OfflineAgent, OfflineCreditorAgent, ErrorCreditorAgent, ErrorInstructedAgent, TimeoutDebtorAgent,IncorrectAccountNumber, InvalidDebtorAccountNumber,InvalidCreditorAccountNumber, ClosedAccountNumber,ClosedDebtorAccountNumber, BlockedAccount,ClosedCreditorAccountNumber, InvalidBranchCode,InvalidAccountCurrency, InvalidDebtorAccountCurrency,InvalidCreditorAccountCurrency, InvalidAccountType,InvalidDebtorAccountType,InvalidCreditorAccountType,AccountDetailsChanged, CardNumberInvalid, TransactionForbidden, InvalidBankOperationCode, TransactionNotSupported, InvalidAgentCountry, InvalidDebtorAgentCountry, InvalidCreditorAgentCountry, UnsuccesfulDirectDebit, InvalidAccessRights,PaymentNotReceived, AgentSuspended,CreditorAgentSuspended, NotAllowedBookTransfer, ForbiddenReturnPayment, IncorrectAgent, ZeroAmount, NotAllowedAmount, NotAllowedCurrency, InsufficientFunds, Duplication, TooLowAmount, BlockedAmount, WrongAmount, InvalidControlSum, InvalidTransactionCurrency, InvalidAmount, AmountExceedsClearingSystemLimit, AmountExceedsAgreedLimit, AmountBelowClearingSystemMinimum, InvalidGroupControlSum, InvalidPaymentInfoControlSum, InvalidNumberOfTransactions,InvalidGroupNumberOfTransactions, InvalidPaymentInfoNumberOfTransactions, LimitExceeded, ZeroAmountNotApplied, AmountExceedsSettlementLimit, InconsistenWithEndCustomer, MissingCreditorAddress, UnrecognisedInitiatingParty, UnknownEndCustomer, MissingDebtorAddress, MissingDebtorName, InvalidCountry, InvalidDebtorCountry, InvalidCreditorCountry, InvalidCountryOfResidence, InvalidDebtorCountryOfResidence, InvalidCreditorCountryOfResidence, InvalidIdentificationCode, InvalidDebtorIdentificationCode, InvalidCreditorIdentificationCode, InvalidContactDetails, InvalidChargeBearerCode, InvalidNameLength, MissingName, MissingCreditorName, AccountProxyInvalid, CheckERI, RequestedExecutionDateOrRequestedCollectionDateTooFarInFuture, RequestedExecutionDateOrRequestedCollectionDateTooFarInPast, ElementIsNotToBeUsedAtB-andC-Level, MandateChangesNotAllowed, InformationOnMandateChangesMissing, CreditorIdentifierIncorrect, CreditorIdentifierNotUnambiguouslyAtTransaction-Level, OriginalDebtorAccountIsNotToBeUsed, OriginalDebtorAgentIsNotToBeUsed, ElementContentIncludesMoreThan140Characters, ElementContentFormallyIncorrect, ElementNotAdmitted, ValuesWillBeSetToNextTARGETday, DecimalPointsNotCompatibleWithCurrency, RequiredCompulsoryElementMissing, COREandB2BwithinOnemessage, ChequeSettledOnCreditorAccount, CreditorBankIsNotRegistered, IncorrectCurrency, RequestedByCustomer, DebtorBankIsNotRegistered,ElectronicSignaturesCorrect, OrderCancelled, OrderNotCancelled, OrderRejected, OrderForwardedForPostprocessing, TransferOrder, ProcessingOK, DecompressionError, DecryptionError, DataSignRequested, UnknownDataSignFormat, SignerCertificateRevoked, SignerCertificateNotValid, IncorrectSignerCertificate, SignerCertificationAuthoritySignerNotValid, NotAllowedPayment, NotAllowedAccount, NotAllowedNumberOfTransaction, Signer1CertificateRevoked, Signer1CertificateNotValid, IncorrectSigner1Certificate, SignerCertificationAuthoritySigner1NotValid, UserDoesNotExist, IdenticalSignatureFound, PublicKeyVersionIncorrect, DifferentOrderDataInSignatures, RepeatOrder, ElectronicSignatureRightsInsufficient, Signer2CertificateRevoked, Signer2CertificateNotValid, IncorrectSigner2Certificate, SignerCertificationAuthoritySigner2NotValid, WaitingTimeExpired, OrderFileDeleted, UserSignedMultipleTimes, UserNotYetActivated, InvalidDate, InvalidCreationDate, InvalidNonProcessingDate, FutureDateNotSupported, InvalidCutOffDate, ExecutionDateChanged, DuplicateMessageID, DuplicatePaymentInformationID, DuplicateTransaction, DuplicateEndToEndID, DuplicateInstructionID, DuplicatePayment, CorrespondentBankNotPossible, BalanceInfoRequest, SettlementFailed, SettlementSystemNotAvailable, ERIOptionNotSupported, InvalidFileFormat, SyntaxError, InvalidPaymentTypeInformation, InvalidServiceLevelCode, InvalidLocalInstrumentCode, InvalidCategoryPurposeCode, InvalidPurpose, InvalidEndToEndId, InvalidChequeNumber, BankSystemProcessingError, ClearingRequestAborted, PaymentTransferredAndTracked, PaymentTransferredAndNotTracked, CreditDebitNotConfirmed, CreditPendingDocuments, CreditPendingFunds, DeliveredWithServiceLevel, DeliveredWIthoutServiceLevel, CorrespondingOriginalFileStillNotSent, NoMandate, MissingMandatoryInformationInMandate, CollectionNotDue, RefundRequestByEndCustomer, EndCustomerDeceased, NotSpecifiedReasonCustomerGenerated, NotSpecifiedReasonAgentGenerated, Narrative, NoERI, BankIdentifierIncorrect, InvalidBankIdentifier, InvalidDebtorBankIdentifier, InvalidCreditorBankIdentifier, InvalidBICIdentifier, InvalidDebtorBICIdentifier, InvalidCreditorBICIdentifier, InvalidClearingSystemMemberIdentifier, InvalidDebtorClearingSystemMemberIdentifier, InvalidCreditorClearingSystemMemberIdentifier, InvalidIntermediaryAgent, MissingCreditorSchemeId, RMessageConflict, ReceiverCustomerInformation,NotUniqueTransactionReference, MissingDebtorAccountOrIdentification, MissingDebtorNameOrAddress, MissingCreditorNameOrAddress, RegulatoryReason, RegulatoryInformationInvalid, TaxInformationInvalid, RemittanceInformationInvalid, RemittanceInformationTruncated, InvalidStructuredCreditorReference, InvalidCharacterSet, InvalidDebtorAgentServiceID, InvalidPartyID, ValidRequestForCancellationAcknowledged, UETRFlaggedForCancellation, NetworkStopOfUETR, RequestForCancellationForwarded, RequestForCancellationDeliveryAcknowledgement, SpecificServiceOfferedByDebtorAgent, SpecificServiceOfferedByCreditorAgent, ServiceofClearingSystem, CreditorNotOnWhitelistOfDebtor, CreditorOnBlacklistOfDebtor, MaximumNumberOfDirectDebitTransactionsExceeded, MaximumDirectDebitTransactionAmountExceeded, TransmissonAborted, NoDataAvailable, FileNonReadable, IncorrectFileStructure, TokenInvalid, SenderTokenNotFound, ReceiverTokenNotFound, TokenMissing, TokenCounterpartyMismatch, TokenSingleUse, TokenSuspended, TokenValueLimitExceeded, TokenExpired, InvalidCutOffTime, TransmissionSuccessful, TransferToSignByHand, AuthorisationCancelled, FollowingCancellationRequest, Fraud, NotCompliantGeneric, NoAnswerFromCustomer, ReturnUponUnableToApply, UnduePayment, AlreadyAcceptedRTP, AlreadyExpiredRTP, AlreadyRefusedRTP, AlreadyRejectedRTP, AttachementsNotSupported, ExpiryDateTimeReached, ExpiryDateTooLong, FraudulentOrigin, IncorrectExpiryDateTime, InitialRTPNeverReceived, NonAgreedRTP, NoPaymentGuarantee, PayerOrPayerRTPSPNotReachable, RTPNotSupportedForDebtor, RTPReceivedCanBeProcessed, RTPServiceProviderIdentifierIncorrect, TypeOfPaymentInstrumentNotSupported, UnknownCreditor, OriginalTransactionNotEligibleForRequestedReturn, RequestForCancellationNotFound, SettlementNotReceived
      example: Cash
    FinancialInstitution:
      type: object
      properties:
        clearingSystemMemberIdentification:
          $ref: '#/components/schemas/ClearingSystemIdentification'
        memberIdentification:
          maxLength: 35
          minLength: 1
          type: string
        name:
          maxLength: 35
          minLength: 1
          type: string
        postalAddress:
          $ref: '#/components/schemas/PostalAddress'
        bIC:
          $ref: '#/components/schemas/BIC'
        lEI:
          $ref: '#/components/schemas/LEI'
        genericIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
    ClearingSystemIdentification:
      maxLength: 60
      minLength: 1
      type: string
      description: "Specifies the clearing system member identification. Some ISO complaiant values from ExternalCashClearingSystem1Code are:\n UnitedStatesRoutingNumberFedwireNACHA, \n AustrianBankleitzahl, AustralianBankStateBranchCodeBSB,CanadianPaymentsAssociationPaymentRoutingNumber,SwissFinancialInstitutionIdentificationShort,SwissFinancialInstitutionIdentificationLong,CNAPSIdentifier, GermanBankleitzahl, SpanishDomesticInterbankingCode, UKDomesticSortCode, HelenicBankIdentificationCode, HongKongBankCode, IrishNationalClearingCode, IndianFinancialSystemCode, ItalianDomesticIdentificationCode, JapanZenginClearingCode, NewZealandNationalClearingCode, PolishNationalClearingCode, PortugueseNationalClearingCode, RussianCentralBankIdentificationCode, SwedenBankgiroClearingCode, IBGSortCode, ThaiCentralBankIdentificationCode, FinancialInstitutionCode, CHIPSParticipantIdentifier, SouthAfricanNationalClearingCode, NewZealandRTGSClearingCode\n"
      example: UnitedStatesRoutingNumberFedwireNACHA
    DirectDebit:
      type: object
      properties:
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        identifiers:
          $ref: '#/components/schemas/PaymentIdentifiers'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        mandate:
          $ref: '#/components/schemas/DirectDebitMandate'
        requestedCollectionDate:
          $ref: '#/components/schemas/Date'
        debitor:
          $ref: '#/components/schemas/PartyIdentification'
    DirectDebitMandate:
      type: object
      properties:
        mandateId:
          $ref: '#/components/schemas/Id'
        dateOfSignature:
          $ref: '#/components/schemas/Date'
        digitalSignature:
          $ref: '#/components/schemas/DigitalSignature'
        firstCollectionDate:
          $ref: '#/components/schemas/Date'
        finalCollectionDate:
          $ref: '#/components/schemas/Date'
        frequency:
          $ref: '#/components/schemas/Frequency'
        trackingDays:
          $ref: '#/components/schemas/Day'
      description: Provides details related to a direct debit mandate signed between the creditor and the debtor.
    CreditTransferCancellationRequest:
      type: object
      properties:
        cancellationReason:
          $ref: '#/components/schemas/Description'
      description: "Request the cancellation of a credit transfer instruction. \n"
    DirectDebitInitiation:
      type: object
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          $ref: '#/components/schemas/AmountInCents'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        identifiers:
          $ref: '#/components/schemas/PaymentIdentifiers'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        mandate:
          $ref: '#/components/schemas/DirectDebitMandate'
        requestedCollectionDate:
          $ref: '#/components/schemas/Date'
        debitor:
          $ref: '#/components/schemas/PartyIdentification'
    CreditTransferCancellation:
      type: object
      properties:
        cancellationReason:
          $ref: '#/components/schemas/Description'
        cancellationId:
          $ref: '#/components/schemas/Id'
  parameters:
    idempotencyId:
      name: idempotencyId
      in: header
      description: Idempotency identifier used by the client when making repeated calls
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    servicerId:
      name: servicerId
      in: header
      description: Account Servicer Identification (Bank)
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    accountId:
      name: accountId
      in: path
      description: Account Identification
      required: true
      schema:
        $ref: '#/components/schemas/AccountId'
    pageCursor:
      name: cursor
      in: query
      description: |
        Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
      required: false
      schema:
        type: string
    pageLimit:
      name: limit
      in: query
      description: |
        Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
      required: false
      schema:
        type: string
    pageFirstCursor:
      name: Pagination-Cursor
      in: header
      description: Pagination Cursor
      required: true
      schema:
        type: string
    pageTotal:
      name: Pagination-Total
      in: header
      description: |
        Total number of resources.
      required: true
      schema:
        type: string
    standingOrderId:
      name: standingOrderId
      in: path
      description: Standing Order Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    personId:
      name: personId
      in: path
      description: Person Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    organizationId:
      name: organizationId
      in: path
      description: Organization Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    cardId:
      name: cardId
      in: path
      description: Card Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    loanId:
      name: loanId
      in: path
      description: Loan Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: http://localhost:8083/auth/realms/openbanking/.well-known/openid-configuration